"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_stagewise_toolbar-react_dist_index_js"],{

/***/ "(app-pages-browser)/./node_modules/@stagewise/toolbar-react/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@stagewise/toolbar-react/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StagewiseToolbar: () => (/* binding */ StagewiseToolbar)\n/* harmony export */ });\n/* harmony import */ var _stagewise_toolbar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stagewise/toolbar */ \"(app-pages-browser)/./node_modules/@stagewise/toolbar/dist/index.es.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n\nfunction StagewiseToolbar({\n  config,\n  enabled = \"development\" === \"development\"\n}) {\n  const isLoaded = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (isLoaded.current || !enabled) return;\n    isLoaded.current = true;\n    (0,_stagewise_toolbar__WEBPACK_IMPORTED_MODULE_0__.initToolbar)(config);\n  }, [config, enabled]);\n  return null;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3RhZ2V3aXNlL3Rvb2xiYXItcmVhY3QvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUQ7QUFDUDtBQUMxQztBQUNBO0FBQ0EsWUFBWSxhQUFvQjtBQUNoQyxDQUFDO0FBQ0QsbUJBQW1CLDZDQUFNO0FBQ3pCLEVBQUUsZ0RBQVM7QUFDWDtBQUNBO0FBQ0EsSUFBSSwrREFBVztBQUNmLEdBQUc7QUFDSDtBQUNBO0FBR0UiLCJzb3VyY2VzIjpbIi9ob21lL3RqL2Rldi93ZWIvc2FtLWpveW5lci1waG90b2dyYXBoeS9ub2RlX21vZHVsZXMvQHN0YWdld2lzZS90b29sYmFyLXJlYWN0L2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5pdFRvb2xiYXIgfSBmcm9tIFwiQHN0YWdld2lzZS90b29sYmFyXCI7XG5pbXBvcnQgeyB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gU3RhZ2V3aXNlVG9vbGJhcih7XG4gIGNvbmZpZyxcbiAgZW5hYmxlZCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCJcbn0pIHtcbiAgY29uc3QgaXNMb2FkZWQgPSB1c2VSZWYoZmFsc2UpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc0xvYWRlZC5jdXJyZW50IHx8ICFlbmFibGVkKSByZXR1cm47XG4gICAgaXNMb2FkZWQuY3VycmVudCA9IHRydWU7XG4gICAgaW5pdFRvb2xiYXIoY29uZmlnKTtcbiAgfSwgW2NvbmZpZywgZW5hYmxlZF0pO1xuICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydCB7XG4gIFN0YWdld2lzZVRvb2xiYXJcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@stagewise/toolbar-react/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@stagewise/toolbar/dist/index.es.js":
/*!**********************************************************!*\
  !*** ./node_modules/@stagewise/toolbar/dist/index.es.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initToolbar: () => (/* binding */ initToolbar)\n/* harmony export */ });\nvar define_MAIN_MODULES_default = { \"panel-BpInY05d.js\": `import { jsx, jsxs } from \"react/jsx-runtime\";\nimport { createContext, useState, useEffect, useContext, useRef, useCallback, useMemo } from \"react\";\nvar generateId$1 = (length = 16) => Math.random().toString(36).substring(2, length + 2), DEFAULT_OPTIONS = {\n  maxReconnectAttempts: 5,\n  reconnectDelay: 1e3,\n  requestTimeout: 3e4\n  // Extended timeout for longer operations\n}, WebSocketRpcBridge = class {\n  constructor(options = {}) {\n    this.ws = null, this.pendingRequests = /* @__PURE__ */ new Map(), this.reconnectAttempts = 0, this.methods = {}, this.isIntentionalClose = !1, this.options = { ...DEFAULT_OPTIONS, ...options };\n  }\n  /**\n   * Register RPC method handlers\n   * @param methodHandlers Object containing method handlers\n   */\n  register(methodHandlers) {\n    Object.entries(methodHandlers).forEach(([methodName, handler]) => {\n      this.methods[methodName] = { handler };\n    });\n  }\n  /**\n   * Generic method to call a remote procedure with support for streaming updates\n   * @param method Method name to call\n   * @param payload Request payload\n   * @param onUpdate Optional callback for progress updates\n   * @returns Promise resolving with the response\n   */\n  callMethod(method, payload, onUpdate) {\n    if (!this.ws)\n      throw new Error(\"WebSocket is not connected\");\n    const id = generateId$1(), requestMessage = {\n      id,\n      messageType: \"request\",\n      method,\n      payload\n    };\n    return new Promise((resolve, reject) => {\n      var _a;\n      const timeout = setTimeout(() => {\n        this.pendingRequests.delete(id), reject(new Error(\\`Request timed out: \\${method}\\`));\n      }, this.options.requestTimeout);\n      this.pendingRequests.set(id, { resolve, reject, timeout, onUpdate }), (_a = this.ws) == null || _a.send(JSON.stringify(requestMessage));\n    });\n  }\n  /**\n   * Sets up WebSocket event handlers\n   * @param ws WebSocket instance\n   */\n  setupWebSocketHandlers(ws) {\n    ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        this.handleMessage(message);\n      } catch (error) {\n        console.error(\"Error handling WebSocket message:\", error);\n      }\n    }, ws.onclose = () => {\n      this.handleDisconnect();\n    }, ws.onerror = (event) => {\n      console.error(\"WebSocket error:\", event);\n    };\n  }\n  /**\n   * Handles incoming WebSocket messages\n   * @param message The message to handle\n   */\n  handleMessage(message) {\n    const { messageType, id } = message;\n    switch (messageType) {\n      case \"request\":\n        this.handleRequest(message);\n        break;\n      case \"response\":\n        this.handleResponse(id, message.payload);\n        break;\n      case \"update\":\n        this.handleUpdate(id, message.payload);\n        break;\n      case \"error\":\n        this.handleError(id, message.error.message);\n        break;\n      default:\n        console.warn(\\`Unknown message type: \\${messageType}\\`);\n    }\n  }\n  /**\n   * Handle incoming requests by invoking the registered method\n   * @param message Request message\n   */\n  async handleRequest(message) {\n    const { id, method, payload } = message;\n    if (!method) {\n      this.sendError(id, \"Method name is required\");\n      return;\n    }\n    const methodDef = this.methods[method];\n    if (!methodDef) {\n      this.sendError(id, \\`Method not found: \\${method}\\`);\n      return;\n    }\n    try {\n      const sendUpdate = (update) => {\n        this.sendUpdate(id, method, update);\n      }, result = await methodDef.handler(payload, sendUpdate);\n      this.sendResponse(id, method, result);\n    } catch (error) {\n      this.sendError(\n        id,\n        error instanceof Error ? error.message : String(error)\n      );\n    }\n  }\n  /**\n   * Handle response messages by resolving the pending request\n   * @param id Request ID\n   * @param payload Response payload\n   */\n  handleResponse(id, payload) {\n    const pendingRequest = this.pendingRequests.get(id);\n    if (!pendingRequest) {\n      console.warn(\\`Received response for unknown request ID: \\${id}\\`);\n      return;\n    }\n    clearTimeout(pendingRequest.timeout), this.pendingRequests.delete(id), pendingRequest.resolve(payload);\n  }\n  /**\n   * Handle update messages by calling the update callback\n   * @param id Request ID\n   * @param payload Update payload\n   */\n  handleUpdate(id, payload) {\n    const pendingRequest = this.pendingRequests.get(id);\n    if (!pendingRequest || !pendingRequest.onUpdate) {\n      console.warn(\\`Received update for unknown request ID: \\${id}\\`);\n      return;\n    }\n    pendingRequest.onUpdate(payload);\n  }\n  /**\n   * Handle error messages by rejecting the pending request\n   * @param id Request ID\n   * @param error Error message\n   */\n  handleError(id, error) {\n    const pendingRequest = this.pendingRequests.get(id);\n    if (!pendingRequest) {\n      console.warn(\\`Received error for unknown request ID: \\${id}\\`);\n      return;\n    }\n    clearTimeout(pendingRequest.timeout), this.pendingRequests.delete(id), pendingRequest.reject(new Error(error));\n  }\n  /**\n   * Send a response message\n   * @param id Request ID\n   * @param method Method name\n   * @param payload Response payload\n   */\n  sendResponse(id, method, payload) {\n    if (!this.ws)\n      throw new Error(\"WebSocket is not connected\");\n    const responseMessage = {\n      id,\n      messageType: \"response\",\n      method,\n      payload\n    };\n    this.ws.send(JSON.stringify(responseMessage));\n  }\n  /**\n   * Send an update message for streaming\n   * @param id Request ID\n   * @param method Method name\n   * @param payload Update payload\n   */\n  sendUpdate(id, method, payload) {\n    if (!this.ws)\n      throw new Error(\"WebSocket is not connected\");\n    const updateMessage = {\n      id,\n      messageType: \"update\",\n      method,\n      payload\n    };\n    this.ws.send(JSON.stringify(updateMessage));\n  }\n  /**\n   * Send an error message\n   * @param id Request ID\n   * @param errorMessage Error message\n   */\n  sendError(id, errorMessage) {\n    if (!this.ws)\n      throw new Error(\"WebSocket is not connected\");\n    const errorResponse = {\n      id,\n      messageType: \"error\",\n      error: {\n        message: errorMessage\n      }\n    };\n    this.ws.send(JSON.stringify(errorResponse));\n  }\n  /**\n   * Handle disconnection by attempting to reconnect\n   */\n  handleDisconnect() {\n    if (this.isIntentionalClose) {\n      console.log(\n        \"WebSocket closed intentionally, not attempting to reconnect\"\n      ), this.clearPendingRequests(new Error(\"Connection closed by user\"));\n      return;\n    }\n    this.reconnectAttempts < this.options.maxReconnectAttempts ? (this.reconnectAttempts++, console.log(\n      \\`Attempting to reconnect (\\${this.reconnectAttempts}/\\${this.options.maxReconnectAttempts})...\\`\n    ), setTimeout(\n      () => this.reconnect(),\n      this.options.reconnectDelay * this.reconnectAttempts\n    )) : (console.error(\"Max reconnection attempts reached\"), this.clearPendingRequests(new Error(\"Connection closed\")));\n  }\n  /**\n   * Clear all pending requests with an error\n   * @param error Error to reject with\n   */\n  clearPendingRequests(error) {\n    this.pendingRequests.forEach(({ reject }) => {\n      reject(error);\n    }), this.pendingRequests.clear();\n  }\n  /**\n   * Close the WebSocket connection\n   * @returns Promise that resolves when the connection is closed\n   */\n  async close() {\n    this.isIntentionalClose = !0, this.ws && (this.ws.close(), this.ws = null), this.clearPendingRequests(new Error(\"Connection closed by user\"));\n  }\n};\nfunction validateWithZod(schema, data, context, silent = !1) {\n  const result = schema.safeParse(data);\n  if (!result.success) {\n    const error = new Error(\n      \\`Validation failed for \\${context}: \\${result.error.message}\\`\n    );\n    if (silent)\n      return console.error(error), data;\n    throw error;\n  }\n  return result.data;\n}\nvar ZodTypedBridge = class {\n  constructor(bridge, contract2) {\n    this.bridge = bridge, this.contract = contract2, this.call = new Proxy({}, {\n      get: (_target, prop) => (request, options) => this.callMethod(prop, request, options)\n    });\n  }\n  async callMethod(method, request, options) {\n    const methodContract = this.contract.consumes[method];\n    if (!methodContract)\n      throw new Error(\\`Method \\${String(method)} not found in contract\\`);\n    const validatedRequest = validateWithZod(\n      methodContract.request,\n      request,\n      \\`request for method \\${String(method)}\\`\n    ), onUpdate = options != null && options.onUpdate && methodContract.update ? (update) => {\n      var _a;\n      if (methodContract.update)\n        try {\n          const validatedUpdate = validateWithZod(\n            methodContract.update,\n            update,\n            \\`update for method \\${String(method)}\\`,\n            !0\n            // silently log validation errors\n          );\n          (_a = options.onUpdate) == null || _a.call(options, validatedUpdate);\n        } catch (error) {\n          console.error(\"Update validation failed:\", error);\n        }\n    } : void 0, response = await this.bridge.callMethod(\n      method,\n      validatedRequest,\n      onUpdate\n    );\n    return validateWithZod(\n      methodContract.response,\n      response,\n      \\`response for method \\${String(method)}\\`\n    );\n  }\n  register(implementations) {\n    const wrappedImplementations = {};\n    for (const [method, implementation] of Object.entries(implementations)) {\n      const methodContract = this.contract.serves[method];\n      if (!methodContract)\n        throw new Error(\\`Method \\${method} not found in contract\\`);\n      wrappedImplementations[method] = async (request, sendUpdate) => {\n        const validatedRequest = validateWithZod(\n          methodContract.request,\n          request,\n          \\`request for method \\${method}\\`\n        ), wrappedSendUpdate = methodContract.update && sendUpdate ? (update) => {\n          if (methodContract.update)\n            try {\n              const validatedUpdate = validateWithZod(\n                methodContract.update,\n                update,\n                \\`update for method \\${method}\\`,\n                !0\n                // silently log validation errors\n              );\n              sendUpdate(validatedUpdate);\n            } catch (error) {\n              console.error(\"Update validation failed:\", error);\n            }\n        } : void 0, response = await implementation(validatedRequest, {\n          sendUpdate: wrappedSendUpdate\n        });\n        return validateWithZod(\n          methodContract.response,\n          response,\n          \\`response for method \\${method}\\`\n        );\n      };\n    }\n    this.bridge.register(wrappedImplementations);\n  }\n  async close() {\n    await this.bridge.close();\n  }\n}, ClientBridge = class extends WebSocketRpcBridge {\n  constructor(url, options) {\n    super(options), this.reconnectTimer = null, this.url = url;\n  }\n  call(method, payload, onUpdate) {\n    return this.callMethod(method, payload, onUpdate);\n  }\n  reconnect() {\n    this.reconnectTimer && clearTimeout(this.reconnectTimer), this.reconnectTimer = setTimeout(async () => {\n      try {\n        await this.connect();\n      } catch {\n        this.reconnect();\n      }\n    }, this.options.reconnectDelay);\n  }\n  connect() {\n    return new Promise((resolve, reject) => {\n      try {\n        const ws = new window.WebSocket(this.url);\n        ws.onopen = () => {\n          this.ws = ws, this.setupWebSocketHandlers(ws), resolve();\n        }, ws.onerror = () => {\n          reject(new Error(\"Failed to connect to WebSocket server\"));\n        };\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}, ZodClient = class extends ZodTypedBridge {\n  constructor(url, contract2, options) {\n    super(new ClientBridge(url, options), {\n      serves: contract2.client || {},\n      consumes: contract2.server || {}\n    });\n  }\n  connect() {\n    return this.bridge.connect();\n  }\n};\nfunction createSRPCClientBridge(url, contract2, options) {\n  return new ZodClient(url, contract2, options);\n}\nvar util;\n(function(util2) {\n  util2.assertEqual = (_) => {\n  };\n  function assertIs(_arg) {\n  }\n  util2.assertIs = assertIs;\n  function assertNever(_x) {\n    throw new Error();\n  }\n  util2.assertNever = assertNever, util2.arrayToEnum = (items) => {\n    const obj = {};\n    for (const item of items)\n      obj[item] = item;\n    return obj;\n  }, util2.getValidEnumValues = (obj) => {\n    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] != \"number\"), filtered = {};\n    for (const k of validKeys)\n      filtered[k] = obj[k];\n    return util2.objectValues(filtered);\n  }, util2.objectValues = (obj) => util2.objectKeys(obj).map(function(e) {\n    return obj[e];\n  }), util2.objectKeys = typeof Object.keys == \"function\" ? (obj) => Object.keys(obj) : (object) => {\n    const keys = [];\n    for (const key in object)\n      Object.prototype.hasOwnProperty.call(object, key) && keys.push(key);\n    return keys;\n  }, util2.find = (arr, checker) => {\n    for (const item of arr)\n      if (checker(item))\n        return item;\n  }, util2.isInteger = typeof Number.isInteger == \"function\" ? (val) => Number.isInteger(val) : (val) => typeof val == \"number\" && Number.isFinite(val) && Math.floor(val) === val;\n  function joinValues(array, separator = \" | \") {\n    return array.map((val) => typeof val == \"string\" ? \\`'\\${val}'\\` : val).join(separator);\n  }\n  util2.joinValues = joinValues, util2.jsonStringifyReplacer = (_, value) => typeof value == \"bigint\" ? value.toString() : value;\n})(util || (util = {}));\nvar objectUtil;\n(function(objectUtil2) {\n  objectUtil2.mergeShapes = (first, second) => ({\n    ...first,\n    ...second\n    // second overwrites first\n  });\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n  \"string\",\n  \"nan\",\n  \"number\",\n  \"integer\",\n  \"float\",\n  \"boolean\",\n  \"date\",\n  \"bigint\",\n  \"symbol\",\n  \"function\",\n  \"undefined\",\n  \"null\",\n  \"array\",\n  \"object\",\n  \"unknown\",\n  \"promise\",\n  \"void\",\n  \"never\",\n  \"map\",\n  \"set\"\n]), getParsedType = (data) => {\n  switch (typeof data) {\n    case \"undefined\":\n      return ZodParsedType.undefined;\n    case \"string\":\n      return ZodParsedType.string;\n    case \"number\":\n      return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n    case \"boolean\":\n      return ZodParsedType.boolean;\n    case \"function\":\n      return ZodParsedType.function;\n    case \"bigint\":\n      return ZodParsedType.bigint;\n    case \"symbol\":\n      return ZodParsedType.symbol;\n    case \"object\":\n      return Array.isArray(data) ? ZodParsedType.array : data === null ? ZodParsedType.null : data.then && typeof data.then == \"function\" && data.catch && typeof data.catch == \"function\" ? ZodParsedType.promise : typeof Map < \"u\" && data instanceof Map ? ZodParsedType.map : typeof Set < \"u\" && data instanceof Set ? ZodParsedType.set : typeof Date < \"u\" && data instanceof Date ? ZodParsedType.date : ZodParsedType.object;\n    default:\n      return ZodParsedType.unknown;\n  }\n}, ZodIssueCode = util.arrayToEnum([\n  \"invalid_type\",\n  \"invalid_literal\",\n  \"custom\",\n  \"invalid_union\",\n  \"invalid_union_discriminator\",\n  \"invalid_enum_value\",\n  \"unrecognized_keys\",\n  \"invalid_arguments\",\n  \"invalid_return_type\",\n  \"invalid_date\",\n  \"invalid_string\",\n  \"too_small\",\n  \"too_big\",\n  \"invalid_intersection_types\",\n  \"not_multiple_of\",\n  \"not_finite\"\n]);\nclass ZodError extends Error {\n  get errors() {\n    return this.issues;\n  }\n  constructor(issues) {\n    super(), this.issues = [], this.addIssue = (sub) => {\n      this.issues = [...this.issues, sub];\n    }, this.addIssues = (subs = []) => {\n      this.issues = [...this.issues, ...subs];\n    };\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf ? Object.setPrototypeOf(this, actualProto) : this.__proto__ = actualProto, this.name = \"ZodError\", this.issues = issues;\n  }\n  format(_mapper) {\n    const mapper = _mapper || function(issue) {\n      return issue.message;\n    }, fieldErrors = { _errors: [] }, processError = (error) => {\n      for (const issue of error.issues)\n        if (issue.code === \"invalid_union\")\n          issue.unionErrors.map(processError);\n        else if (issue.code === \"invalid_return_type\")\n          processError(issue.returnTypeError);\n        else if (issue.code === \"invalid_arguments\")\n          processError(issue.argumentsError);\n        else if (issue.path.length === 0)\n          fieldErrors._errors.push(mapper(issue));\n        else {\n          let curr = fieldErrors, i = 0;\n          for (; i < issue.path.length; ) {\n            const el = issue.path[i];\n            i === issue.path.length - 1 ? (curr[el] = curr[el] || { _errors: [] }, curr[el]._errors.push(mapper(issue))) : curr[el] = curr[el] || { _errors: [] }, curr = curr[el], i++;\n          }\n        }\n    };\n    return processError(this), fieldErrors;\n  }\n  static assert(value) {\n    if (!(value instanceof ZodError))\n      throw new Error(\\`Not a ZodError: \\${value}\\`);\n  }\n  toString() {\n    return this.message;\n  }\n  get message() {\n    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n  }\n  get isEmpty() {\n    return this.issues.length === 0;\n  }\n  flatten(mapper = (issue) => issue.message) {\n    const fieldErrors = {}, formErrors = [];\n    for (const sub of this.issues)\n      sub.path.length > 0 ? (fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [], fieldErrors[sub.path[0]].push(mapper(sub))) : formErrors.push(mapper(sub));\n    return { formErrors, fieldErrors };\n  }\n  get formErrors() {\n    return this.flatten();\n  }\n}\nZodError.create = (issues) => new ZodError(issues);\nconst errorMap = (issue, _ctx) => {\n  let message;\n  switch (issue.code) {\n    case ZodIssueCode.invalid_type:\n      issue.received === ZodParsedType.undefined ? message = \"Required\" : message = \\`Expected \\${issue.expected}, received \\${issue.received}\\`;\n      break;\n    case ZodIssueCode.invalid_literal:\n      message = \\`Invalid literal value, expected \\${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}\\`;\n      break;\n    case ZodIssueCode.unrecognized_keys:\n      message = \\`Unrecognized key(s) in object: \\${util.joinValues(issue.keys, \", \")}\\`;\n      break;\n    case ZodIssueCode.invalid_union:\n      message = \"Invalid input\";\n      break;\n    case ZodIssueCode.invalid_union_discriminator:\n      message = \\`Invalid discriminator value. Expected \\${util.joinValues(issue.options)}\\`;\n      break;\n    case ZodIssueCode.invalid_enum_value:\n      message = \\`Invalid enum value. Expected \\${util.joinValues(issue.options)}, received '\\${issue.received}'\\`;\n      break;\n    case ZodIssueCode.invalid_arguments:\n      message = \"Invalid function arguments\";\n      break;\n    case ZodIssueCode.invalid_return_type:\n      message = \"Invalid function return type\";\n      break;\n    case ZodIssueCode.invalid_date:\n      message = \"Invalid date\";\n      break;\n    case ZodIssueCode.invalid_string:\n      typeof issue.validation == \"object\" ? \"includes\" in issue.validation ? (message = \\`Invalid input: must include \"\\${issue.validation.includes}\"\\`, typeof issue.validation.position == \"number\" && (message = \\`\\${message} at one or more positions greater than or equal to \\${issue.validation.position}\\`)) : \"startsWith\" in issue.validation ? message = \\`Invalid input: must start with \"\\${issue.validation.startsWith}\"\\` : \"endsWith\" in issue.validation ? message = \\`Invalid input: must end with \"\\${issue.validation.endsWith}\"\\` : util.assertNever(issue.validation) : issue.validation !== \"regex\" ? message = \\`Invalid \\${issue.validation}\\` : message = \"Invalid\";\n      break;\n    case ZodIssueCode.too_small:\n      issue.type === \"array\" ? message = \\`Array must contain \\${issue.exact ? \"exactly\" : issue.inclusive ? \"at least\" : \"more than\"} \\${issue.minimum} element(s)\\` : issue.type === \"string\" ? message = \\`String must contain \\${issue.exact ? \"exactly\" : issue.inclusive ? \"at least\" : \"over\"} \\${issue.minimum} character(s)\\` : issue.type === \"number\" ? message = \\`Number must be \\${issue.exact ? \"exactly equal to \" : issue.inclusive ? \"greater than or equal to \" : \"greater than \"}\\${issue.minimum}\\` : issue.type === \"date\" ? message = \\`Date must be \\${issue.exact ? \"exactly equal to \" : issue.inclusive ? \"greater than or equal to \" : \"greater than \"}\\${new Date(Number(issue.minimum))}\\` : message = \"Invalid input\";\n      break;\n    case ZodIssueCode.too_big:\n      issue.type === \"array\" ? message = \\`Array must contain \\${issue.exact ? \"exactly\" : issue.inclusive ? \"at most\" : \"less than\"} \\${issue.maximum} element(s)\\` : issue.type === \"string\" ? message = \\`String must contain \\${issue.exact ? \"exactly\" : issue.inclusive ? \"at most\" : \"under\"} \\${issue.maximum} character(s)\\` : issue.type === \"number\" ? message = \\`Number must be \\${issue.exact ? \"exactly\" : issue.inclusive ? \"less than or equal to\" : \"less than\"} \\${issue.maximum}\\` : issue.type === \"bigint\" ? message = \\`BigInt must be \\${issue.exact ? \"exactly\" : issue.inclusive ? \"less than or equal to\" : \"less than\"} \\${issue.maximum}\\` : issue.type === \"date\" ? message = \\`Date must be \\${issue.exact ? \"exactly\" : issue.inclusive ? \"smaller than or equal to\" : \"smaller than\"} \\${new Date(Number(issue.maximum))}\\` : message = \"Invalid input\";\n      break;\n    case ZodIssueCode.custom:\n      message = \"Invalid input\";\n      break;\n    case ZodIssueCode.invalid_intersection_types:\n      message = \"Intersection results could not be merged\";\n      break;\n    case ZodIssueCode.not_multiple_of:\n      message = \\`Number must be a multiple of \\${issue.multipleOf}\\`;\n      break;\n    case ZodIssueCode.not_finite:\n      message = \"Number must be finite\";\n      break;\n    default:\n      message = _ctx.defaultError, util.assertNever(issue);\n  }\n  return { message };\n};\nlet overrideErrorMap = errorMap;\nfunction getErrorMap() {\n  return overrideErrorMap;\n}\nconst makeIssue = (params) => {\n  const { data, path, errorMaps, issueData } = params, fullPath = [...path, ...issueData.path || []], fullIssue = {\n    ...issueData,\n    path: fullPath\n  };\n  if (issueData.message !== void 0)\n    return {\n      ...issueData,\n      path: fullPath,\n      message: issueData.message\n    };\n  let errorMessage = \"\";\n  const maps = errorMaps.filter((m) => !!m).slice().reverse();\n  for (const map of maps)\n    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n  return {\n    ...issueData,\n    path: fullPath,\n    message: errorMessage\n  };\n};\nfunction addIssueToContext(ctx, issueData) {\n  const overrideMap = getErrorMap(), issue = makeIssue({\n    issueData,\n    data: ctx.data,\n    path: ctx.path,\n    errorMaps: [\n      ctx.common.contextualErrorMap,\n      // contextual error map is first priority\n      ctx.schemaErrorMap,\n      // then schema-bound map if available\n      overrideMap,\n      // then global override map\n      overrideMap === errorMap ? void 0 : errorMap\n      // then global default map\n    ].filter((x) => !!x)\n  });\n  ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n  constructor() {\n    this.value = \"valid\";\n  }\n  dirty() {\n    this.value === \"valid\" && (this.value = \"dirty\");\n  }\n  abort() {\n    this.value !== \"aborted\" && (this.value = \"aborted\");\n  }\n  static mergeArray(status, results) {\n    const arrayValue = [];\n    for (const s of results) {\n      if (s.status === \"aborted\")\n        return INVALID;\n      s.status === \"dirty\" && status.dirty(), arrayValue.push(s.value);\n    }\n    return { status: status.value, value: arrayValue };\n  }\n  static async mergeObjectAsync(status, pairs) {\n    const syncPairs = [];\n    for (const pair of pairs) {\n      const key = await pair.key, value = await pair.value;\n      syncPairs.push({\n        key,\n        value\n      });\n    }\n    return ParseStatus.mergeObjectSync(status, syncPairs);\n  }\n  static mergeObjectSync(status, pairs) {\n    const finalObject = {};\n    for (const pair of pairs) {\n      const { key, value } = pair;\n      if (key.status === \"aborted\" || value.status === \"aborted\")\n        return INVALID;\n      key.status === \"dirty\" && status.dirty(), value.status === \"dirty\" && status.dirty(), key.value !== \"__proto__\" && (typeof value.value < \"u\" || pair.alwaysSet) && (finalObject[key.value] = value.value);\n    }\n    return { status: status.value, value: finalObject };\n  }\n}\nconst INVALID = Object.freeze({\n  status: \"aborted\"\n}), DIRTY = (value) => ({ status: \"dirty\", value }), OK = (value) => ({ status: \"valid\", value }), isAborted = (x) => x.status === \"aborted\", isDirty = (x) => x.status === \"dirty\", isValid = (x) => x.status === \"valid\", isAsync = (x) => typeof Promise < \"u\" && x instanceof Promise;\nvar errorUtil;\n(function(errorUtil2) {\n  errorUtil2.errToObj = (message) => typeof message == \"string\" ? { message } : message || {}, errorUtil2.toString = (message) => typeof message == \"string\" ? message : message == null ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\nclass ParseInputLazyPath {\n  constructor(parent, value, path, key) {\n    this._cachedPath = [], this.parent = parent, this.data = value, this._path = path, this._key = key;\n  }\n  get path() {\n    return this._cachedPath.length || (Array.isArray(this._key) ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;\n  }\n}\nconst handleResult = (ctx, result) => {\n  if (isValid(result))\n    return { success: !0, data: result.value };\n  if (!ctx.common.issues.length)\n    throw new Error(\"Validation failed but no issues detected.\");\n  return {\n    success: !1,\n    get error() {\n      if (this._error)\n        return this._error;\n      const error = new ZodError(ctx.common.issues);\n      return this._error = error, this._error;\n    }\n  };\n};\nfunction processCreateParams(params) {\n  if (!params)\n    return {};\n  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;\n  if (errorMap2 && (invalid_type_error || required_error))\n    throw new Error(\\`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.\\`);\n  return errorMap2 ? { errorMap: errorMap2, description } : { errorMap: (iss, ctx) => {\n    const { message } = params;\n    return iss.code === \"invalid_enum_value\" ? { message: message ?? ctx.defaultError } : typeof ctx.data > \"u\" ? { message: message ?? required_error ?? ctx.defaultError } : iss.code !== \"invalid_type\" ? { message: ctx.defaultError } : { message: message ?? invalid_type_error ?? ctx.defaultError };\n  }, description };\n}\nclass ZodType {\n  get description() {\n    return this._def.description;\n  }\n  _getType(input) {\n    return getParsedType(input.data);\n  }\n  _getOrReturnCtx(input, ctx) {\n    return ctx || {\n      common: input.parent.common,\n      data: input.data,\n      parsedType: getParsedType(input.data),\n      schemaErrorMap: this._def.errorMap,\n      path: input.path,\n      parent: input.parent\n    };\n  }\n  _processInputParams(input) {\n    return {\n      status: new ParseStatus(),\n      ctx: {\n        common: input.parent.common,\n        data: input.data,\n        parsedType: getParsedType(input.data),\n        schemaErrorMap: this._def.errorMap,\n        path: input.path,\n        parent: input.parent\n      }\n    };\n  }\n  _parseSync(input) {\n    const result = this._parse(input);\n    if (isAsync(result))\n      throw new Error(\"Synchronous parse encountered promise.\");\n    return result;\n  }\n  _parseAsync(input) {\n    const result = this._parse(input);\n    return Promise.resolve(result);\n  }\n  parse(data, params) {\n    const result = this.safeParse(data, params);\n    if (result.success)\n      return result.data;\n    throw result.error;\n  }\n  safeParse(data, params) {\n    const ctx = {\n      common: {\n        issues: [],\n        async: (params == null ? void 0 : params.async) ?? !1,\n        contextualErrorMap: params == null ? void 0 : params.errorMap\n      },\n      path: (params == null ? void 0 : params.path) || [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data,\n      parsedType: getParsedType(data)\n    }, result = this._parseSync({ data, path: ctx.path, parent: ctx });\n    return handleResult(ctx, result);\n  }\n  \"~validate\"(data) {\n    var _a, _b;\n    const ctx = {\n      common: {\n        issues: [],\n        async: !!this[\"~standard\"].async\n      },\n      path: [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data,\n      parsedType: getParsedType(data)\n    };\n    if (!this[\"~standard\"].async)\n      try {\n        const result = this._parseSync({ data, path: [], parent: ctx });\n        return isValid(result) ? {\n          value: result.value\n        } : {\n          issues: ctx.common.issues\n        };\n      } catch (err) {\n        (_b = (_a = err == null ? void 0 : err.message) == null ? void 0 : _a.toLowerCase()) != null && _b.includes(\"encountered\") && (this[\"~standard\"].async = !0), ctx.common = {\n          issues: [],\n          async: !0\n        };\n      }\n    return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {\n      value: result.value\n    } : {\n      issues: ctx.common.issues\n    });\n  }\n  async parseAsync(data, params) {\n    const result = await this.safeParseAsync(data, params);\n    if (result.success)\n      return result.data;\n    throw result.error;\n  }\n  async safeParseAsync(data, params) {\n    const ctx = {\n      common: {\n        issues: [],\n        contextualErrorMap: params == null ? void 0 : params.errorMap,\n        async: !0\n      },\n      path: (params == null ? void 0 : params.path) || [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data,\n      parsedType: getParsedType(data)\n    }, maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx }), result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n    return handleResult(ctx, result);\n  }\n  refine(check, message) {\n    const getIssueProperties = (val) => typeof message == \"string\" || typeof message > \"u\" ? { message } : typeof message == \"function\" ? message(val) : message;\n    return this._refinement((val, ctx) => {\n      const result = check(val), setError = () => ctx.addIssue({\n        code: ZodIssueCode.custom,\n        ...getIssueProperties(val)\n      });\n      return typeof Promise < \"u\" && result instanceof Promise ? result.then((data) => data ? !0 : (setError(), !1)) : result ? !0 : (setError(), !1);\n    });\n  }\n  refinement(check, refinementData) {\n    return this._refinement((val, ctx) => check(val) ? !0 : (ctx.addIssue(typeof refinementData == \"function\" ? refinementData(val, ctx) : refinementData), !1));\n  }\n  _refinement(refinement) {\n    return new ZodEffects({\n      schema: this,\n      typeName: ZodFirstPartyTypeKind.ZodEffects,\n      effect: { type: \"refinement\", refinement }\n    });\n  }\n  superRefine(refinement) {\n    return this._refinement(refinement);\n  }\n  constructor(def) {\n    this.spa = this.safeParseAsync, this._def = def, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this), this[\"~standard\"] = {\n      version: 1,\n      vendor: \"zod\",\n      validate: (data) => this[\"~validate\"](data)\n    };\n  }\n  optional() {\n    return ZodOptional.create(this, this._def);\n  }\n  nullable() {\n    return ZodNullable.create(this, this._def);\n  }\n  nullish() {\n    return this.nullable().optional();\n  }\n  array() {\n    return ZodArray.create(this);\n  }\n  promise() {\n    return ZodPromise.create(this, this._def);\n  }\n  or(option) {\n    return ZodUnion.create([this, option], this._def);\n  }\n  and(incoming) {\n    return ZodIntersection.create(this, incoming, this._def);\n  }\n  transform(transform) {\n    return new ZodEffects({\n      ...processCreateParams(this._def),\n      schema: this,\n      typeName: ZodFirstPartyTypeKind.ZodEffects,\n      effect: { type: \"transform\", transform }\n    });\n  }\n  default(def) {\n    const defaultValueFunc = typeof def == \"function\" ? def : () => def;\n    return new ZodDefault({\n      ...processCreateParams(this._def),\n      innerType: this,\n      defaultValue: defaultValueFunc,\n      typeName: ZodFirstPartyTypeKind.ZodDefault\n    });\n  }\n  brand() {\n    return new ZodBranded({\n      typeName: ZodFirstPartyTypeKind.ZodBranded,\n      type: this,\n      ...processCreateParams(this._def)\n    });\n  }\n  catch(def) {\n    const catchValueFunc = typeof def == \"function\" ? def : () => def;\n    return new ZodCatch({\n      ...processCreateParams(this._def),\n      innerType: this,\n      catchValue: catchValueFunc,\n      typeName: ZodFirstPartyTypeKind.ZodCatch\n    });\n  }\n  describe(description) {\n    const This = this.constructor;\n    return new This({\n      ...this._def,\n      description\n    });\n  }\n  pipe(target) {\n    return ZodPipeline.create(this, target);\n  }\n  readonly() {\n    return ZodReadonly.create(this);\n  }\n  isOptional() {\n    return this.safeParse(void 0).success;\n  }\n  isNullable() {\n    return this.safeParse(null).success;\n  }\n}\nconst cuidRegex = /^c[^\\\\s-]{8,}$/i, cuid2Regex = /^[0-9a-z]+$/, ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i, uuidRegex = /^[0-9a-fA-F]{8}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{12}$/i, nanoidRegex = /^[a-z0-9_-]{21}$/i, jwtRegex = /^[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]*$/, durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\\\d+Y)|(?:[-+]?\\\\d+[.,]\\\\d+Y$))?(?:(?:[-+]?\\\\d+M)|(?:[-+]?\\\\d+[.,]\\\\d+M$))?(?:(?:[-+]?\\\\d+W)|(?:[-+]?\\\\d+[.,]\\\\d+W$))?(?:(?:[-+]?\\\\d+D)|(?:[-+]?\\\\d+[.,]\\\\d+D$))?(?:T(?=[\\\\d+-])(?:(?:[-+]?\\\\d+H)|(?:[-+]?\\\\d+[.,]\\\\d+H$))?(?:(?:[-+]?\\\\d+M)|(?:[-+]?\\\\d+[.,]\\\\d+M$))?(?:[-+]?\\\\d+(?:[.,]\\\\d+)?S)?)??$/, emailRegex = /^(?!\\\\.)(?!.*\\\\.\\\\.)([A-Z0-9_'+\\\\-\\\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\\\-]*\\\\.)+[A-Z]{2,}$/i, _emojiRegex = \"^(\\\\\\\\p{Extended_Pictographic}|\\\\\\\\p{Emoji_Component})+$\";\nlet emojiRegex;\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/, ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\\\/(3[0-2]|[12]?[0-9])$/, ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/, ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/, base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/, base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/, dateRegexSource = \"((\\\\\\\\d\\\\\\\\d[2468][048]|\\\\\\\\d\\\\\\\\d[13579][26]|\\\\\\\\d\\\\\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\\\\\d|30)|(02)-(0[1-9]|1\\\\\\\\d|2[0-8])))\", dateRegex = new RegExp(\\`^\\${dateRegexSource}$\\`);\nfunction timeRegexSource(args) {\n  let secondsRegexSource = \"[0-5]\\\\\\\\d\";\n  args.precision ? secondsRegexSource = \\`\\${secondsRegexSource}\\\\\\\\.\\\\\\\\d{\\${args.precision}}\\` : args.precision == null && (secondsRegexSource = \\`\\${secondsRegexSource}(\\\\\\\\.\\\\\\\\d+)?\\`);\n  const secondsQuantifier = args.precision ? \"+\" : \"?\";\n  return \\`([01]\\\\\\\\d|2[0-3]):[0-5]\\\\\\\\d(:\\${secondsRegexSource})\\${secondsQuantifier}\\`;\n}\nfunction timeRegex(args) {\n  return new RegExp(\\`^\\${timeRegexSource(args)}$\\`);\n}\nfunction datetimeRegex(args) {\n  let regex = \\`\\${dateRegexSource}T\\${timeRegexSource(args)}\\`;\n  const opts = [];\n  return opts.push(args.local ? \"Z?\" : \"Z\"), args.offset && opts.push(\"([+-]\\\\\\\\d{2}:?\\\\\\\\d{2})\"), regex = \\`\\${regex}(\\${opts.join(\"|\")})\\`, new RegExp(\\`^\\${regex}$\\`);\n}\nfunction isValidIP(ip, version) {\n  return !!((version === \"v4\" || !version) && ipv4Regex.test(ip) || (version === \"v6\" || !version) && ipv6Regex.test(ip));\n}\nfunction isValidJWT(jwt, alg) {\n  if (!jwtRegex.test(jwt))\n    return !1;\n  try {\n    const [header] = jwt.split(\".\"), base64 = header.replace(/-/g, \"+\").replace(/_/g, \"/\").padEnd(header.length + (4 - header.length % 4) % 4, \"=\"), decoded = JSON.parse(atob(base64));\n    return !(typeof decoded != \"object\" || decoded === null || \"typ\" in decoded && (decoded == null ? void 0 : decoded.typ) !== \"JWT\" || !decoded.alg || alg && decoded.alg !== alg);\n  } catch {\n    return !1;\n  }\n}\nfunction isValidCidr(ip, version) {\n  return !!((version === \"v4\" || !version) && ipv4CidrRegex.test(ip) || (version === \"v6\" || !version) && ipv6CidrRegex.test(ip));\n}\nclass ZodString extends ZodType {\n  _parse(input) {\n    if (this._def.coerce && (input.data = String(input.data)), this._getType(input) !== ZodParsedType.string) {\n      const ctx2 = this._getOrReturnCtx(input);\n      return addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.string,\n        received: ctx2.parsedType\n      }), INVALID;\n    }\n    const status = new ParseStatus();\n    let ctx;\n    for (const check of this._def.checks)\n      if (check.kind === \"min\")\n        input.data.length < check.value && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n          code: ZodIssueCode.too_small,\n          minimum: check.value,\n          type: \"string\",\n          inclusive: !0,\n          exact: !1,\n          message: check.message\n        }), status.dirty());\n      else if (check.kind === \"max\")\n        input.data.length > check.value && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n          code: ZodIssueCode.too_big,\n          maximum: check.value,\n          type: \"string\",\n          inclusive: !0,\n          exact: !1,\n          message: check.message\n        }), status.dirty());\n      else if (check.kind === \"length\") {\n        const tooBig = input.data.length > check.value, tooSmall = input.data.length < check.value;\n        (tooBig || tooSmall) && (ctx = this._getOrReturnCtx(input, ctx), tooBig ? addIssueToContext(ctx, {\n          code: ZodIssueCode.too_big,\n          maximum: check.value,\n          type: \"string\",\n          inclusive: !0,\n          exact: !0,\n          message: check.message\n        }) : tooSmall && addIssueToContext(ctx, {\n          code: ZodIssueCode.too_small,\n          minimum: check.value,\n          type: \"string\",\n          inclusive: !0,\n          exact: !0,\n          message: check.message\n        }), status.dirty());\n      } else if (check.kind === \"email\")\n        emailRegex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n          validation: \"email\",\n          code: ZodIssueCode.invalid_string,\n          message: check.message\n        }), status.dirty());\n      else if (check.kind === \"emoji\")\n        emojiRegex || (emojiRegex = new RegExp(_emojiRegex, \"u\")), emojiRegex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n          validation: \"emoji\",\n          code: ZodIssueCode.invalid_string,\n          message: check.message\n        }), status.dirty());\n      else if (check.kind === \"uuid\")\n        uuidRegex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n          validation: \"uuid\",\n          code: ZodIssueCode.invalid_string,\n          message: check.message\n        }), status.dirty());\n      else if (check.kind === \"nanoid\")\n        nanoidRegex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n          validation: \"nanoid\",\n          code: ZodIssueCode.invalid_string,\n          message: check.message\n        }), status.dirty());\n      else if (check.kind === \"cuid\")\n        cuidRegex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n          validation: \"cuid\",\n          code: ZodIssueCode.invalid_string,\n          message: check.message\n        }), status.dirty());\n      else if (check.kind === \"cuid2\")\n        cuid2Regex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n          validation: \"cuid2\",\n          code: ZodIssueCode.invalid_string,\n          message: check.message\n        }), status.dirty());\n      else if (check.kind === \"ulid\")\n        ulidRegex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n          validation: \"ulid\",\n          code: ZodIssueCode.invalid_string,\n          message: check.message\n        }), status.dirty());\n      else if (check.kind === \"url\")\n        try {\n          new URL(input.data);\n        } catch {\n          ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n            validation: \"url\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          }), status.dirty();\n        }\n      else check.kind === \"regex\" ? (check.regex.lastIndex = 0, check.regex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        validation: \"regex\",\n        code: ZodIssueCode.invalid_string,\n        message: check.message\n      }), status.dirty())) : check.kind === \"trim\" ? input.data = input.data.trim() : check.kind === \"includes\" ? input.data.includes(check.value, check.position) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_string,\n        validation: { includes: check.value, position: check.position },\n        message: check.message\n      }), status.dirty()) : check.kind === \"toLowerCase\" ? input.data = input.data.toLowerCase() : check.kind === \"toUpperCase\" ? input.data = input.data.toUpperCase() : check.kind === \"startsWith\" ? input.data.startsWith(check.value) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_string,\n        validation: { startsWith: check.value },\n        message: check.message\n      }), status.dirty()) : check.kind === \"endsWith\" ? input.data.endsWith(check.value) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_string,\n        validation: { endsWith: check.value },\n        message: check.message\n      }), status.dirty()) : check.kind === \"datetime\" ? datetimeRegex(check).test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_string,\n        validation: \"datetime\",\n        message: check.message\n      }), status.dirty()) : check.kind === \"date\" ? dateRegex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_string,\n        validation: \"date\",\n        message: check.message\n      }), status.dirty()) : check.kind === \"time\" ? timeRegex(check).test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_string,\n        validation: \"time\",\n        message: check.message\n      }), status.dirty()) : check.kind === \"duration\" ? durationRegex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        validation: \"duration\",\n        code: ZodIssueCode.invalid_string,\n        message: check.message\n      }), status.dirty()) : check.kind === \"ip\" ? isValidIP(input.data, check.version) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        validation: \"ip\",\n        code: ZodIssueCode.invalid_string,\n        message: check.message\n      }), status.dirty()) : check.kind === \"jwt\" ? isValidJWT(input.data, check.alg) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        validation: \"jwt\",\n        code: ZodIssueCode.invalid_string,\n        message: check.message\n      }), status.dirty()) : check.kind === \"cidr\" ? isValidCidr(input.data, check.version) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        validation: \"cidr\",\n        code: ZodIssueCode.invalid_string,\n        message: check.message\n      }), status.dirty()) : check.kind === \"base64\" ? base64Regex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        validation: \"base64\",\n        code: ZodIssueCode.invalid_string,\n        message: check.message\n      }), status.dirty()) : check.kind === \"base64url\" ? base64urlRegex.test(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        validation: \"base64url\",\n        code: ZodIssueCode.invalid_string,\n        message: check.message\n      }), status.dirty()) : util.assertNever(check);\n    return { status: status.value, value: input.data };\n  }\n  _regex(regex, validation, message) {\n    return this.refinement((data) => regex.test(data), {\n      validation,\n      code: ZodIssueCode.invalid_string,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  _addCheck(check) {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  email(message) {\n    return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n  }\n  url(message) {\n    return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n  }\n  emoji(message) {\n    return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n  }\n  uuid(message) {\n    return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n  }\n  nanoid(message) {\n    return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n  }\n  cuid(message) {\n    return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n  }\n  cuid2(message) {\n    return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n  }\n  ulid(message) {\n    return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n  }\n  base64(message) {\n    return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n  }\n  base64url(message) {\n    return this._addCheck({\n      kind: \"base64url\",\n      ...errorUtil.errToObj(message)\n    });\n  }\n  jwt(options) {\n    return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n  }\n  ip(options) {\n    return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n  }\n  cidr(options) {\n    return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n  }\n  datetime(options) {\n    return typeof options == \"string\" ? this._addCheck({\n      kind: \"datetime\",\n      precision: null,\n      offset: !1,\n      local: !1,\n      message: options\n    }) : this._addCheck({\n      kind: \"datetime\",\n      precision: typeof (options == null ? void 0 : options.precision) > \"u\" ? null : options == null ? void 0 : options.precision,\n      offset: (options == null ? void 0 : options.offset) ?? !1,\n      local: (options == null ? void 0 : options.local) ?? !1,\n      ...errorUtil.errToObj(options == null ? void 0 : options.message)\n    });\n  }\n  date(message) {\n    return this._addCheck({ kind: \"date\", message });\n  }\n  time(options) {\n    return typeof options == \"string\" ? this._addCheck({\n      kind: \"time\",\n      precision: null,\n      message: options\n    }) : this._addCheck({\n      kind: \"time\",\n      precision: typeof (options == null ? void 0 : options.precision) > \"u\" ? null : options == null ? void 0 : options.precision,\n      ...errorUtil.errToObj(options == null ? void 0 : options.message)\n    });\n  }\n  duration(message) {\n    return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n  }\n  regex(regex, message) {\n    return this._addCheck({\n      kind: \"regex\",\n      regex,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  includes(value, options) {\n    return this._addCheck({\n      kind: \"includes\",\n      value,\n      position: options == null ? void 0 : options.position,\n      ...errorUtil.errToObj(options == null ? void 0 : options.message)\n    });\n  }\n  startsWith(value, message) {\n    return this._addCheck({\n      kind: \"startsWith\",\n      value,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  endsWith(value, message) {\n    return this._addCheck({\n      kind: \"endsWith\",\n      value,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  min(minLength, message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: minLength,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  max(maxLength, message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: maxLength,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  length(len, message) {\n    return this._addCheck({\n      kind: \"length\",\n      value: len,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  /**\n   * Equivalent to \\`.min(1)\\`\n   */\n  nonempty(message) {\n    return this.min(1, errorUtil.errToObj(message));\n  }\n  trim() {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"trim\" }]\n    });\n  }\n  toLowerCase() {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"toLowerCase\" }]\n    });\n  }\n  toUpperCase() {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"toUpperCase\" }]\n    });\n  }\n  get isDatetime() {\n    return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n  }\n  get isDate() {\n    return !!this._def.checks.find((ch) => ch.kind === \"date\");\n  }\n  get isTime() {\n    return !!this._def.checks.find((ch) => ch.kind === \"time\");\n  }\n  get isDuration() {\n    return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n  }\n  get isEmail() {\n    return !!this._def.checks.find((ch) => ch.kind === \"email\");\n  }\n  get isURL() {\n    return !!this._def.checks.find((ch) => ch.kind === \"url\");\n  }\n  get isEmoji() {\n    return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n  }\n  get isUUID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n  }\n  get isNANOID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n  }\n  get isCUID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n  }\n  get isCUID2() {\n    return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n  }\n  get isULID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n  }\n  get isIP() {\n    return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n  }\n  get isCIDR() {\n    return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n  }\n  get isBase64() {\n    return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n  }\n  get isBase64url() {\n    return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n  }\n  get minLength() {\n    let min = null;\n    for (const ch of this._def.checks)\n      ch.kind === \"min\" && (min === null || ch.value > min) && (min = ch.value);\n    return min;\n  }\n  get maxLength() {\n    let max = null;\n    for (const ch of this._def.checks)\n      ch.kind === \"max\" && (max === null || ch.value < max) && (max = ch.value);\n    return max;\n  }\n}\nZodString.create = (params) => new ZodString({\n  checks: [],\n  typeName: ZodFirstPartyTypeKind.ZodString,\n  coerce: (params == null ? void 0 : params.coerce) ?? !1,\n  ...processCreateParams(params)\n});\nfunction floatSafeRemainder(val, step) {\n  const valDecCount = (val.toString().split(\".\")[1] || \"\").length, stepDecCount = (step.toString().split(\".\")[1] || \"\").length, decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount, valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\")), stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n  return valInt % stepInt / 10 ** decCount;\n}\nclass ZodNumber extends ZodType {\n  constructor() {\n    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;\n  }\n  _parse(input) {\n    if (this._def.coerce && (input.data = Number(input.data)), this._getType(input) !== ZodParsedType.number) {\n      const ctx2 = this._getOrReturnCtx(input);\n      return addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.number,\n        received: ctx2.parsedType\n      }), INVALID;\n    }\n    let ctx;\n    const status = new ParseStatus();\n    for (const check of this._def.checks)\n      check.kind === \"int\" ? util.isInteger(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: \"integer\",\n        received: \"float\",\n        message: check.message\n      }), status.dirty()) : check.kind === \"min\" ? (check.inclusive ? input.data < check.value : input.data <= check.value) && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.too_small,\n        minimum: check.value,\n        type: \"number\",\n        inclusive: check.inclusive,\n        exact: !1,\n        message: check.message\n      }), status.dirty()) : check.kind === \"max\" ? (check.inclusive ? input.data > check.value : input.data >= check.value) && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.too_big,\n        maximum: check.value,\n        type: \"number\",\n        inclusive: check.inclusive,\n        exact: !1,\n        message: check.message\n      }), status.dirty()) : check.kind === \"multipleOf\" ? floatSafeRemainder(input.data, check.value) !== 0 && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.not_multiple_of,\n        multipleOf: check.value,\n        message: check.message\n      }), status.dirty()) : check.kind === \"finite\" ? Number.isFinite(input.data) || (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.not_finite,\n        message: check.message\n      }), status.dirty()) : util.assertNever(check);\n    return { status: status.value, value: input.data };\n  }\n  gte(value, message) {\n    return this.setLimit(\"min\", value, !0, errorUtil.toString(message));\n  }\n  gt(value, message) {\n    return this.setLimit(\"min\", value, !1, errorUtil.toString(message));\n  }\n  lte(value, message) {\n    return this.setLimit(\"max\", value, !0, errorUtil.toString(message));\n  }\n  lt(value, message) {\n    return this.setLimit(\"max\", value, !1, errorUtil.toString(message));\n  }\n  setLimit(kind, value, inclusive, message) {\n    return new ZodNumber({\n      ...this._def,\n      checks: [\n        ...this._def.checks,\n        {\n          kind,\n          value,\n          inclusive,\n          message: errorUtil.toString(message)\n        }\n      ]\n    });\n  }\n  _addCheck(check) {\n    return new ZodNumber({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  int(message) {\n    return this._addCheck({\n      kind: \"int\",\n      message: errorUtil.toString(message)\n    });\n  }\n  positive(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: 0,\n      inclusive: !1,\n      message: errorUtil.toString(message)\n    });\n  }\n  negative(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: 0,\n      inclusive: !1,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonpositive(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: 0,\n      inclusive: !0,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonnegative(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: 0,\n      inclusive: !0,\n      message: errorUtil.toString(message)\n    });\n  }\n  multipleOf(value, message) {\n    return this._addCheck({\n      kind: \"multipleOf\",\n      value,\n      message: errorUtil.toString(message)\n    });\n  }\n  finite(message) {\n    return this._addCheck({\n      kind: \"finite\",\n      message: errorUtil.toString(message)\n    });\n  }\n  safe(message) {\n    return this._addCheck({\n      kind: \"min\",\n      inclusive: !0,\n      value: Number.MIN_SAFE_INTEGER,\n      message: errorUtil.toString(message)\n    })._addCheck({\n      kind: \"max\",\n      inclusive: !0,\n      value: Number.MAX_SAFE_INTEGER,\n      message: errorUtil.toString(message)\n    });\n  }\n  get minValue() {\n    let min = null;\n    for (const ch of this._def.checks)\n      ch.kind === \"min\" && (min === null || ch.value > min) && (min = ch.value);\n    return min;\n  }\n  get maxValue() {\n    let max = null;\n    for (const ch of this._def.checks)\n      ch.kind === \"max\" && (max === null || ch.value < max) && (max = ch.value);\n    return max;\n  }\n  get isInt() {\n    return !!this._def.checks.find((ch) => ch.kind === \"int\" || ch.kind === \"multipleOf\" && util.isInteger(ch.value));\n  }\n  get isFinite() {\n    let max = null, min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\")\n        return !0;\n      ch.kind === \"min\" ? (min === null || ch.value > min) && (min = ch.value) : ch.kind === \"max\" && (max === null || ch.value < max) && (max = ch.value);\n    }\n    return Number.isFinite(min) && Number.isFinite(max);\n  }\n}\nZodNumber.create = (params) => new ZodNumber({\n  checks: [],\n  typeName: ZodFirstPartyTypeKind.ZodNumber,\n  coerce: (params == null ? void 0 : params.coerce) || !1,\n  ...processCreateParams(params)\n});\nclass ZodBigInt extends ZodType {\n  constructor() {\n    super(...arguments), this.min = this.gte, this.max = this.lte;\n  }\n  _parse(input) {\n    if (this._def.coerce)\n      try {\n        input.data = BigInt(input.data);\n      } catch {\n        return this._getInvalidInput(input);\n      }\n    if (this._getType(input) !== ZodParsedType.bigint)\n      return this._getInvalidInput(input);\n    let ctx;\n    const status = new ParseStatus();\n    for (const check of this._def.checks)\n      check.kind === \"min\" ? (check.inclusive ? input.data < check.value : input.data <= check.value) && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.too_small,\n        type: \"bigint\",\n        minimum: check.value,\n        inclusive: check.inclusive,\n        message: check.message\n      }), status.dirty()) : check.kind === \"max\" ? (check.inclusive ? input.data > check.value : input.data >= check.value) && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.too_big,\n        type: \"bigint\",\n        maximum: check.value,\n        inclusive: check.inclusive,\n        message: check.message\n      }), status.dirty()) : check.kind === \"multipleOf\" ? input.data % check.value !== BigInt(0) && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.not_multiple_of,\n        multipleOf: check.value,\n        message: check.message\n      }), status.dirty()) : util.assertNever(check);\n    return { status: status.value, value: input.data };\n  }\n  _getInvalidInput(input) {\n    const ctx = this._getOrReturnCtx(input);\n    return addIssueToContext(ctx, {\n      code: ZodIssueCode.invalid_type,\n      expected: ZodParsedType.bigint,\n      received: ctx.parsedType\n    }), INVALID;\n  }\n  gte(value, message) {\n    return this.setLimit(\"min\", value, !0, errorUtil.toString(message));\n  }\n  gt(value, message) {\n    return this.setLimit(\"min\", value, !1, errorUtil.toString(message));\n  }\n  lte(value, message) {\n    return this.setLimit(\"max\", value, !0, errorUtil.toString(message));\n  }\n  lt(value, message) {\n    return this.setLimit(\"max\", value, !1, errorUtil.toString(message));\n  }\n  setLimit(kind, value, inclusive, message) {\n    return new ZodBigInt({\n      ...this._def,\n      checks: [\n        ...this._def.checks,\n        {\n          kind,\n          value,\n          inclusive,\n          message: errorUtil.toString(message)\n        }\n      ]\n    });\n  }\n  _addCheck(check) {\n    return new ZodBigInt({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  positive(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: BigInt(0),\n      inclusive: !1,\n      message: errorUtil.toString(message)\n    });\n  }\n  negative(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: BigInt(0),\n      inclusive: !1,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonpositive(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: BigInt(0),\n      inclusive: !0,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonnegative(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: BigInt(0),\n      inclusive: !0,\n      message: errorUtil.toString(message)\n    });\n  }\n  multipleOf(value, message) {\n    return this._addCheck({\n      kind: \"multipleOf\",\n      value,\n      message: errorUtil.toString(message)\n    });\n  }\n  get minValue() {\n    let min = null;\n    for (const ch of this._def.checks)\n      ch.kind === \"min\" && (min === null || ch.value > min) && (min = ch.value);\n    return min;\n  }\n  get maxValue() {\n    let max = null;\n    for (const ch of this._def.checks)\n      ch.kind === \"max\" && (max === null || ch.value < max) && (max = ch.value);\n    return max;\n  }\n}\nZodBigInt.create = (params) => new ZodBigInt({\n  checks: [],\n  typeName: ZodFirstPartyTypeKind.ZodBigInt,\n  coerce: (params == null ? void 0 : params.coerce) ?? !1,\n  ...processCreateParams(params)\n});\nclass ZodBoolean extends ZodType {\n  _parse(input) {\n    if (this._def.coerce && (input.data = !!input.data), this._getType(input) !== ZodParsedType.boolean) {\n      const ctx = this._getOrReturnCtx(input);\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.boolean,\n        received: ctx.parsedType\n      }), INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodBoolean.create = (params) => new ZodBoolean({\n  typeName: ZodFirstPartyTypeKind.ZodBoolean,\n  coerce: (params == null ? void 0 : params.coerce) || !1,\n  ...processCreateParams(params)\n});\nclass ZodDate extends ZodType {\n  _parse(input) {\n    if (this._def.coerce && (input.data = new Date(input.data)), this._getType(input) !== ZodParsedType.date) {\n      const ctx2 = this._getOrReturnCtx(input);\n      return addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.date,\n        received: ctx2.parsedType\n      }), INVALID;\n    }\n    if (Number.isNaN(input.data.getTime())) {\n      const ctx2 = this._getOrReturnCtx(input);\n      return addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_date\n      }), INVALID;\n    }\n    const status = new ParseStatus();\n    let ctx;\n    for (const check of this._def.checks)\n      check.kind === \"min\" ? input.data.getTime() < check.value && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.too_small,\n        message: check.message,\n        inclusive: !0,\n        exact: !1,\n        minimum: check.value,\n        type: \"date\"\n      }), status.dirty()) : check.kind === \"max\" ? input.data.getTime() > check.value && (ctx = this._getOrReturnCtx(input, ctx), addIssueToContext(ctx, {\n        code: ZodIssueCode.too_big,\n        message: check.message,\n        inclusive: !0,\n        exact: !1,\n        maximum: check.value,\n        type: \"date\"\n      }), status.dirty()) : util.assertNever(check);\n    return {\n      status: status.value,\n      value: new Date(input.data.getTime())\n    };\n  }\n  _addCheck(check) {\n    return new ZodDate({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  min(minDate, message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: minDate.getTime(),\n      message: errorUtil.toString(message)\n    });\n  }\n  max(maxDate, message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: maxDate.getTime(),\n      message: errorUtil.toString(message)\n    });\n  }\n  get minDate() {\n    let min = null;\n    for (const ch of this._def.checks)\n      ch.kind === \"min\" && (min === null || ch.value > min) && (min = ch.value);\n    return min != null ? new Date(min) : null;\n  }\n  get maxDate() {\n    let max = null;\n    for (const ch of this._def.checks)\n      ch.kind === \"max\" && (max === null || ch.value < max) && (max = ch.value);\n    return max != null ? new Date(max) : null;\n  }\n}\nZodDate.create = (params) => new ZodDate({\n  checks: [],\n  coerce: (params == null ? void 0 : params.coerce) || !1,\n  typeName: ZodFirstPartyTypeKind.ZodDate,\n  ...processCreateParams(params)\n});\nclass ZodSymbol extends ZodType {\n  _parse(input) {\n    if (this._getType(input) !== ZodParsedType.symbol) {\n      const ctx = this._getOrReturnCtx(input);\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.symbol,\n        received: ctx.parsedType\n      }), INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodSymbol.create = (params) => new ZodSymbol({\n  typeName: ZodFirstPartyTypeKind.ZodSymbol,\n  ...processCreateParams(params)\n});\nclass ZodUndefined extends ZodType {\n  _parse(input) {\n    if (this._getType(input) !== ZodParsedType.undefined) {\n      const ctx = this._getOrReturnCtx(input);\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.undefined,\n        received: ctx.parsedType\n      }), INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodUndefined.create = (params) => new ZodUndefined({\n  typeName: ZodFirstPartyTypeKind.ZodUndefined,\n  ...processCreateParams(params)\n});\nclass ZodNull extends ZodType {\n  _parse(input) {\n    if (this._getType(input) !== ZodParsedType.null) {\n      const ctx = this._getOrReturnCtx(input);\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.null,\n        received: ctx.parsedType\n      }), INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodNull.create = (params) => new ZodNull({\n  typeName: ZodFirstPartyTypeKind.ZodNull,\n  ...processCreateParams(params)\n});\nclass ZodAny extends ZodType {\n  constructor() {\n    super(...arguments), this._any = !0;\n  }\n  _parse(input) {\n    return OK(input.data);\n  }\n}\nZodAny.create = (params) => new ZodAny({\n  typeName: ZodFirstPartyTypeKind.ZodAny,\n  ...processCreateParams(params)\n});\nclass ZodUnknown extends ZodType {\n  constructor() {\n    super(...arguments), this._unknown = !0;\n  }\n  _parse(input) {\n    return OK(input.data);\n  }\n}\nZodUnknown.create = (params) => new ZodUnknown({\n  typeName: ZodFirstPartyTypeKind.ZodUnknown,\n  ...processCreateParams(params)\n});\nclass ZodNever extends ZodType {\n  _parse(input) {\n    const ctx = this._getOrReturnCtx(input);\n    return addIssueToContext(ctx, {\n      code: ZodIssueCode.invalid_type,\n      expected: ZodParsedType.never,\n      received: ctx.parsedType\n    }), INVALID;\n  }\n}\nZodNever.create = (params) => new ZodNever({\n  typeName: ZodFirstPartyTypeKind.ZodNever,\n  ...processCreateParams(params)\n});\nclass ZodVoid extends ZodType {\n  _parse(input) {\n    if (this._getType(input) !== ZodParsedType.undefined) {\n      const ctx = this._getOrReturnCtx(input);\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.void,\n        received: ctx.parsedType\n      }), INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodVoid.create = (params) => new ZodVoid({\n  typeName: ZodFirstPartyTypeKind.ZodVoid,\n  ...processCreateParams(params)\n});\nclass ZodArray extends ZodType {\n  _parse(input) {\n    const { ctx, status } = this._processInputParams(input), def = this._def;\n    if (ctx.parsedType !== ZodParsedType.array)\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.array,\n        received: ctx.parsedType\n      }), INVALID;\n    if (def.exactLength !== null) {\n      const tooBig = ctx.data.length > def.exactLength.value, tooSmall = ctx.data.length < def.exactLength.value;\n      (tooBig || tooSmall) && (addIssueToContext(ctx, {\n        code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n        minimum: tooSmall ? def.exactLength.value : void 0,\n        maximum: tooBig ? def.exactLength.value : void 0,\n        type: \"array\",\n        inclusive: !0,\n        exact: !0,\n        message: def.exactLength.message\n      }), status.dirty());\n    }\n    if (def.minLength !== null && ctx.data.length < def.minLength.value && (addIssueToContext(ctx, {\n      code: ZodIssueCode.too_small,\n      minimum: def.minLength.value,\n      type: \"array\",\n      inclusive: !0,\n      exact: !1,\n      message: def.minLength.message\n    }), status.dirty()), def.maxLength !== null && ctx.data.length > def.maxLength.value && (addIssueToContext(ctx, {\n      code: ZodIssueCode.too_big,\n      maximum: def.maxLength.value,\n      type: \"array\",\n      inclusive: !0,\n      exact: !1,\n      message: def.maxLength.message\n    }), status.dirty()), ctx.common.async)\n      return Promise.all([...ctx.data].map((item, i) => def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i)))).then((result2) => ParseStatus.mergeArray(status, result2));\n    const result = [...ctx.data].map((item, i) => def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n    return ParseStatus.mergeArray(status, result);\n  }\n  get element() {\n    return this._def.type;\n  }\n  min(minLength, message) {\n    return new ZodArray({\n      ...this._def,\n      minLength: { value: minLength, message: errorUtil.toString(message) }\n    });\n  }\n  max(maxLength, message) {\n    return new ZodArray({\n      ...this._def,\n      maxLength: { value: maxLength, message: errorUtil.toString(message) }\n    });\n  }\n  length(len, message) {\n    return new ZodArray({\n      ...this._def,\n      exactLength: { value: len, message: errorUtil.toString(message) }\n    });\n  }\n  nonempty(message) {\n    return this.min(1, message);\n  }\n}\nZodArray.create = (schema, params) => new ZodArray({\n  type: schema,\n  minLength: null,\n  maxLength: null,\n  exactLength: null,\n  typeName: ZodFirstPartyTypeKind.ZodArray,\n  ...processCreateParams(params)\n});\nfunction deepPartialify(schema) {\n  if (schema instanceof ZodObject) {\n    const newShape = {};\n    for (const key in schema.shape) {\n      const fieldSchema = schema.shape[key];\n      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n    }\n    return new ZodObject({\n      ...schema._def,\n      shape: () => newShape\n    });\n  } else return schema instanceof ZodArray ? new ZodArray({\n    ...schema._def,\n    type: deepPartialify(schema.element)\n  }) : schema instanceof ZodOptional ? ZodOptional.create(deepPartialify(schema.unwrap())) : schema instanceof ZodNullable ? ZodNullable.create(deepPartialify(schema.unwrap())) : schema instanceof ZodTuple ? ZodTuple.create(schema.items.map((item) => deepPartialify(item))) : schema;\n}\nclass ZodObject extends ZodType {\n  constructor() {\n    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;\n  }\n  _getCached() {\n    if (this._cached !== null)\n      return this._cached;\n    const shape = this._def.shape(), keys = util.objectKeys(shape);\n    return this._cached = { shape, keys }, this._cached;\n  }\n  _parse(input) {\n    if (this._getType(input) !== ZodParsedType.object) {\n      const ctx2 = this._getOrReturnCtx(input);\n      return addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.object,\n        received: ctx2.parsedType\n      }), INVALID;\n    }\n    const { status, ctx } = this._processInputParams(input), { shape, keys: shapeKeys } = this._getCached(), extraKeys = [];\n    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\"))\n      for (const key in ctx.data)\n        shapeKeys.includes(key) || extraKeys.push(key);\n    const pairs = [];\n    for (const key of shapeKeys) {\n      const keyValidator = shape[key], value = ctx.data[key];\n      pairs.push({\n        key: { status: \"valid\", value: key },\n        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n        alwaysSet: key in ctx.data\n      });\n    }\n    if (this._def.catchall instanceof ZodNever) {\n      const unknownKeys = this._def.unknownKeys;\n      if (unknownKeys === \"passthrough\")\n        for (const key of extraKeys)\n          pairs.push({\n            key: { status: \"valid\", value: key },\n            value: { status: \"valid\", value: ctx.data[key] }\n          });\n      else if (unknownKeys === \"strict\")\n        extraKeys.length > 0 && (addIssueToContext(ctx, {\n          code: ZodIssueCode.unrecognized_keys,\n          keys: extraKeys\n        }), status.dirty());\n      else if (unknownKeys !== \"strip\") throw new Error(\"Internal ZodObject error: invalid unknownKeys value.\");\n    } else {\n      const catchall = this._def.catchall;\n      for (const key of extraKeys) {\n        const value = ctx.data[key];\n        pairs.push({\n          key: { status: \"valid\", value: key },\n          value: catchall._parse(\n            new ParseInputLazyPath(ctx, value, ctx.path, key)\n            //, ctx.child(key), value, getParsedType(value)\n          ),\n          alwaysSet: key in ctx.data\n        });\n      }\n    }\n    return ctx.common.async ? Promise.resolve().then(async () => {\n      const syncPairs = [];\n      for (const pair of pairs) {\n        const key = await pair.key, value = await pair.value;\n        syncPairs.push({\n          key,\n          value,\n          alwaysSet: pair.alwaysSet\n        });\n      }\n      return syncPairs;\n    }).then((syncPairs) => ParseStatus.mergeObjectSync(status, syncPairs)) : ParseStatus.mergeObjectSync(status, pairs);\n  }\n  get shape() {\n    return this._def.shape();\n  }\n  strict(message) {\n    return errorUtil.errToObj, new ZodObject({\n      ...this._def,\n      unknownKeys: \"strict\",\n      ...message !== void 0 ? {\n        errorMap: (issue, ctx) => {\n          var _a, _b;\n          const defaultError = ((_b = (_a = this._def).errorMap) == null ? void 0 : _b.call(_a, issue, ctx).message) ?? ctx.defaultError;\n          return issue.code === \"unrecognized_keys\" ? {\n            message: errorUtil.errToObj(message).message ?? defaultError\n          } : {\n            message: defaultError\n          };\n        }\n      } : {}\n    });\n  }\n  strip() {\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"strip\"\n    });\n  }\n  passthrough() {\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"passthrough\"\n    });\n  }\n  // const AugmentFactory =\n  //   <Def extends ZodObjectDef>(def: Def) =>\n  //   <Augmentation extends ZodRawShape>(\n  //     augmentation: Augmentation\n  //   ): ZodObject<\n  //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n  //     Def[\"unknownKeys\"],\n  //     Def[\"catchall\"]\n  //   > => {\n  //     return new ZodObject({\n  //       ...def,\n  //       shape: () => ({\n  //         ...def.shape(),\n  //         ...augmentation,\n  //       }),\n  //     }) as any;\n  //   };\n  extend(augmentation) {\n    return new ZodObject({\n      ...this._def,\n      shape: () => ({\n        ...this._def.shape(),\n        ...augmentation\n      })\n    });\n  }\n  /**\n   * Prior to zod@1.0.12 there was a bug in the\n   * inferred type of merged objects. Please\n   * upgrade if you are experiencing issues.\n   */\n  merge(merging) {\n    return new ZodObject({\n      unknownKeys: merging._def.unknownKeys,\n      catchall: merging._def.catchall,\n      shape: () => ({\n        ...this._def.shape(),\n        ...merging._def.shape()\n      }),\n      typeName: ZodFirstPartyTypeKind.ZodObject\n    });\n  }\n  // merge<\n  //   Incoming extends AnyZodObject,\n  //   Augmentation extends Incoming[\"shape\"],\n  //   NewOutput extends {\n  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n  //       ? Augmentation[k][\"_output\"]\n  //       : k extends keyof Output\n  //       ? Output[k]\n  //       : never;\n  //   },\n  //   NewInput extends {\n  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n  //       ? Augmentation[k][\"_input\"]\n  //       : k extends keyof Input\n  //       ? Input[k]\n  //       : never;\n  //   }\n  // >(\n  //   merging: Incoming\n  // ): ZodObject<\n  //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n  //   Incoming[\"_def\"][\"unknownKeys\"],\n  //   Incoming[\"_def\"][\"catchall\"],\n  //   NewOutput,\n  //   NewInput\n  // > {\n  //   const merged: any = new ZodObject({\n  //     unknownKeys: merging._def.unknownKeys,\n  //     catchall: merging._def.catchall,\n  //     shape: () =>\n  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n  //     typeName: ZodFirstPartyTypeKind.ZodObject,\n  //   }) as any;\n  //   return merged;\n  // }\n  setKey(key, schema) {\n    return this.augment({ [key]: schema });\n  }\n  // merge<Incoming extends AnyZodObject>(\n  //   merging: Incoming\n  // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n  // ZodObject<\n  //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n  //   Incoming[\"_def\"][\"unknownKeys\"],\n  //   Incoming[\"_def\"][\"catchall\"]\n  // > {\n  //   // const mergedShape = objectUtil.mergeShapes(\n  //   //   this._def.shape(),\n  //   //   merging._def.shape()\n  //   // );\n  //   const merged: any = new ZodObject({\n  //     unknownKeys: merging._def.unknownKeys,\n  //     catchall: merging._def.catchall,\n  //     shape: () =>\n  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n  //     typeName: ZodFirstPartyTypeKind.ZodObject,\n  //   }) as any;\n  //   return merged;\n  // }\n  catchall(index) {\n    return new ZodObject({\n      ...this._def,\n      catchall: index\n    });\n  }\n  pick(mask) {\n    const shape = {};\n    for (const key of util.objectKeys(mask))\n      mask[key] && this.shape[key] && (shape[key] = this.shape[key]);\n    return new ZodObject({\n      ...this._def,\n      shape: () => shape\n    });\n  }\n  omit(mask) {\n    const shape = {};\n    for (const key of util.objectKeys(this.shape))\n      mask[key] || (shape[key] = this.shape[key]);\n    return new ZodObject({\n      ...this._def,\n      shape: () => shape\n    });\n  }\n  /**\n   * @deprecated\n   */\n  deepPartial() {\n    return deepPartialify(this);\n  }\n  partial(mask) {\n    const newShape = {};\n    for (const key of util.objectKeys(this.shape)) {\n      const fieldSchema = this.shape[key];\n      mask && !mask[key] ? newShape[key] = fieldSchema : newShape[key] = fieldSchema.optional();\n    }\n    return new ZodObject({\n      ...this._def,\n      shape: () => newShape\n    });\n  }\n  required(mask) {\n    const newShape = {};\n    for (const key of util.objectKeys(this.shape))\n      if (mask && !mask[key])\n        newShape[key] = this.shape[key];\n      else {\n        let newField = this.shape[key];\n        for (; newField instanceof ZodOptional; )\n          newField = newField._def.innerType;\n        newShape[key] = newField;\n      }\n    return new ZodObject({\n      ...this._def,\n      shape: () => newShape\n    });\n  }\n  keyof() {\n    return createZodEnum(util.objectKeys(this.shape));\n  }\n}\nZodObject.create = (shape, params) => new ZodObject({\n  shape: () => shape,\n  unknownKeys: \"strip\",\n  catchall: ZodNever.create(),\n  typeName: ZodFirstPartyTypeKind.ZodObject,\n  ...processCreateParams(params)\n});\nZodObject.strictCreate = (shape, params) => new ZodObject({\n  shape: () => shape,\n  unknownKeys: \"strict\",\n  catchall: ZodNever.create(),\n  typeName: ZodFirstPartyTypeKind.ZodObject,\n  ...processCreateParams(params)\n});\nZodObject.lazycreate = (shape, params) => new ZodObject({\n  shape,\n  unknownKeys: \"strip\",\n  catchall: ZodNever.create(),\n  typeName: ZodFirstPartyTypeKind.ZodObject,\n  ...processCreateParams(params)\n});\nclass ZodUnion extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input), options = this._def.options;\n    function handleResults(results) {\n      for (const result of results)\n        if (result.result.status === \"valid\")\n          return result.result;\n      for (const result of results)\n        if (result.result.status === \"dirty\")\n          return ctx.common.issues.push(...result.ctx.common.issues), result.result;\n      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union,\n        unionErrors\n      }), INVALID;\n    }\n    if (ctx.common.async)\n      return Promise.all(options.map(async (option) => {\n        const childCtx = {\n          ...ctx,\n          common: {\n            ...ctx.common,\n            issues: []\n          },\n          parent: null\n        };\n        return {\n          result: await option._parseAsync({\n            data: ctx.data,\n            path: ctx.path,\n            parent: childCtx\n          }),\n          ctx: childCtx\n        };\n      })).then(handleResults);\n    {\n      let dirty;\n      const issues = [];\n      for (const option of options) {\n        const childCtx = {\n          ...ctx,\n          common: {\n            ...ctx.common,\n            issues: []\n          },\n          parent: null\n        }, result = option._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: childCtx\n        });\n        if (result.status === \"valid\")\n          return result;\n        result.status === \"dirty\" && !dirty && (dirty = { result, ctx: childCtx }), childCtx.common.issues.length && issues.push(childCtx.common.issues);\n      }\n      if (dirty)\n        return ctx.common.issues.push(...dirty.ctx.common.issues), dirty.result;\n      const unionErrors = issues.map((issues2) => new ZodError(issues2));\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union,\n        unionErrors\n      }), INVALID;\n    }\n  }\n  get options() {\n    return this._def.options;\n  }\n}\nZodUnion.create = (types, params) => new ZodUnion({\n  options: types,\n  typeName: ZodFirstPartyTypeKind.ZodUnion,\n  ...processCreateParams(params)\n});\nfunction mergeValues(a, b) {\n  const aType = getParsedType(a), bType = getParsedType(b);\n  if (a === b)\n    return { valid: !0, data: a };\n  if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n    const bKeys = util.objectKeys(b), sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1), newObj = { ...a, ...b };\n    for (const key of sharedKeys) {\n      const sharedValue = mergeValues(a[key], b[key]);\n      if (!sharedValue.valid)\n        return { valid: !1 };\n      newObj[key] = sharedValue.data;\n    }\n    return { valid: !0, data: newObj };\n  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n    if (a.length !== b.length)\n      return { valid: !1 };\n    const newArray = [];\n    for (let index = 0; index < a.length; index++) {\n      const itemA = a[index], itemB = b[index], sharedValue = mergeValues(itemA, itemB);\n      if (!sharedValue.valid)\n        return { valid: !1 };\n      newArray.push(sharedValue.data);\n    }\n    return { valid: !0, data: newArray };\n  } else return aType === ZodParsedType.date && bType === ZodParsedType.date && +a == +b ? { valid: !0, data: a } : { valid: !1 };\n}\nclass ZodIntersection extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input), handleParsed = (parsedLeft, parsedRight) => {\n      if (isAborted(parsedLeft) || isAborted(parsedRight))\n        return INVALID;\n      const merged = mergeValues(parsedLeft.value, parsedRight.value);\n      return merged.valid ? ((isDirty(parsedLeft) || isDirty(parsedRight)) && status.dirty(), { status: status.value, value: merged.data }) : (addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_intersection_types\n      }), INVALID);\n    };\n    return ctx.common.async ? Promise.all([\n      this._def.left._parseAsync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      }),\n      this._def.right._parseAsync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      })\n    ]).then(([left, right]) => handleParsed(left, right)) : handleParsed(this._def.left._parseSync({\n      data: ctx.data,\n      path: ctx.path,\n      parent: ctx\n    }), this._def.right._parseSync({\n      data: ctx.data,\n      path: ctx.path,\n      parent: ctx\n    }));\n  }\n}\nZodIntersection.create = (left, right, params) => new ZodIntersection({\n  left,\n  right,\n  typeName: ZodFirstPartyTypeKind.ZodIntersection,\n  ...processCreateParams(params)\n});\nclass ZodTuple extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.array)\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.array,\n        received: ctx.parsedType\n      }), INVALID;\n    if (ctx.data.length < this._def.items.length)\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.too_small,\n        minimum: this._def.items.length,\n        inclusive: !0,\n        exact: !1,\n        type: \"array\"\n      }), INVALID;\n    !this._def.rest && ctx.data.length > this._def.items.length && (addIssueToContext(ctx, {\n      code: ZodIssueCode.too_big,\n      maximum: this._def.items.length,\n      inclusive: !0,\n      exact: !1,\n      type: \"array\"\n    }), status.dirty());\n    const items = [...ctx.data].map((item, itemIndex) => {\n      const schema = this._def.items[itemIndex] || this._def.rest;\n      return schema ? schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex)) : null;\n    }).filter((x) => !!x);\n    return ctx.common.async ? Promise.all(items).then((results) => ParseStatus.mergeArray(status, results)) : ParseStatus.mergeArray(status, items);\n  }\n  get items() {\n    return this._def.items;\n  }\n  rest(rest) {\n    return new ZodTuple({\n      ...this._def,\n      rest\n    });\n  }\n}\nZodTuple.create = (schemas, params) => {\n  if (!Array.isArray(schemas))\n    throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n  return new ZodTuple({\n    items: schemas,\n    typeName: ZodFirstPartyTypeKind.ZodTuple,\n    rest: null,\n    ...processCreateParams(params)\n  });\n};\nclass ZodMap extends ZodType {\n  get keySchema() {\n    return this._def.keyType;\n  }\n  get valueSchema() {\n    return this._def.valueType;\n  }\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.map)\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.map,\n        received: ctx.parsedType\n      }), INVALID;\n    const keyType = this._def.keyType, valueType = this._def.valueType, pairs = [...ctx.data.entries()].map(([key, value], index) => ({\n      key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n      value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"]))\n    }));\n    if (ctx.common.async) {\n      const finalMap = /* @__PURE__ */ new Map();\n      return Promise.resolve().then(async () => {\n        for (const pair of pairs) {\n          const key = await pair.key, value = await pair.value;\n          if (key.status === \"aborted\" || value.status === \"aborted\")\n            return INVALID;\n          (key.status === \"dirty\" || value.status === \"dirty\") && status.dirty(), finalMap.set(key.value, value.value);\n        }\n        return { status: status.value, value: finalMap };\n      });\n    } else {\n      const finalMap = /* @__PURE__ */ new Map();\n      for (const pair of pairs) {\n        const key = pair.key, value = pair.value;\n        if (key.status === \"aborted\" || value.status === \"aborted\")\n          return INVALID;\n        (key.status === \"dirty\" || value.status === \"dirty\") && status.dirty(), finalMap.set(key.value, value.value);\n      }\n      return { status: status.value, value: finalMap };\n    }\n  }\n}\nZodMap.create = (keyType, valueType, params) => new ZodMap({\n  valueType,\n  keyType,\n  typeName: ZodFirstPartyTypeKind.ZodMap,\n  ...processCreateParams(params)\n});\nclass ZodSet extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.set)\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.set,\n        received: ctx.parsedType\n      }), INVALID;\n    const def = this._def;\n    def.minSize !== null && ctx.data.size < def.minSize.value && (addIssueToContext(ctx, {\n      code: ZodIssueCode.too_small,\n      minimum: def.minSize.value,\n      type: \"set\",\n      inclusive: !0,\n      exact: !1,\n      message: def.minSize.message\n    }), status.dirty()), def.maxSize !== null && ctx.data.size > def.maxSize.value && (addIssueToContext(ctx, {\n      code: ZodIssueCode.too_big,\n      maximum: def.maxSize.value,\n      type: \"set\",\n      inclusive: !0,\n      exact: !1,\n      message: def.maxSize.message\n    }), status.dirty());\n    const valueType = this._def.valueType;\n    function finalizeSet(elements2) {\n      const parsedSet = /* @__PURE__ */ new Set();\n      for (const element of elements2) {\n        if (element.status === \"aborted\")\n          return INVALID;\n        element.status === \"dirty\" && status.dirty(), parsedSet.add(element.value);\n      }\n      return { status: status.value, value: parsedSet };\n    }\n    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n    return ctx.common.async ? Promise.all(elements).then((elements2) => finalizeSet(elements2)) : finalizeSet(elements);\n  }\n  min(minSize, message) {\n    return new ZodSet({\n      ...this._def,\n      minSize: { value: minSize, message: errorUtil.toString(message) }\n    });\n  }\n  max(maxSize, message) {\n    return new ZodSet({\n      ...this._def,\n      maxSize: { value: maxSize, message: errorUtil.toString(message) }\n    });\n  }\n  size(size, message) {\n    return this.min(size, message).max(size, message);\n  }\n  nonempty(message) {\n    return this.min(1, message);\n  }\n}\nZodSet.create = (valueType, params) => new ZodSet({\n  valueType,\n  minSize: null,\n  maxSize: null,\n  typeName: ZodFirstPartyTypeKind.ZodSet,\n  ...processCreateParams(params)\n});\nclass ZodLazy extends ZodType {\n  get schema() {\n    return this._def.getter();\n  }\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    return this._def.getter()._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n  }\n}\nZodLazy.create = (getter, params) => new ZodLazy({\n  getter,\n  typeName: ZodFirstPartyTypeKind.ZodLazy,\n  ...processCreateParams(params)\n});\nclass ZodLiteral extends ZodType {\n  _parse(input) {\n    if (input.data !== this._def.value) {\n      const ctx = this._getOrReturnCtx(input);\n      return addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_literal,\n        expected: this._def.value\n      }), INVALID;\n    }\n    return { status: \"valid\", value: input.data };\n  }\n  get value() {\n    return this._def.value;\n  }\n}\nZodLiteral.create = (value, params) => new ZodLiteral({\n  value,\n  typeName: ZodFirstPartyTypeKind.ZodLiteral,\n  ...processCreateParams(params)\n});\nfunction createZodEnum(values, params) {\n  return new ZodEnum({\n    values,\n    typeName: ZodFirstPartyTypeKind.ZodEnum,\n    ...processCreateParams(params)\n  });\n}\nclass ZodEnum extends ZodType {\n  _parse(input) {\n    if (typeof input.data != \"string\") {\n      const ctx = this._getOrReturnCtx(input), expectedValues = this._def.values;\n      return addIssueToContext(ctx, {\n        expected: util.joinValues(expectedValues),\n        received: ctx.parsedType,\n        code: ZodIssueCode.invalid_type\n      }), INVALID;\n    }\n    if (this._cache || (this._cache = new Set(this._def.values)), !this._cache.has(input.data)) {\n      const ctx = this._getOrReturnCtx(input), expectedValues = this._def.values;\n      return addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_enum_value,\n        options: expectedValues\n      }), INVALID;\n    }\n    return OK(input.data);\n  }\n  get options() {\n    return this._def.values;\n  }\n  get enum() {\n    const enumValues = {};\n    for (const val of this._def.values)\n      enumValues[val] = val;\n    return enumValues;\n  }\n  get Values() {\n    const enumValues = {};\n    for (const val of this._def.values)\n      enumValues[val] = val;\n    return enumValues;\n  }\n  get Enum() {\n    const enumValues = {};\n    for (const val of this._def.values)\n      enumValues[val] = val;\n    return enumValues;\n  }\n  extract(values, newDef = this._def) {\n    return ZodEnum.create(values, {\n      ...this._def,\n      ...newDef\n    });\n  }\n  exclude(values, newDef = this._def) {\n    return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n      ...this._def,\n      ...newDef\n    });\n  }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n  _parse(input) {\n    const nativeEnumValues = util.getValidEnumValues(this._def.values), ctx = this._getOrReturnCtx(input);\n    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n      const expectedValues = util.objectValues(nativeEnumValues);\n      return addIssueToContext(ctx, {\n        expected: util.joinValues(expectedValues),\n        received: ctx.parsedType,\n        code: ZodIssueCode.invalid_type\n      }), INVALID;\n    }\n    if (this._cache || (this._cache = new Set(util.getValidEnumValues(this._def.values))), !this._cache.has(input.data)) {\n      const expectedValues = util.objectValues(nativeEnumValues);\n      return addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_enum_value,\n        options: expectedValues\n      }), INVALID;\n    }\n    return OK(input.data);\n  }\n  get enum() {\n    return this._def.values;\n  }\n}\nZodNativeEnum.create = (values, params) => new ZodNativeEnum({\n  values,\n  typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n  ...processCreateParams(params)\n});\nclass ZodPromise extends ZodType {\n  unwrap() {\n    return this._def.type;\n  }\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === !1)\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.promise,\n        received: ctx.parsedType\n      }), INVALID;\n    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n    return OK(promisified.then((data) => this._def.type.parseAsync(data, {\n      path: ctx.path,\n      errorMap: ctx.common.contextualErrorMap\n    })));\n  }\n}\nZodPromise.create = (schema, params) => new ZodPromise({\n  type: schema,\n  typeName: ZodFirstPartyTypeKind.ZodPromise,\n  ...processCreateParams(params)\n});\nclass ZodEffects extends ZodType {\n  innerType() {\n    return this._def.schema;\n  }\n  sourceType() {\n    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;\n  }\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input), effect = this._def.effect || null, checkCtx = {\n      addIssue: (arg) => {\n        addIssueToContext(ctx, arg), arg.fatal ? status.abort() : status.dirty();\n      },\n      get path() {\n        return ctx.path;\n      }\n    };\n    if (checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx), effect.type === \"preprocess\") {\n      const processed = effect.transform(ctx.data, checkCtx);\n      if (ctx.common.async)\n        return Promise.resolve(processed).then(async (processed2) => {\n          if (status.value === \"aborted\")\n            return INVALID;\n          const result = await this._def.schema._parseAsync({\n            data: processed2,\n            path: ctx.path,\n            parent: ctx\n          });\n          return result.status === \"aborted\" ? INVALID : result.status === \"dirty\" || status.value === \"dirty\" ? DIRTY(result.value) : result;\n        });\n      {\n        if (status.value === \"aborted\")\n          return INVALID;\n        const result = this._def.schema._parseSync({\n          data: processed,\n          path: ctx.path,\n          parent: ctx\n        });\n        return result.status === \"aborted\" ? INVALID : result.status === \"dirty\" || status.value === \"dirty\" ? DIRTY(result.value) : result;\n      }\n    }\n    if (effect.type === \"refinement\") {\n      const executeRefinement = (acc) => {\n        const result = effect.refinement(acc, checkCtx);\n        if (ctx.common.async)\n          return Promise.resolve(result);\n        if (result instanceof Promise)\n          throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n        return acc;\n      };\n      if (ctx.common.async === !1) {\n        const inner = this._def.schema._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        return inner.status === \"aborted\" ? INVALID : (inner.status === \"dirty\" && status.dirty(), executeRefinement(inner.value), { status: status.value, value: inner.value });\n      } else\n        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => inner.status === \"aborted\" ? INVALID : (inner.status === \"dirty\" && status.dirty(), executeRefinement(inner.value).then(() => ({ status: status.value, value: inner.value }))));\n    }\n    if (effect.type === \"transform\")\n      if (ctx.common.async === !1) {\n        const base = this._def.schema._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (!isValid(base))\n          return INVALID;\n        const result = effect.transform(base.value, checkCtx);\n        if (result instanceof Promise)\n          throw new Error(\"Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.\");\n        return { status: status.value, value: result };\n      } else\n        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => isValid(base) ? Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({\n          status: status.value,\n          value: result\n        })) : INVALID);\n    util.assertNever(effect);\n  }\n}\nZodEffects.create = (schema, effect, params) => new ZodEffects({\n  schema,\n  typeName: ZodFirstPartyTypeKind.ZodEffects,\n  effect,\n  ...processCreateParams(params)\n});\nZodEffects.createWithPreprocess = (preprocess, schema, params) => new ZodEffects({\n  schema,\n  effect: { type: \"preprocess\", transform: preprocess },\n  typeName: ZodFirstPartyTypeKind.ZodEffects,\n  ...processCreateParams(params)\n});\nclass ZodOptional extends ZodType {\n  _parse(input) {\n    return this._getType(input) === ZodParsedType.undefined ? OK(void 0) : this._def.innerType._parse(input);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n}\nZodOptional.create = (type, params) => new ZodOptional({\n  innerType: type,\n  typeName: ZodFirstPartyTypeKind.ZodOptional,\n  ...processCreateParams(params)\n});\nclass ZodNullable extends ZodType {\n  _parse(input) {\n    return this._getType(input) === ZodParsedType.null ? OK(null) : this._def.innerType._parse(input);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n}\nZodNullable.create = (type, params) => new ZodNullable({\n  innerType: type,\n  typeName: ZodFirstPartyTypeKind.ZodNullable,\n  ...processCreateParams(params)\n});\nclass ZodDefault extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    let data = ctx.data;\n    return ctx.parsedType === ZodParsedType.undefined && (data = this._def.defaultValue()), this._def.innerType._parse({\n      data,\n      path: ctx.path,\n      parent: ctx\n    });\n  }\n  removeDefault() {\n    return this._def.innerType;\n  }\n}\nZodDefault.create = (type, params) => new ZodDefault({\n  innerType: type,\n  typeName: ZodFirstPartyTypeKind.ZodDefault,\n  defaultValue: typeof params.default == \"function\" ? params.default : () => params.default,\n  ...processCreateParams(params)\n});\nclass ZodCatch extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input), newCtx = {\n      ...ctx,\n      common: {\n        ...ctx.common,\n        issues: []\n      }\n    }, result = this._def.innerType._parse({\n      data: newCtx.data,\n      path: newCtx.path,\n      parent: {\n        ...newCtx\n      }\n    });\n    return isAsync(result) ? result.then((result2) => ({\n      status: \"valid\",\n      value: result2.status === \"valid\" ? result2.value : this._def.catchValue({\n        get error() {\n          return new ZodError(newCtx.common.issues);\n        },\n        input: newCtx.data\n      })\n    })) : {\n      status: \"valid\",\n      value: result.status === \"valid\" ? result.value : this._def.catchValue({\n        get error() {\n          return new ZodError(newCtx.common.issues);\n        },\n        input: newCtx.data\n      })\n    };\n  }\n  removeCatch() {\n    return this._def.innerType;\n  }\n}\nZodCatch.create = (type, params) => new ZodCatch({\n  innerType: type,\n  typeName: ZodFirstPartyTypeKind.ZodCatch,\n  catchValue: typeof params.catch == \"function\" ? params.catch : () => params.catch,\n  ...processCreateParams(params)\n});\nclass ZodNaN extends ZodType {\n  _parse(input) {\n    if (this._getType(input) !== ZodParsedType.nan) {\n      const ctx = this._getOrReturnCtx(input);\n      return addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.nan,\n        received: ctx.parsedType\n      }), INVALID;\n    }\n    return { status: \"valid\", value: input.data };\n  }\n}\nZodNaN.create = (params) => new ZodNaN({\n  typeName: ZodFirstPartyTypeKind.ZodNaN,\n  ...processCreateParams(params)\n});\nclass ZodBranded extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input), data = ctx.data;\n    return this._def.type._parse({\n      data,\n      path: ctx.path,\n      parent: ctx\n    });\n  }\n  unwrap() {\n    return this._def.type;\n  }\n}\nclass ZodPipeline extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.common.async)\n      return (async () => {\n        const inResult = await this._def.in._parseAsync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        return inResult.status === \"aborted\" ? INVALID : inResult.status === \"dirty\" ? (status.dirty(), DIRTY(inResult.value)) : this._def.out._parseAsync({\n          data: inResult.value,\n          path: ctx.path,\n          parent: ctx\n        });\n      })();\n    {\n      const inResult = this._def.in._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      });\n      return inResult.status === \"aborted\" ? INVALID : inResult.status === \"dirty\" ? (status.dirty(), {\n        status: \"dirty\",\n        value: inResult.value\n      }) : this._def.out._parseSync({\n        data: inResult.value,\n        path: ctx.path,\n        parent: ctx\n      });\n    }\n  }\n  static create(a, b) {\n    return new ZodPipeline({\n      in: a,\n      out: b,\n      typeName: ZodFirstPartyTypeKind.ZodPipeline\n    });\n  }\n}\nclass ZodReadonly extends ZodType {\n  _parse(input) {\n    const result = this._def.innerType._parse(input), freeze = (data) => (isValid(data) && (data.value = Object.freeze(data.value)), data);\n    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n}\nZodReadonly.create = (type, params) => new ZodReadonly({\n  innerType: type,\n  typeName: ZodFirstPartyTypeKind.ZodReadonly,\n  ...processCreateParams(params)\n});\nvar ZodFirstPartyTypeKind;\n(function(ZodFirstPartyTypeKind2) {\n  ZodFirstPartyTypeKind2.ZodString = \"ZodString\", ZodFirstPartyTypeKind2.ZodNumber = \"ZodNumber\", ZodFirstPartyTypeKind2.ZodNaN = \"ZodNaN\", ZodFirstPartyTypeKind2.ZodBigInt = \"ZodBigInt\", ZodFirstPartyTypeKind2.ZodBoolean = \"ZodBoolean\", ZodFirstPartyTypeKind2.ZodDate = \"ZodDate\", ZodFirstPartyTypeKind2.ZodSymbol = \"ZodSymbol\", ZodFirstPartyTypeKind2.ZodUndefined = \"ZodUndefined\", ZodFirstPartyTypeKind2.ZodNull = \"ZodNull\", ZodFirstPartyTypeKind2.ZodAny = \"ZodAny\", ZodFirstPartyTypeKind2.ZodUnknown = \"ZodUnknown\", ZodFirstPartyTypeKind2.ZodNever = \"ZodNever\", ZodFirstPartyTypeKind2.ZodVoid = \"ZodVoid\", ZodFirstPartyTypeKind2.ZodArray = \"ZodArray\", ZodFirstPartyTypeKind2.ZodObject = \"ZodObject\", ZodFirstPartyTypeKind2.ZodUnion = \"ZodUnion\", ZodFirstPartyTypeKind2.ZodDiscriminatedUnion = \"ZodDiscriminatedUnion\", ZodFirstPartyTypeKind2.ZodIntersection = \"ZodIntersection\", ZodFirstPartyTypeKind2.ZodTuple = \"ZodTuple\", ZodFirstPartyTypeKind2.ZodRecord = \"ZodRecord\", ZodFirstPartyTypeKind2.ZodMap = \"ZodMap\", ZodFirstPartyTypeKind2.ZodSet = \"ZodSet\", ZodFirstPartyTypeKind2.ZodFunction = \"ZodFunction\", ZodFirstPartyTypeKind2.ZodLazy = \"ZodLazy\", ZodFirstPartyTypeKind2.ZodLiteral = \"ZodLiteral\", ZodFirstPartyTypeKind2.ZodEnum = \"ZodEnum\", ZodFirstPartyTypeKind2.ZodEffects = \"ZodEffects\", ZodFirstPartyTypeKind2.ZodNativeEnum = \"ZodNativeEnum\", ZodFirstPartyTypeKind2.ZodOptional = \"ZodOptional\", ZodFirstPartyTypeKind2.ZodNullable = \"ZodNullable\", ZodFirstPartyTypeKind2.ZodDefault = \"ZodDefault\", ZodFirstPartyTypeKind2.ZodCatch = \"ZodCatch\", ZodFirstPartyTypeKind2.ZodPromise = \"ZodPromise\", ZodFirstPartyTypeKind2.ZodBranded = \"ZodBranded\", ZodFirstPartyTypeKind2.ZodPipeline = \"ZodPipeline\", ZodFirstPartyTypeKind2.ZodReadonly = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst stringType = ZodString.create, numberType = ZodNumber.create, booleanType = ZodBoolean.create;\nZodNever.create;\nconst arrayType = ZodArray.create, objectType = ZodObject.create;\nZodUnion.create;\nZodIntersection.create;\nZodTuple.create;\nconst enumType = ZodEnum.create;\nZodPromise.create;\nZodOptional.create;\nZodNullable.create;\nvar DEFAULT_PORT = 5746, PING_ENDPOINT = \"/ping/stagewise\", PING_RESPONSE = \"stagewise\", contract = {\n  server: {\n    getSessionInfo: {\n      request: objectType({}),\n      response: objectType({\n        sessionId: stringType().optional(),\n        appName: stringType().describe('The name of the application, e.g. \"VS Code\" or \"Cursor\"'),\n        displayName: stringType().describe(\"Human-readable window identifier for UI display\"),\n        port: numberType().describe(\"Port number this VS Code instance is running on\")\n      }),\n      update: objectType({})\n    },\n    triggerAgentPrompt: {\n      request: objectType({\n        sessionId: stringType().optional(),\n        prompt: stringType(),\n        model: stringType().optional().describe(\"The model to use for the agent prompt\"),\n        files: arrayType(stringType()).optional().describe(\"Link project files to the agent prompt\"),\n        mode: enumType([\"agent\", \"ask\", \"manual\"]).optional().describe(\"The mode to use for the agent prompt\"),\n        images: arrayType(stringType()).optional().describe(\"Upload files like images, videos, etc.\")\n      }),\n      response: objectType({\n        sessionId: stringType().optional(),\n        result: objectType({\n          success: booleanType(),\n          error: stringType().optional(),\n          errorCode: enumType([\"session_mismatch\"]).optional(),\n          output: stringType().optional()\n        })\n      }),\n      update: objectType({\n        sessionId: stringType().optional(),\n        updateText: stringType()\n      })\n    }\n  }\n};\nconst MAX_CONSECUTIVE_ERRORS = 2;\nasync function discoverVSCodeWindows(maxAttempts = 10, timeout = 300) {\n  const windows = [];\n  let consecutiveErrors = 0;\n  for (let attempt = 0; attempt < maxAttempts; attempt++) {\n    const port = DEFAULT_PORT + attempt;\n    try {\n      const controller = new AbortController(), timeoutId = setTimeout(() => controller.abort(), timeout), response = await fetch(\\`http://localhost:\\${port}\\${PING_ENDPOINT}\\`, {\n        signal: controller.signal\n      });\n      if (clearTimeout(timeoutId), consecutiveErrors = 0, response.ok && await response.text() === PING_RESPONSE)\n        try {\n          const bridge = createSRPCClientBridge(\n            \\`ws://localhost:\\${port}\\`,\n            contract\n          );\n          await bridge.connect();\n          const sessionInfo = await bridge.call.getSessionInfo(\n            {},\n            {\n              onUpdate: () => {\n              }\n            }\n          );\n          windows.push(sessionInfo), await bridge.close();\n        } catch (_error) {\n          console.warn(\\`Failed to get session info from port \\${port}:\\`, _error);\n        }\n      else\n        continue;\n    } catch {\n      if (consecutiveErrors++, consecutiveErrors >= MAX_CONSECUTIVE_ERRORS) {\n        console.warn(\n          \"⬆️⬆️⬆️ Those two errors are expected! (Everything is fine, they are part of stagewise's discovery mechanism!) ✅\"\n        );\n        break;\n      }\n      continue;\n    }\n  }\n  return windows.length === 0 && console.warn(\n    \"No IDE windows found, please start an IDE with the stagewise extension installed! ❌\"\n  ), windows;\n}\nconst getCurrentPort = () => typeof window < \"u\" && window.parent.location && window.parent.location.port || \"80\", getStorageKey = () => \\`ide-selected-session-id-on-browser-port-\\${getCurrentPort()}\\`, getStoredSessionId = () => {\n  try {\n    return localStorage.getItem(getStorageKey()) || void 0;\n  } catch {\n    return;\n  }\n}, setStoredSessionId = (sessionId) => {\n  try {\n    sessionId ? localStorage.setItem(getStorageKey(), sessionId) : localStorage.removeItem(getStorageKey());\n  } catch {\n  }\n}, VSCodeContext = createContext({\n  windows: [],\n  isDiscovering: !1,\n  discoveryError: null,\n  selectedSession: void 0,\n  shouldPromptWindowSelection: !1,\n  setShouldPromptWindowSelection: () => {\n  },\n  discover: async () => {\n  },\n  selectSession: () => {\n  },\n  refreshSession: async () => {\n  },\n  appName: void 0\n});\nfunction VSCodeProvider({ children }) {\n  const [windows, setWindows] = useState([]), [isDiscovering, setIsDiscovering] = useState(!1), [discoveryError, setDiscoveryError] = useState(null), [selectedSessionId, setSelectedSessionId] = useState(getStoredSessionId()), [shouldPromptWindowSelection, setShouldPromptWindowSelection] = useState(!1), discover = async () => {\n    setIsDiscovering(!0), setDiscoveryError(null);\n    try {\n      const discoveredWindows = await discoverVSCodeWindows();\n      setWindows(discoveredWindows);\n      const storedSessionId = getStoredSessionId();\n      if (discoveredWindows.length === 1) {\n        const singleWindow = discoveredWindows[0];\n        (!storedSessionId || storedSessionId !== singleWindow.sessionId) && (setSelectedSessionId(singleWindow.sessionId), setStoredSessionId(singleWindow.sessionId)), setShouldPromptWindowSelection(!1);\n      } else {\n        const noSessionIdSavedForCurrentPort = discoveredWindows.length > 1 && !storedSessionId || // No saved sessionId for current port\n        storedSessionId && !discoveredWindows.some((w) => w.sessionId === storedSessionId);\n        setShouldPromptWindowSelection(noSessionIdSavedForCurrentPort), noSessionIdSavedForCurrentPort && (setSelectedSessionId(void 0), setStoredSessionId(void 0));\n      }\n    } catch (err) {\n      setDiscoveryError(\n        err instanceof Error ? err.message : \"Failed to discover windows\"\n      );\n    } finally {\n      setIsDiscovering(!1);\n    }\n  }, selectSession = (sessionId) => {\n    if (!sessionId || sessionId === \"\") {\n      setStoredSessionId(void 0), setSelectedSessionId(void 0);\n      return;\n    }\n    setSelectedSessionId(sessionId), setStoredSessionId(sessionId), sessionId && setShouldPromptWindowSelection(!1);\n  }, refreshSession = async () => {\n    selectedSessionId && await discover();\n  };\n  useEffect(() => {\n    discover();\n  }, []);\n  const selectedSession = windows.find(\n    (w) => w.sessionId === selectedSessionId\n  ), value = {\n    windows,\n    isDiscovering,\n    discoveryError,\n    selectedSession,\n    shouldPromptWindowSelection,\n    setShouldPromptWindowSelection,\n    discover,\n    selectSession,\n    refreshSession,\n    appName: selectedSession == null ? void 0 : selectedSession.appName\n  };\n  return /* @__PURE__ */ jsx(VSCodeContext.Provider, { value, children });\n}\nfunction useVSCode() {\n  return useContext(VSCodeContext);\n}\nconst SRPCBridgeContext = createContext({\n  bridge: null,\n  isConnecting: !1,\n  error: null\n});\nfunction SRPCBridgeProvider({ children }) {\n  const [state, setState] = useState({\n    bridge: null,\n    isConnecting: !0,\n    error: null\n  }), { selectedSession } = useVSCode(), bridgeRef = useRef(null), initializeBridge = useCallback(async (port) => {\n    bridgeRef.current && await bridgeRef.current.close();\n    try {\n      const bridge = createSRPCClientBridge(\\`ws://localhost:\\${port}\\`, contract);\n      await bridge.connect(), bridgeRef.current = bridge, setState({\n        bridge,\n        isConnecting: !1,\n        error: null\n      });\n    } catch (error) {\n      bridgeRef.current = null, setState({\n        bridge: null,\n        isConnecting: !1,\n        error: error instanceof Error ? error : new Error(String(error))\n      });\n    }\n  }, []);\n  return useEffect(() => {\n    selectedSession && initializeBridge(selectedSession.port);\n  }, [selectedSession, initializeBridge]), /* @__PURE__ */ jsx(SRPCBridgeContext.Provider, { value: state, children });\n}\nfunction useSRPCBridge() {\n  const context = useContext(SRPCBridgeContext);\n  if (!context)\n    throw new Error(\"useSRPCBridge must be used within an SRPCBridgeProvider\");\n  return context;\n}\nconst ConfigContext = createContext({\n  config: void 0\n});\nfunction ConfigProvider({\n  children,\n  config\n}) {\n  const value = useMemo(() => ({\n    config\n  }), [config]);\n  return /* @__PURE__ */ jsx(ConfigContext.Provider, { value, children });\n}\nfunction useConfig() {\n  return useContext(ConfigContext);\n}\nconst PluginContext = createContext({\n  plugins: [],\n  toolbarContext: {\n    sendPrompt: () => {\n    },\n    mainAppWindow: window.parent\n  }\n});\nfunction PluginProvider({ children }) {\n  const { bridge } = useSRPCBridge(), { selectedSession } = useVSCode(), { config } = useConfig(), plugins = (config == null ? void 0 : config.plugins) || [], toolbarContext = useMemo(() => ({\n    sendPrompt: async (prompt) => {\n      if (!bridge) throw new Error(\"No connection to the agent\");\n      return await bridge.call.triggerAgentPrompt(\n        typeof prompt == \"string\" ? {\n          prompt,\n          ...selectedSession && {\n            sessionId: selectedSession.sessionId\n          }\n        } : {\n          prompt: prompt.prompt,\n          model: prompt.model,\n          files: prompt.files,\n          images: prompt.images,\n          mode: prompt.mode,\n          ...selectedSession && {\n            sessionId: selectedSession.sessionId\n          }\n        },\n        {\n          onUpdate: (_update) => {\n          }\n        }\n      );\n    },\n    mainAppWindow: window.parent\n  }), [bridge, selectedSession]), pluginsLoadedRef = useRef(!1);\n  useEffect(() => {\n    pluginsLoadedRef.current || (pluginsLoadedRef.current = !0, console.log(\"plugins\", plugins), plugins.forEach((plugin) => {\n      var _a;\n      (_a = plugin.onLoad) == null || _a.call(plugin, toolbarContext);\n    }));\n  }, [plugins, toolbarContext]);\n  const value = useMemo(() => ({\n    plugins,\n    toolbarContext\n  }), [plugins, toolbarContext]);\n  return /* @__PURE__ */ jsx(PluginContext.Provider, { value, children });\n}\nfunction usePlugins() {\n  return useContext(PluginContext);\n}\nfunction r(e) {\n  var t, f, n = \"\";\n  if (typeof e == \"string\" || typeof e == \"number\") n += e;\n  else if (typeof e == \"object\") if (Array.isArray(e)) {\n    var o = e.length;\n    for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += \" \"), n += f);\n  } else for (f in e) e[f] && (n && (n += \" \"), n += f);\n  return n;\n}\nfunction clsx() {\n  for (var e, t, f = 0, n = \"\", o = arguments.length; f < o; f++) (e = arguments[f]) && (t = r(e)) && (n && (n += \" \"), n += t);\n  return n;\n}\nconst CLASS_PART_SEPARATOR = \"-\", createClassGroupUtils = (config) => {\n  const classMap = createClassMap(config), {\n    conflictingClassGroups,\n    conflictingClassGroupModifiers\n  } = config;\n  return {\n    getClassGroupId: (className) => {\n      const classParts = className.split(CLASS_PART_SEPARATOR);\n      return classParts[0] === \"\" && classParts.length !== 1 && classParts.shift(), getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n    },\n    getConflictingClassGroupIds: (classGroupId, hasPostfixModifier) => {\n      const conflicts = conflictingClassGroups[classGroupId] || [];\n      return hasPostfixModifier && conflictingClassGroupModifiers[classGroupId] ? [...conflicts, ...conflictingClassGroupModifiers[classGroupId]] : conflicts;\n    }\n  };\n}, getGroupRecursive = (classParts, classPartObject) => {\n  var _a;\n  if (classParts.length === 0)\n    return classPartObject.classGroupId;\n  const currentClassPart = classParts[0], nextClassPartObject = classPartObject.nextPart.get(currentClassPart), classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;\n  if (classGroupFromNextClassPart)\n    return classGroupFromNextClassPart;\n  if (classPartObject.validators.length === 0)\n    return;\n  const classRest = classParts.join(CLASS_PART_SEPARATOR);\n  return (_a = classPartObject.validators.find(({\n    validator\n  }) => validator(classRest))) == null ? void 0 : _a.classGroupId;\n}, arbitraryPropertyRegex = /^\\\\[(.+)\\\\]$/, getGroupIdForArbitraryProperty = (className) => {\n  if (arbitraryPropertyRegex.test(className)) {\n    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1], property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(\":\"));\n    if (property)\n      return \"arbitrary..\" + property;\n  }\n}, createClassMap = (config) => {\n  const {\n    theme,\n    classGroups\n  } = config, classMap = {\n    nextPart: /* @__PURE__ */ new Map(),\n    validators: []\n  };\n  for (const classGroupId in classGroups)\n    processClassesRecursively(classGroups[classGroupId], classMap, classGroupId, theme);\n  return classMap;\n}, processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {\n  classGroup.forEach((classDefinition) => {\n    if (typeof classDefinition == \"string\") {\n      const classPartObjectToEdit = classDefinition === \"\" ? classPartObject : getPart(classPartObject, classDefinition);\n      classPartObjectToEdit.classGroupId = classGroupId;\n      return;\n    }\n    if (typeof classDefinition == \"function\") {\n      if (isThemeGetter(classDefinition)) {\n        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n        return;\n      }\n      classPartObject.validators.push({\n        validator: classDefinition,\n        classGroupId\n      });\n      return;\n    }\n    Object.entries(classDefinition).forEach(([key, classGroup2]) => {\n      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);\n    });\n  });\n}, getPart = (classPartObject, path) => {\n  let currentClassPartObject = classPartObject;\n  return path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {\n    currentClassPartObject.nextPart.has(pathPart) || currentClassPartObject.nextPart.set(pathPart, {\n      nextPart: /* @__PURE__ */ new Map(),\n      validators: []\n    }), currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n  }), currentClassPartObject;\n}, isThemeGetter = (func) => func.isThemeGetter, createLruCache = (maxCacheSize) => {\n  if (maxCacheSize < 1)\n    return {\n      get: () => {\n      },\n      set: () => {\n      }\n    };\n  let cacheSize = 0, cache = /* @__PURE__ */ new Map(), previousCache = /* @__PURE__ */ new Map();\n  const update = (key, value) => {\n    cache.set(key, value), cacheSize++, cacheSize > maxCacheSize && (cacheSize = 0, previousCache = cache, cache = /* @__PURE__ */ new Map());\n  };\n  return {\n    get(key) {\n      let value = cache.get(key);\n      if (value !== void 0)\n        return value;\n      if ((value = previousCache.get(key)) !== void 0)\n        return update(key, value), value;\n    },\n    set(key, value) {\n      cache.has(key) ? cache.set(key, value) : update(key, value);\n    }\n  };\n}, IMPORTANT_MODIFIER = \"!\", MODIFIER_SEPARATOR = \":\", MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length, createParseClassName = (config) => {\n  const {\n    prefix,\n    experimentalParseClassName\n  } = config;\n  let parseClassName = (className) => {\n    const modifiers = [];\n    let bracketDepth = 0, parenDepth = 0, modifierStart = 0, postfixModifierPosition;\n    for (let index = 0; index < className.length; index++) {\n      let currentCharacter = className[index];\n      if (bracketDepth === 0 && parenDepth === 0) {\n        if (currentCharacter === MODIFIER_SEPARATOR) {\n          modifiers.push(className.slice(modifierStart, index)), modifierStart = index + MODIFIER_SEPARATOR_LENGTH;\n          continue;\n        }\n        if (currentCharacter === \"/\") {\n          postfixModifierPosition = index;\n          continue;\n        }\n      }\n      currentCharacter === \"[\" ? bracketDepth++ : currentCharacter === \"]\" ? bracketDepth-- : currentCharacter === \"(\" ? parenDepth++ : currentCharacter === \")\" && parenDepth--;\n    }\n    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart), baseClassName = stripImportantModifier(baseClassNameWithImportantModifier), hasImportantModifier = baseClassName !== baseClassNameWithImportantModifier, maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;\n    return {\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    };\n  };\n  if (prefix) {\n    const fullPrefix = prefix + MODIFIER_SEPARATOR, parseClassNameOriginal = parseClassName;\n    parseClassName = (className) => className.startsWith(fullPrefix) ? parseClassNameOriginal(className.substring(fullPrefix.length)) : {\n      isExternal: !0,\n      modifiers: [],\n      hasImportantModifier: !1,\n      baseClassName: className,\n      maybePostfixModifierPosition: void 0\n    };\n  }\n  if (experimentalParseClassName) {\n    const parseClassNameOriginal = parseClassName;\n    parseClassName = (className) => experimentalParseClassName({\n      className,\n      parseClassName: parseClassNameOriginal\n    });\n  }\n  return parseClassName;\n}, stripImportantModifier = (baseClassName) => baseClassName.endsWith(IMPORTANT_MODIFIER) ? baseClassName.substring(0, baseClassName.length - 1) : baseClassName.startsWith(IMPORTANT_MODIFIER) ? baseClassName.substring(1) : baseClassName, createSortModifiers = (config) => {\n  const orderSensitiveModifiers = Object.fromEntries(config.orderSensitiveModifiers.map((modifier) => [modifier, !0]));\n  return (modifiers) => {\n    if (modifiers.length <= 1)\n      return modifiers;\n    const sortedModifiers = [];\n    let unsortedModifiers = [];\n    return modifiers.forEach((modifier) => {\n      modifier[0] === \"[\" || orderSensitiveModifiers[modifier] ? (sortedModifiers.push(...unsortedModifiers.sort(), modifier), unsortedModifiers = []) : unsortedModifiers.push(modifier);\n    }), sortedModifiers.push(...unsortedModifiers.sort()), sortedModifiers;\n  };\n}, createConfigUtils = (config) => ({\n  cache: createLruCache(config.cacheSize),\n  parseClassName: createParseClassName(config),\n  sortModifiers: createSortModifiers(config),\n  ...createClassGroupUtils(config)\n}), SPLIT_CLASSES_REGEX = /\\\\s+/, mergeClassList = (classList, configUtils) => {\n  const {\n    parseClassName,\n    getClassGroupId,\n    getConflictingClassGroupIds,\n    sortModifiers\n  } = configUtils, classGroupsInConflict = [], classNames = classList.trim().split(SPLIT_CLASSES_REGEX);\n  let result = \"\";\n  for (let index = classNames.length - 1; index >= 0; index -= 1) {\n    const originalClassName = classNames[index], {\n      isExternal,\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    } = parseClassName(originalClassName);\n    if (isExternal) {\n      result = originalClassName + (result.length > 0 ? \" \" + result : result);\n      continue;\n    }\n    let hasPostfixModifier = !!maybePostfixModifierPosition, classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n    if (!classGroupId) {\n      if (!hasPostfixModifier) {\n        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n        continue;\n      }\n      if (classGroupId = getClassGroupId(baseClassName), !classGroupId) {\n        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n        continue;\n      }\n      hasPostfixModifier = !1;\n    }\n    const variantModifier = sortModifiers(modifiers).join(\":\"), modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier, classId = modifierId + classGroupId;\n    if (classGroupsInConflict.includes(classId))\n      continue;\n    classGroupsInConflict.push(classId);\n    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);\n    for (let i = 0; i < conflictGroups.length; ++i) {\n      const group = conflictGroups[i];\n      classGroupsInConflict.push(modifierId + group);\n    }\n    result = originalClassName + (result.length > 0 ? \" \" + result : result);\n  }\n  return result;\n};\nfunction twJoin() {\n  let index = 0, argument, resolvedValue, string = \"\";\n  for (; index < arguments.length; )\n    (argument = arguments[index++]) && (resolvedValue = toValue(argument)) && (string && (string += \" \"), string += resolvedValue);\n  return string;\n}\nconst toValue = (mix) => {\n  if (typeof mix == \"string\")\n    return mix;\n  let resolvedValue, string = \"\";\n  for (let k = 0; k < mix.length; k++)\n    mix[k] && (resolvedValue = toValue(mix[k])) && (string && (string += \" \"), string += resolvedValue);\n  return string;\n};\nfunction createTailwindMerge(createConfigFirst, ...createConfigRest) {\n  let configUtils, cacheGet, cacheSet, functionToCall = initTailwindMerge;\n  function initTailwindMerge(classList) {\n    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());\n    return configUtils = createConfigUtils(config), cacheGet = configUtils.cache.get, cacheSet = configUtils.cache.set, functionToCall = tailwindMerge, tailwindMerge(classList);\n  }\n  function tailwindMerge(classList) {\n    const cachedResult = cacheGet(classList);\n    if (cachedResult)\n      return cachedResult;\n    const result = mergeClassList(classList, configUtils);\n    return cacheSet(classList, result), result;\n  }\n  return function() {\n    return functionToCall(twJoin.apply(null, arguments));\n  };\n}\nconst fromTheme = (key) => {\n  const themeGetter = (theme) => theme[key] || [];\n  return themeGetter.isThemeGetter = !0, themeGetter;\n}, arbitraryValueRegex = /^\\\\[(?:(\\\\w[\\\\w-]*):)?(.+)\\\\]$/i, arbitraryVariableRegex = /^\\\\((?:(\\\\w[\\\\w-]*):)?(.+)\\\\)$/i, fractionRegex = /^\\\\d+\\\\/\\\\d+$/, tshirtUnitRegex = /^(\\\\d+(\\\\.\\\\d+)?)?(xs|sm|md|lg|xl)$/, lengthUnitRegex = /\\\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\\\b(calc|min|max|clamp)\\\\(.+\\\\)|^0$/, colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch)|color-mix)\\\\(.+\\\\)$/, shadowRegex = /^(inset_)?-?((\\\\d+)?\\\\.?(\\\\d+)[a-z]+|0)_-?((\\\\d+)?\\\\.?(\\\\d+)[a-z]+|0)/, imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\\\(.+\\\\)$/, isFraction = (value) => fractionRegex.test(value), isNumber = (value) => !!value && !Number.isNaN(Number(value)), isInteger = (value) => !!value && Number.isInteger(Number(value)), isPercent = (value) => value.endsWith(\"%\") && isNumber(value.slice(0, -1)), isTshirtSize = (value) => tshirtUnitRegex.test(value), isAny = () => !0, isLengthOnly = (value) => (\n  // \\`colorFunctionRegex\\` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n  // For example, \\`hsl(0 0% 0%)\\` would be classified as a length without this check.\n  // I could also use lookbehind assertion in \\`lengthUnitRegex\\` but that isn't supported widely enough.\n  lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)\n), isNever = () => !1, isShadow = (value) => shadowRegex.test(value), isImage = (value) => imageRegex.test(value), isAnyNonArbitrary = (value) => !isArbitraryValue(value) && !isArbitraryVariable(value), isArbitrarySize = (value) => getIsArbitraryValue(value, isLabelSize, isNever), isArbitraryValue = (value) => arbitraryValueRegex.test(value), isArbitraryLength = (value) => getIsArbitraryValue(value, isLabelLength, isLengthOnly), isArbitraryNumber = (value) => getIsArbitraryValue(value, isLabelNumber, isNumber), isArbitraryPosition = (value) => getIsArbitraryValue(value, isLabelPosition, isNever), isArbitraryImage = (value) => getIsArbitraryValue(value, isLabelImage, isImage), isArbitraryShadow = (value) => getIsArbitraryValue(value, isLabelShadow, isShadow), isArbitraryVariable = (value) => arbitraryVariableRegex.test(value), isArbitraryVariableLength = (value) => getIsArbitraryVariable(value, isLabelLength), isArbitraryVariableFamilyName = (value) => getIsArbitraryVariable(value, isLabelFamilyName), isArbitraryVariablePosition = (value) => getIsArbitraryVariable(value, isLabelPosition), isArbitraryVariableSize = (value) => getIsArbitraryVariable(value, isLabelSize), isArbitraryVariableImage = (value) => getIsArbitraryVariable(value, isLabelImage), isArbitraryVariableShadow = (value) => getIsArbitraryVariable(value, isLabelShadow, !0), getIsArbitraryValue = (value, testLabel, testValue) => {\n  const result = arbitraryValueRegex.exec(value);\n  return result ? result[1] ? testLabel(result[1]) : testValue(result[2]) : !1;\n}, getIsArbitraryVariable = (value, testLabel, shouldMatchNoLabel = !1) => {\n  const result = arbitraryVariableRegex.exec(value);\n  return result ? result[1] ? testLabel(result[1]) : shouldMatchNoLabel : !1;\n}, isLabelPosition = (label) => label === \"position\" || label === \"percentage\", isLabelImage = (label) => label === \"image\" || label === \"url\", isLabelSize = (label) => label === \"length\" || label === \"size\" || label === \"bg-size\", isLabelLength = (label) => label === \"length\", isLabelNumber = (label) => label === \"number\", isLabelFamilyName = (label) => label === \"family-name\", isLabelShadow = (label) => label === \"shadow\", getDefaultConfig = () => {\n  const themeColor = fromTheme(\"color\"), themeFont = fromTheme(\"font\"), themeText = fromTheme(\"text\"), themeFontWeight = fromTheme(\"font-weight\"), themeTracking = fromTheme(\"tracking\"), themeLeading = fromTheme(\"leading\"), themeBreakpoint = fromTheme(\"breakpoint\"), themeContainer = fromTheme(\"container\"), themeSpacing = fromTheme(\"spacing\"), themeRadius = fromTheme(\"radius\"), themeShadow = fromTheme(\"shadow\"), themeInsetShadow = fromTheme(\"inset-shadow\"), themeTextShadow = fromTheme(\"text-shadow\"), themeDropShadow = fromTheme(\"drop-shadow\"), themeBlur = fromTheme(\"blur\"), themePerspective = fromTheme(\"perspective\"), themeAspect = fromTheme(\"aspect\"), themeEase = fromTheme(\"ease\"), themeAnimate = fromTheme(\"animate\"), scaleBreak = () => [\"auto\", \"avoid\", \"all\", \"avoid-page\", \"page\", \"left\", \"right\", \"column\"], scalePosition = () => [\n    \"center\",\n    \"top\",\n    \"bottom\",\n    \"left\",\n    \"right\",\n    \"top-left\",\n    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\n    \"left-top\",\n    \"top-right\",\n    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\n    \"right-top\",\n    \"bottom-right\",\n    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\n    \"right-bottom\",\n    \"bottom-left\",\n    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\n    \"left-bottom\"\n  ], scalePositionWithArbitrary = () => [...scalePosition(), isArbitraryVariable, isArbitraryValue], scaleOverflow = () => [\"auto\", \"hidden\", \"clip\", \"visible\", \"scroll\"], scaleOverscroll = () => [\"auto\", \"contain\", \"none\"], scaleUnambiguousSpacing = () => [isArbitraryVariable, isArbitraryValue, themeSpacing], scaleInset = () => [isFraction, \"full\", \"auto\", ...scaleUnambiguousSpacing()], scaleGridTemplateColsRows = () => [isInteger, \"none\", \"subgrid\", isArbitraryVariable, isArbitraryValue], scaleGridColRowStartAndEnd = () => [\"auto\", {\n    span: [\"full\", isInteger, isArbitraryVariable, isArbitraryValue]\n  }, isInteger, isArbitraryVariable, isArbitraryValue], scaleGridColRowStartOrEnd = () => [isInteger, \"auto\", isArbitraryVariable, isArbitraryValue], scaleGridAutoColsRows = () => [\"auto\", \"min\", \"max\", \"fr\", isArbitraryVariable, isArbitraryValue], scaleAlignPrimaryAxis = () => [\"start\", \"end\", \"center\", \"between\", \"around\", \"evenly\", \"stretch\", \"baseline\", \"center-safe\", \"end-safe\"], scaleAlignSecondaryAxis = () => [\"start\", \"end\", \"center\", \"stretch\", \"center-safe\", \"end-safe\"], scaleMargin = () => [\"auto\", ...scaleUnambiguousSpacing()], scaleSizing = () => [isFraction, \"auto\", \"full\", \"dvw\", \"dvh\", \"lvw\", \"lvh\", \"svw\", \"svh\", \"min\", \"max\", \"fit\", ...scaleUnambiguousSpacing()], scaleColor = () => [themeColor, isArbitraryVariable, isArbitraryValue], scaleBgPosition = () => [...scalePosition(), isArbitraryVariablePosition, isArbitraryPosition, {\n    position: [isArbitraryVariable, isArbitraryValue]\n  }], scaleBgRepeat = () => [\"no-repeat\", {\n    repeat: [\"\", \"x\", \"y\", \"space\", \"round\"]\n  }], scaleBgSize = () => [\"auto\", \"cover\", \"contain\", isArbitraryVariableSize, isArbitrarySize, {\n    size: [isArbitraryVariable, isArbitraryValue]\n  }], scaleGradientStopPosition = () => [isPercent, isArbitraryVariableLength, isArbitraryLength], scaleRadius = () => [\n    // Deprecated since Tailwind CSS v4.0.0\n    \"\",\n    \"none\",\n    \"full\",\n    themeRadius,\n    isArbitraryVariable,\n    isArbitraryValue\n  ], scaleBorderWidth = () => [\"\", isNumber, isArbitraryVariableLength, isArbitraryLength], scaleLineStyle = () => [\"solid\", \"dashed\", \"dotted\", \"double\"], scaleBlendMode = () => [\"normal\", \"multiply\", \"screen\", \"overlay\", \"darken\", \"lighten\", \"color-dodge\", \"color-burn\", \"hard-light\", \"soft-light\", \"difference\", \"exclusion\", \"hue\", \"saturation\", \"color\", \"luminosity\"], scaleMaskImagePosition = () => [isNumber, isPercent, isArbitraryVariablePosition, isArbitraryPosition], scaleBlur = () => [\n    // Deprecated since Tailwind CSS v4.0.0\n    \"\",\n    \"none\",\n    themeBlur,\n    isArbitraryVariable,\n    isArbitraryValue\n  ], scaleRotate = () => [\"none\", isNumber, isArbitraryVariable, isArbitraryValue], scaleScale = () => [\"none\", isNumber, isArbitraryVariable, isArbitraryValue], scaleSkew = () => [isNumber, isArbitraryVariable, isArbitraryValue], scaleTranslate = () => [isFraction, \"full\", ...scaleUnambiguousSpacing()];\n  return {\n    cacheSize: 500,\n    theme: {\n      animate: [\"spin\", \"ping\", \"pulse\", \"bounce\"],\n      aspect: [\"video\"],\n      blur: [isTshirtSize],\n      breakpoint: [isTshirtSize],\n      color: [isAny],\n      container: [isTshirtSize],\n      \"drop-shadow\": [isTshirtSize],\n      ease: [\"in\", \"out\", \"in-out\"],\n      font: [isAnyNonArbitrary],\n      \"font-weight\": [\"thin\", \"extralight\", \"light\", \"normal\", \"medium\", \"semibold\", \"bold\", \"extrabold\", \"black\"],\n      \"inset-shadow\": [isTshirtSize],\n      leading: [\"none\", \"tight\", \"snug\", \"normal\", \"relaxed\", \"loose\"],\n      perspective: [\"dramatic\", \"near\", \"normal\", \"midrange\", \"distant\", \"none\"],\n      radius: [isTshirtSize],\n      shadow: [isTshirtSize],\n      spacing: [\"px\", isNumber],\n      text: [isTshirtSize],\n      \"text-shadow\": [isTshirtSize],\n      tracking: [\"tighter\", \"tight\", \"normal\", \"wide\", \"wider\", \"widest\"]\n    },\n    classGroups: {\n      // --------------\n      // --- Layout ---\n      // --------------\n      /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */\n      aspect: [{\n        aspect: [\"auto\", \"square\", isFraction, isArbitraryValue, isArbitraryVariable, themeAspect]\n      }],\n      /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       * @deprecated since Tailwind CSS v4.0.0\n       */\n      container: [\"container\"],\n      /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */\n      columns: [{\n        columns: [isNumber, isArbitraryValue, isArbitraryVariable, themeContainer]\n      }],\n      /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */\n      \"break-after\": [{\n        \"break-after\": scaleBreak()\n      }],\n      /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */\n      \"break-before\": [{\n        \"break-before\": scaleBreak()\n      }],\n      /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */\n      \"break-inside\": [{\n        \"break-inside\": [\"auto\", \"avoid\", \"avoid-page\", \"avoid-column\"]\n      }],\n      /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */\n      \"box-decoration\": [{\n        \"box-decoration\": [\"slice\", \"clone\"]\n      }],\n      /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */\n      box: [{\n        box: [\"border\", \"content\"]\n      }],\n      /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */\n      display: [\"block\", \"inline-block\", \"inline\", \"flex\", \"inline-flex\", \"table\", \"inline-table\", \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row-group\", \"table-row\", \"flow-root\", \"grid\", \"inline-grid\", \"contents\", \"list-item\", \"hidden\"],\n      /**\n       * Screen Reader Only\n       * @see https://tailwindcss.com/docs/display#screen-reader-only\n       */\n      sr: [\"sr-only\", \"not-sr-only\"],\n      /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */\n      float: [{\n        float: [\"right\", \"left\", \"none\", \"start\", \"end\"]\n      }],\n      /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */\n      clear: [{\n        clear: [\"left\", \"right\", \"both\", \"none\", \"start\", \"end\"]\n      }],\n      /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */\n      isolation: [\"isolate\", \"isolation-auto\"],\n      /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */\n      \"object-fit\": [{\n        object: [\"contain\", \"cover\", \"fill\", \"none\", \"scale-down\"]\n      }],\n      /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */\n      \"object-position\": [{\n        object: scalePositionWithArbitrary()\n      }],\n      /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      overflow: [{\n        overflow: scaleOverflow()\n      }],\n      /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      \"overflow-x\": [{\n        \"overflow-x\": scaleOverflow()\n      }],\n      /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      \"overflow-y\": [{\n        \"overflow-y\": scaleOverflow()\n      }],\n      /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      overscroll: [{\n        overscroll: scaleOverscroll()\n      }],\n      /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      \"overscroll-x\": [{\n        \"overscroll-x\": scaleOverscroll()\n      }],\n      /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      \"overscroll-y\": [{\n        \"overscroll-y\": scaleOverscroll()\n      }],\n      /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */\n      position: [\"static\", \"fixed\", \"absolute\", \"relative\", \"sticky\"],\n      /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      inset: [{\n        inset: scaleInset()\n      }],\n      /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      \"inset-x\": [{\n        \"inset-x\": scaleInset()\n      }],\n      /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      \"inset-y\": [{\n        \"inset-y\": scaleInset()\n      }],\n      /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      start: [{\n        start: scaleInset()\n      }],\n      /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      end: [{\n        end: scaleInset()\n      }],\n      /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      top: [{\n        top: scaleInset()\n      }],\n      /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      right: [{\n        right: scaleInset()\n      }],\n      /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      bottom: [{\n        bottom: scaleInset()\n      }],\n      /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      left: [{\n        left: scaleInset()\n      }],\n      /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */\n      visibility: [\"visible\", \"invisible\", \"collapse\"],\n      /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */\n      z: [{\n        z: [isInteger, \"auto\", isArbitraryVariable, isArbitraryValue]\n      }],\n      // ------------------------\n      // --- Flexbox and Grid ---\n      // ------------------------\n      /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */\n      basis: [{\n        basis: [isFraction, \"full\", \"auto\", themeContainer, ...scaleUnambiguousSpacing()]\n      }],\n      /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */\n      \"flex-direction\": [{\n        flex: [\"row\", \"row-reverse\", \"col\", \"col-reverse\"]\n      }],\n      /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */\n      \"flex-wrap\": [{\n        flex: [\"nowrap\", \"wrap\", \"wrap-reverse\"]\n      }],\n      /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */\n      flex: [{\n        flex: [isNumber, isFraction, \"auto\", \"initial\", \"none\", isArbitraryValue]\n      }],\n      /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */\n      grow: [{\n        grow: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */\n      shrink: [{\n        shrink: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */\n      order: [{\n        order: [isInteger, \"first\", \"last\", \"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */\n      \"grid-cols\": [{\n        \"grid-cols\": scaleGridTemplateColsRows()\n      }],\n      /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-start-end\": [{\n        col: scaleGridColRowStartAndEnd()\n      }],\n      /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-start\": [{\n        \"col-start\": scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-end\": [{\n        \"col-end\": scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */\n      \"grid-rows\": [{\n        \"grid-rows\": scaleGridTemplateColsRows()\n      }],\n      /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-start-end\": [{\n        row: scaleGridColRowStartAndEnd()\n      }],\n      /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-start\": [{\n        \"row-start\": scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-end\": [{\n        \"row-end\": scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */\n      \"grid-flow\": [{\n        \"grid-flow\": [\"row\", \"col\", \"dense\", \"row-dense\", \"col-dense\"]\n      }],\n      /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */\n      \"auto-cols\": [{\n        \"auto-cols\": scaleGridAutoColsRows()\n      }],\n      /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */\n      \"auto-rows\": [{\n        \"auto-rows\": scaleGridAutoColsRows()\n      }],\n      /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */\n      gap: [{\n        gap: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */\n      \"gap-x\": [{\n        \"gap-x\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */\n      \"gap-y\": [{\n        \"gap-y\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */\n      \"justify-content\": [{\n        justify: [...scaleAlignPrimaryAxis(), \"normal\"]\n      }],\n      /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */\n      \"justify-items\": [{\n        \"justify-items\": [...scaleAlignSecondaryAxis(), \"normal\"]\n      }],\n      /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */\n      \"justify-self\": [{\n        \"justify-self\": [\"auto\", ...scaleAlignSecondaryAxis()]\n      }],\n      /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */\n      \"align-content\": [{\n        content: [\"normal\", ...scaleAlignPrimaryAxis()]\n      }],\n      /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */\n      \"align-items\": [{\n        items: [...scaleAlignSecondaryAxis(), {\n          baseline: [\"\", \"last\"]\n        }]\n      }],\n      /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */\n      \"align-self\": [{\n        self: [\"auto\", ...scaleAlignSecondaryAxis(), {\n          baseline: [\"\", \"last\"]\n        }]\n      }],\n      /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */\n      \"place-content\": [{\n        \"place-content\": scaleAlignPrimaryAxis()\n      }],\n      /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */\n      \"place-items\": [{\n        \"place-items\": [...scaleAlignSecondaryAxis(), \"baseline\"]\n      }],\n      /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */\n      \"place-self\": [{\n        \"place-self\": [\"auto\", ...scaleAlignSecondaryAxis()]\n      }],\n      // Spacing\n      /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */\n      p: [{\n        p: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */\n      px: [{\n        px: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */\n      py: [{\n        py: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */\n      ps: [{\n        ps: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pe: [{\n        pe: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pt: [{\n        pt: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pr: [{\n        pr: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pb: [{\n        pb: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pl: [{\n        pl: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */\n      m: [{\n        m: scaleMargin()\n      }],\n      /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mx: [{\n        mx: scaleMargin()\n      }],\n      /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */\n      my: [{\n        my: scaleMargin()\n      }],\n      /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ms: [{\n        ms: scaleMargin()\n      }],\n      /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */\n      me: [{\n        me: scaleMargin()\n      }],\n      /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mt: [{\n        mt: scaleMargin()\n      }],\n      /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mr: [{\n        mr: scaleMargin()\n      }],\n      /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mb: [{\n        mb: scaleMargin()\n      }],\n      /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ml: [{\n        ml: scaleMargin()\n      }],\n      /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      \"space-x\": [{\n        \"space-x\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      \"space-x-reverse\": [\"space-x-reverse\"],\n      /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      \"space-y\": [{\n        \"space-y\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      \"space-y-reverse\": [\"space-y-reverse\"],\n      // --------------\n      // --- Sizing ---\n      // --------------\n      /**\n       * Size\n       * @see https://tailwindcss.com/docs/width#setting-both-width-and-height\n       */\n      size: [{\n        size: scaleSizing()\n      }],\n      /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */\n      w: [{\n        w: [themeContainer, \"screen\", ...scaleSizing()]\n      }],\n      /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */\n      \"min-w\": [{\n        \"min-w\": [\n          themeContainer,\n          \"screen\",\n          /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n          \"none\",\n          ...scaleSizing()\n        ]\n      }],\n      /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */\n      \"max-w\": [{\n        \"max-w\": [\n          themeContainer,\n          \"screen\",\n          \"none\",\n          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n          \"prose\",\n          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n          {\n            screen: [themeBreakpoint]\n          },\n          ...scaleSizing()\n        ]\n      }],\n      /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */\n      h: [{\n        h: [\"screen\", \"lh\", ...scaleSizing()]\n      }],\n      /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */\n      \"min-h\": [{\n        \"min-h\": [\"screen\", \"lh\", \"none\", ...scaleSizing()]\n      }],\n      /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */\n      \"max-h\": [{\n        \"max-h\": [\"screen\", \"lh\", ...scaleSizing()]\n      }],\n      // ------------------\n      // --- Typography ---\n      // ------------------\n      /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */\n      \"font-size\": [{\n        text: [\"base\", themeText, isArbitraryVariableLength, isArbitraryLength]\n      }],\n      /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */\n      \"font-smoothing\": [\"antialiased\", \"subpixel-antialiased\"],\n      /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */\n      \"font-style\": [\"italic\", \"not-italic\"],\n      /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */\n      \"font-weight\": [{\n        font: [themeFontWeight, isArbitraryVariable, isArbitraryNumber]\n      }],\n      /**\n       * Font Stretch\n       * @see https://tailwindcss.com/docs/font-stretch\n       */\n      \"font-stretch\": [{\n        \"font-stretch\": [\"ultra-condensed\", \"extra-condensed\", \"condensed\", \"semi-condensed\", \"normal\", \"semi-expanded\", \"expanded\", \"extra-expanded\", \"ultra-expanded\", isPercent, isArbitraryValue]\n      }],\n      /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */\n      \"font-family\": [{\n        font: [isArbitraryVariableFamilyName, isArbitraryValue, themeFont]\n      }],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-normal\": [\"normal-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-ordinal\": [\"ordinal\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-slashed-zero\": [\"slashed-zero\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-figure\": [\"lining-nums\", \"oldstyle-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-spacing\": [\"proportional-nums\", \"tabular-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-fraction\": [\"diagonal-fractions\", \"stacked-fractions\"],\n      /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */\n      tracking: [{\n        tracking: [themeTracking, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */\n      \"line-clamp\": [{\n        \"line-clamp\": [isNumber, \"none\", isArbitraryVariable, isArbitraryNumber]\n      }],\n      /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */\n      leading: [{\n        leading: [\n          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n          themeLeading,\n          ...scaleUnambiguousSpacing()\n        ]\n      }],\n      /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */\n      \"list-image\": [{\n        \"list-image\": [\"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */\n      \"list-style-position\": [{\n        list: [\"inside\", \"outside\"]\n      }],\n      /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */\n      \"list-style-type\": [{\n        list: [\"disc\", \"decimal\", \"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */\n      \"text-alignment\": [{\n        text: [\"left\", \"center\", \"right\", \"justify\", \"start\", \"end\"]\n      }],\n      /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://v3.tailwindcss.com/docs/placeholder-color\n       */\n      \"placeholder-color\": [{\n        placeholder: scaleColor()\n      }],\n      /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */\n      \"text-color\": [{\n        text: scaleColor()\n      }],\n      /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */\n      \"text-decoration\": [\"underline\", \"overline\", \"line-through\", \"no-underline\"],\n      /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */\n      \"text-decoration-style\": [{\n        decoration: [...scaleLineStyle(), \"wavy\"]\n      }],\n      /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */\n      \"text-decoration-thickness\": [{\n        decoration: [isNumber, \"from-font\", \"auto\", isArbitraryVariable, isArbitraryLength]\n      }],\n      /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */\n      \"text-decoration-color\": [{\n        decoration: scaleColor()\n      }],\n      /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */\n      \"underline-offset\": [{\n        \"underline-offset\": [isNumber, \"auto\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */\n      \"text-transform\": [\"uppercase\", \"lowercase\", \"capitalize\", \"normal-case\"],\n      /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */\n      \"text-overflow\": [\"truncate\", \"text-ellipsis\", \"text-clip\"],\n      /**\n       * Text Wrap\n       * @see https://tailwindcss.com/docs/text-wrap\n       */\n      \"text-wrap\": [{\n        text: [\"wrap\", \"nowrap\", \"balance\", \"pretty\"]\n      }],\n      /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */\n      indent: [{\n        indent: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */\n      \"vertical-align\": [{\n        align: [\"baseline\", \"top\", \"middle\", \"bottom\", \"text-top\", \"text-bottom\", \"sub\", \"super\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */\n      whitespace: [{\n        whitespace: [\"normal\", \"nowrap\", \"pre\", \"pre-line\", \"pre-wrap\", \"break-spaces\"]\n      }],\n      /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */\n      break: [{\n        break: [\"normal\", \"words\", \"all\", \"keep\"]\n      }],\n      /**\n       * Overflow Wrap\n       * @see https://tailwindcss.com/docs/overflow-wrap\n       */\n      wrap: [{\n        wrap: [\"break-word\", \"anywhere\", \"normal\"]\n      }],\n      /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */\n      hyphens: [{\n        hyphens: [\"none\", \"manual\", \"auto\"]\n      }],\n      /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */\n      content: [{\n        content: [\"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      // -------------------\n      // --- Backgrounds ---\n      // -------------------\n      /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */\n      \"bg-attachment\": [{\n        bg: [\"fixed\", \"local\", \"scroll\"]\n      }],\n      /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */\n      \"bg-clip\": [{\n        \"bg-clip\": [\"border\", \"padding\", \"content\", \"text\"]\n      }],\n      /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */\n      \"bg-origin\": [{\n        \"bg-origin\": [\"border\", \"padding\", \"content\"]\n      }],\n      /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */\n      \"bg-position\": [{\n        bg: scaleBgPosition()\n      }],\n      /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */\n      \"bg-repeat\": [{\n        bg: scaleBgRepeat()\n      }],\n      /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */\n      \"bg-size\": [{\n        bg: scaleBgSize()\n      }],\n      /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */\n      \"bg-image\": [{\n        bg: [\"none\", {\n          linear: [{\n            to: [\"t\", \"tr\", \"r\", \"br\", \"b\", \"bl\", \"l\", \"tl\"]\n          }, isInteger, isArbitraryVariable, isArbitraryValue],\n          radial: [\"\", isArbitraryVariable, isArbitraryValue],\n          conic: [isInteger, isArbitraryVariable, isArbitraryValue]\n        }, isArbitraryVariableImage, isArbitraryImage]\n      }],\n      /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */\n      \"bg-color\": [{\n        bg: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-from-pos\": [{\n        from: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-via-pos\": [{\n        via: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-to-pos\": [{\n        to: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-from\": [{\n        from: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-via\": [{\n        via: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-to\": [{\n        to: scaleColor()\n      }],\n      // ---------------\n      // --- Borders ---\n      // ---------------\n      /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      rounded: [{\n        rounded: scaleRadius()\n      }],\n      /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-s\": [{\n        \"rounded-s\": scaleRadius()\n      }],\n      /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-e\": [{\n        \"rounded-e\": scaleRadius()\n      }],\n      /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-t\": [{\n        \"rounded-t\": scaleRadius()\n      }],\n      /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-r\": [{\n        \"rounded-r\": scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-b\": [{\n        \"rounded-b\": scaleRadius()\n      }],\n      /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-l\": [{\n        \"rounded-l\": scaleRadius()\n      }],\n      /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-ss\": [{\n        \"rounded-ss\": scaleRadius()\n      }],\n      /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-se\": [{\n        \"rounded-se\": scaleRadius()\n      }],\n      /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-ee\": [{\n        \"rounded-ee\": scaleRadius()\n      }],\n      /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-es\": [{\n        \"rounded-es\": scaleRadius()\n      }],\n      /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-tl\": [{\n        \"rounded-tl\": scaleRadius()\n      }],\n      /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-tr\": [{\n        \"rounded-tr\": scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-br\": [{\n        \"rounded-br\": scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-bl\": [{\n        \"rounded-bl\": scaleRadius()\n      }],\n      /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w\": [{\n        border: scaleBorderWidth()\n      }],\n      /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-x\": [{\n        \"border-x\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-y\": [{\n        \"border-y\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-s\": [{\n        \"border-s\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-e\": [{\n        \"border-e\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-t\": [{\n        \"border-t\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-r\": [{\n        \"border-r\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-b\": [{\n        \"border-b\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-l\": [{\n        \"border-l\": scaleBorderWidth()\n      }],\n      /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      \"divide-x\": [{\n        \"divide-x\": scaleBorderWidth()\n      }],\n      /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      \"divide-x-reverse\": [\"divide-x-reverse\"],\n      /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      \"divide-y\": [{\n        \"divide-y\": scaleBorderWidth()\n      }],\n      /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      \"divide-y-reverse\": [\"divide-y-reverse\"],\n      /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */\n      \"border-style\": [{\n        border: [...scaleLineStyle(), \"hidden\", \"none\"]\n      }],\n      /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style\n       */\n      \"divide-style\": [{\n        divide: [...scaleLineStyle(), \"hidden\", \"none\"]\n      }],\n      /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color\": [{\n        border: scaleColor()\n      }],\n      /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-x\": [{\n        \"border-x\": scaleColor()\n      }],\n      /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-y\": [{\n        \"border-y\": scaleColor()\n      }],\n      /**\n       * Border Color S\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-s\": [{\n        \"border-s\": scaleColor()\n      }],\n      /**\n       * Border Color E\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-e\": [{\n        \"border-e\": scaleColor()\n      }],\n      /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-t\": [{\n        \"border-t\": scaleColor()\n      }],\n      /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-r\": [{\n        \"border-r\": scaleColor()\n      }],\n      /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-b\": [{\n        \"border-b\": scaleColor()\n      }],\n      /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-l\": [{\n        \"border-l\": scaleColor()\n      }],\n      /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */\n      \"divide-color\": [{\n        divide: scaleColor()\n      }],\n      /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */\n      \"outline-style\": [{\n        outline: [...scaleLineStyle(), \"none\", \"hidden\"]\n      }],\n      /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */\n      \"outline-offset\": [{\n        \"outline-offset\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */\n      \"outline-w\": [{\n        outline: [\"\", isNumber, isArbitraryVariableLength, isArbitraryLength]\n      }],\n      /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */\n      \"outline-color\": [{\n        outline: scaleColor()\n      }],\n      // ---------------\n      // --- Effects ---\n      // ---------------\n      /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */\n      shadow: [{\n        shadow: [\n          // Deprecated since Tailwind CSS v4.0.0\n          \"\",\n          \"none\",\n          themeShadow,\n          isArbitraryVariableShadow,\n          isArbitraryShadow\n        ]\n      }],\n      /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color\n       */\n      \"shadow-color\": [{\n        shadow: scaleColor()\n      }],\n      /**\n       * Inset Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow\n       */\n      \"inset-shadow\": [{\n        \"inset-shadow\": [\"none\", themeInsetShadow, isArbitraryVariableShadow, isArbitraryShadow]\n      }],\n      /**\n       * Inset Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color\n       */\n      \"inset-shadow-color\": [{\n        \"inset-shadow\": scaleColor()\n      }],\n      /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring\n       */\n      \"ring-w\": [{\n        ring: scaleBorderWidth()\n      }],\n      /**\n       * Ring Width Inset\n       * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      \"ring-w-inset\": [\"ring-inset\"],\n      /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color\n       */\n      \"ring-color\": [{\n        ring: scaleColor()\n      }],\n      /**\n       * Ring Offset Width\n       * @see https://v3.tailwindcss.com/docs/ring-offset-width\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      \"ring-offset-w\": [{\n        \"ring-offset\": [isNumber, isArbitraryLength]\n      }],\n      /**\n       * Ring Offset Color\n       * @see https://v3.tailwindcss.com/docs/ring-offset-color\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      \"ring-offset-color\": [{\n        \"ring-offset\": scaleColor()\n      }],\n      /**\n       * Inset Ring Width\n       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring\n       */\n      \"inset-ring-w\": [{\n        \"inset-ring\": scaleBorderWidth()\n      }],\n      /**\n       * Inset Ring Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color\n       */\n      \"inset-ring-color\": [{\n        \"inset-ring\": scaleColor()\n      }],\n      /**\n       * Text Shadow\n       * @see https://tailwindcss.com/docs/text-shadow\n       */\n      \"text-shadow\": [{\n        \"text-shadow\": [\"none\", themeTextShadow, isArbitraryVariableShadow, isArbitraryShadow]\n      }],\n      /**\n       * Text Shadow Color\n       * @see https://tailwindcss.com/docs/text-shadow#setting-the-shadow-color\n       */\n      \"text-shadow-color\": [{\n        \"text-shadow\": scaleColor()\n      }],\n      /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */\n      opacity: [{\n        opacity: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */\n      \"mix-blend\": [{\n        \"mix-blend\": [...scaleBlendMode(), \"plus-darker\", \"plus-lighter\"]\n      }],\n      /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */\n      \"bg-blend\": [{\n        \"bg-blend\": scaleBlendMode()\n      }],\n      /**\n       * Mask Clip\n       * @see https://tailwindcss.com/docs/mask-clip\n       */\n      \"mask-clip\": [{\n        \"mask-clip\": [\"border\", \"padding\", \"content\", \"fill\", \"stroke\", \"view\"]\n      }, \"mask-no-clip\"],\n      /**\n       * Mask Composite\n       * @see https://tailwindcss.com/docs/mask-composite\n       */\n      \"mask-composite\": [{\n        mask: [\"add\", \"subtract\", \"intersect\", \"exclude\"]\n      }],\n      /**\n       * Mask Image\n       * @see https://tailwindcss.com/docs/mask-image\n       */\n      \"mask-image-linear-pos\": [{\n        \"mask-linear\": [isNumber]\n      }],\n      \"mask-image-linear-from-pos\": [{\n        \"mask-linear-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-linear-to-pos\": [{\n        \"mask-linear-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-linear-from-color\": [{\n        \"mask-linear-from\": scaleColor()\n      }],\n      \"mask-image-linear-to-color\": [{\n        \"mask-linear-to\": scaleColor()\n      }],\n      \"mask-image-t-from-pos\": [{\n        \"mask-t-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-t-to-pos\": [{\n        \"mask-t-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-t-from-color\": [{\n        \"mask-t-from\": scaleColor()\n      }],\n      \"mask-image-t-to-color\": [{\n        \"mask-t-to\": scaleColor()\n      }],\n      \"mask-image-r-from-pos\": [{\n        \"mask-r-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-r-to-pos\": [{\n        \"mask-r-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-r-from-color\": [{\n        \"mask-r-from\": scaleColor()\n      }],\n      \"mask-image-r-to-color\": [{\n        \"mask-r-to\": scaleColor()\n      }],\n      \"mask-image-b-from-pos\": [{\n        \"mask-b-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-b-to-pos\": [{\n        \"mask-b-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-b-from-color\": [{\n        \"mask-b-from\": scaleColor()\n      }],\n      \"mask-image-b-to-color\": [{\n        \"mask-b-to\": scaleColor()\n      }],\n      \"mask-image-l-from-pos\": [{\n        \"mask-l-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-l-to-pos\": [{\n        \"mask-l-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-l-from-color\": [{\n        \"mask-l-from\": scaleColor()\n      }],\n      \"mask-image-l-to-color\": [{\n        \"mask-l-to\": scaleColor()\n      }],\n      \"mask-image-x-from-pos\": [{\n        \"mask-x-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-x-to-pos\": [{\n        \"mask-x-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-x-from-color\": [{\n        \"mask-x-from\": scaleColor()\n      }],\n      \"mask-image-x-to-color\": [{\n        \"mask-x-to\": scaleColor()\n      }],\n      \"mask-image-y-from-pos\": [{\n        \"mask-y-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-y-to-pos\": [{\n        \"mask-y-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-y-from-color\": [{\n        \"mask-y-from\": scaleColor()\n      }],\n      \"mask-image-y-to-color\": [{\n        \"mask-y-to\": scaleColor()\n      }],\n      \"mask-image-radial\": [{\n        \"mask-radial\": [isArbitraryVariable, isArbitraryValue]\n      }],\n      \"mask-image-radial-from-pos\": [{\n        \"mask-radial-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-radial-to-pos\": [{\n        \"mask-radial-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-radial-from-color\": [{\n        \"mask-radial-from\": scaleColor()\n      }],\n      \"mask-image-radial-to-color\": [{\n        \"mask-radial-to\": scaleColor()\n      }],\n      \"mask-image-radial-shape\": [{\n        \"mask-radial\": [\"circle\", \"ellipse\"]\n      }],\n      \"mask-image-radial-size\": [{\n        \"mask-radial\": [{\n          closest: [\"side\", \"corner\"],\n          farthest: [\"side\", \"corner\"]\n        }]\n      }],\n      \"mask-image-radial-pos\": [{\n        \"mask-radial-at\": scalePosition()\n      }],\n      \"mask-image-conic-pos\": [{\n        \"mask-conic\": [isNumber]\n      }],\n      \"mask-image-conic-from-pos\": [{\n        \"mask-conic-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-conic-to-pos\": [{\n        \"mask-conic-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-conic-from-color\": [{\n        \"mask-conic-from\": scaleColor()\n      }],\n      \"mask-image-conic-to-color\": [{\n        \"mask-conic-to\": scaleColor()\n      }],\n      /**\n       * Mask Mode\n       * @see https://tailwindcss.com/docs/mask-mode\n       */\n      \"mask-mode\": [{\n        mask: [\"alpha\", \"luminance\", \"match\"]\n      }],\n      /**\n       * Mask Origin\n       * @see https://tailwindcss.com/docs/mask-origin\n       */\n      \"mask-origin\": [{\n        \"mask-origin\": [\"border\", \"padding\", \"content\", \"fill\", \"stroke\", \"view\"]\n      }],\n      /**\n       * Mask Position\n       * @see https://tailwindcss.com/docs/mask-position\n       */\n      \"mask-position\": [{\n        mask: scaleBgPosition()\n      }],\n      /**\n       * Mask Repeat\n       * @see https://tailwindcss.com/docs/mask-repeat\n       */\n      \"mask-repeat\": [{\n        mask: scaleBgRepeat()\n      }],\n      /**\n       * Mask Size\n       * @see https://tailwindcss.com/docs/mask-size\n       */\n      \"mask-size\": [{\n        mask: scaleBgSize()\n      }],\n      /**\n       * Mask Type\n       * @see https://tailwindcss.com/docs/mask-type\n       */\n      \"mask-type\": [{\n        \"mask-type\": [\"alpha\", \"luminance\"]\n      }],\n      /**\n       * Mask Image\n       * @see https://tailwindcss.com/docs/mask-image\n       */\n      \"mask-image\": [{\n        mask: [\"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      // ---------------\n      // --- Filters ---\n      // ---------------\n      /**\n       * Filter\n       * @see https://tailwindcss.com/docs/filter\n       */\n      filter: [{\n        filter: [\n          // Deprecated since Tailwind CSS v3.0.0\n          \"\",\n          \"none\",\n          isArbitraryVariable,\n          isArbitraryValue\n        ]\n      }],\n      /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */\n      blur: [{\n        blur: scaleBlur()\n      }],\n      /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */\n      brightness: [{\n        brightness: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */\n      contrast: [{\n        contrast: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */\n      \"drop-shadow\": [{\n        \"drop-shadow\": [\n          // Deprecated since Tailwind CSS v4.0.0\n          \"\",\n          \"none\",\n          themeDropShadow,\n          isArbitraryVariableShadow,\n          isArbitraryShadow\n        ]\n      }],\n      /**\n       * Drop Shadow Color\n       * @see https://tailwindcss.com/docs/filter-drop-shadow#setting-the-shadow-color\n       */\n      \"drop-shadow-color\": [{\n        \"drop-shadow\": scaleColor()\n      }],\n      /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */\n      grayscale: [{\n        grayscale: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */\n      \"hue-rotate\": [{\n        \"hue-rotate\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */\n      invert: [{\n        invert: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */\n      saturate: [{\n        saturate: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */\n      sepia: [{\n        sepia: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Filter\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */\n      \"backdrop-filter\": [{\n        \"backdrop-filter\": [\n          // Deprecated since Tailwind CSS v3.0.0\n          \"\",\n          \"none\",\n          isArbitraryVariable,\n          isArbitraryValue\n        ]\n      }],\n      /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */\n      \"backdrop-blur\": [{\n        \"backdrop-blur\": scaleBlur()\n      }],\n      /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */\n      \"backdrop-brightness\": [{\n        \"backdrop-brightness\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */\n      \"backdrop-contrast\": [{\n        \"backdrop-contrast\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */\n      \"backdrop-grayscale\": [{\n        \"backdrop-grayscale\": [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */\n      \"backdrop-hue-rotate\": [{\n        \"backdrop-hue-rotate\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */\n      \"backdrop-invert\": [{\n        \"backdrop-invert\": [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */\n      \"backdrop-opacity\": [{\n        \"backdrop-opacity\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */\n      \"backdrop-saturate\": [{\n        \"backdrop-saturate\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */\n      \"backdrop-sepia\": [{\n        \"backdrop-sepia\": [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      // --------------\n      // --- Tables ---\n      // --------------\n      /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */\n      \"border-collapse\": [{\n        border: [\"collapse\", \"separate\"]\n      }],\n      /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing\": [{\n        \"border-spacing\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing-x\": [{\n        \"border-spacing-x\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing-y\": [{\n        \"border-spacing-y\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */\n      \"table-layout\": [{\n        table: [\"auto\", \"fixed\"]\n      }],\n      /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */\n      caption: [{\n        caption: [\"top\", \"bottom\"]\n      }],\n      // ---------------------------------\n      // --- Transitions and Animation ---\n      // ---------------------------------\n      /**\n       * Transition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */\n      transition: [{\n        transition: [\"\", \"all\", \"colors\", \"opacity\", \"shadow\", \"transform\", \"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Behavior\n       * @see https://tailwindcss.com/docs/transition-behavior\n       */\n      \"transition-behavior\": [{\n        transition: [\"normal\", \"discrete\"]\n      }],\n      /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */\n      duration: [{\n        duration: [isNumber, \"initial\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */\n      ease: [{\n        ease: [\"linear\", \"initial\", themeEase, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */\n      delay: [{\n        delay: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */\n      animate: [{\n        animate: [\"none\", themeAnimate, isArbitraryVariable, isArbitraryValue]\n      }],\n      // ------------------\n      // --- Transforms ---\n      // ------------------\n      /**\n       * Backface Visibility\n       * @see https://tailwindcss.com/docs/backface-visibility\n       */\n      backface: [{\n        backface: [\"hidden\", \"visible\"]\n      }],\n      /**\n       * Perspective\n       * @see https://tailwindcss.com/docs/perspective\n       */\n      perspective: [{\n        perspective: [themePerspective, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Perspective Origin\n       * @see https://tailwindcss.com/docs/perspective-origin\n       */\n      \"perspective-origin\": [{\n        \"perspective-origin\": scalePositionWithArbitrary()\n      }],\n      /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      rotate: [{\n        rotate: scaleRotate()\n      }],\n      /**\n       * Rotate X\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      \"rotate-x\": [{\n        \"rotate-x\": scaleRotate()\n      }],\n      /**\n       * Rotate Y\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      \"rotate-y\": [{\n        \"rotate-y\": scaleRotate()\n      }],\n      /**\n       * Rotate Z\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      \"rotate-z\": [{\n        \"rotate-z\": scaleRotate()\n      }],\n      /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */\n      scale: [{\n        scale: scaleScale()\n      }],\n      /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-x\": [{\n        \"scale-x\": scaleScale()\n      }],\n      /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-y\": [{\n        \"scale-y\": scaleScale()\n      }],\n      /**\n       * Scale Z\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-z\": [{\n        \"scale-z\": scaleScale()\n      }],\n      /**\n       * Scale 3D\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-3d\": [\"scale-3d\"],\n      /**\n       * Skew\n       * @see https://tailwindcss.com/docs/skew\n       */\n      skew: [{\n        skew: scaleSkew()\n      }],\n      /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */\n      \"skew-x\": [{\n        \"skew-x\": scaleSkew()\n      }],\n      /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */\n      \"skew-y\": [{\n        \"skew-y\": scaleSkew()\n      }],\n      /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */\n      transform: [{\n        transform: [isArbitraryVariable, isArbitraryValue, \"\", \"none\", \"gpu\", \"cpu\"]\n      }],\n      /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */\n      \"transform-origin\": [{\n        origin: scalePositionWithArbitrary()\n      }],\n      /**\n       * Transform Style\n       * @see https://tailwindcss.com/docs/transform-style\n       */\n      \"transform-style\": [{\n        transform: [\"3d\", \"flat\"]\n      }],\n      /**\n       * Translate\n       * @see https://tailwindcss.com/docs/translate\n       */\n      translate: [{\n        translate: scaleTranslate()\n      }],\n      /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-x\": [{\n        \"translate-x\": scaleTranslate()\n      }],\n      /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-y\": [{\n        \"translate-y\": scaleTranslate()\n      }],\n      /**\n       * Translate Z\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-z\": [{\n        \"translate-z\": scaleTranslate()\n      }],\n      /**\n       * Translate None\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-none\": [\"translate-none\"],\n      // ---------------------\n      // --- Interactivity ---\n      // ---------------------\n      /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */\n      accent: [{\n        accent: scaleColor()\n      }],\n      /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */\n      appearance: [{\n        appearance: [\"none\", \"auto\"]\n      }],\n      /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */\n      \"caret-color\": [{\n        caret: scaleColor()\n      }],\n      /**\n       * Color Scheme\n       * @see https://tailwindcss.com/docs/color-scheme\n       */\n      \"color-scheme\": [{\n        scheme: [\"normal\", \"dark\", \"light\", \"light-dark\", \"only-dark\", \"only-light\"]\n      }],\n      /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */\n      cursor: [{\n        cursor: [\"auto\", \"default\", \"pointer\", \"wait\", \"text\", \"move\", \"help\", \"not-allowed\", \"none\", \"context-menu\", \"progress\", \"cell\", \"crosshair\", \"vertical-text\", \"alias\", \"copy\", \"no-drop\", \"grab\", \"grabbing\", \"all-scroll\", \"col-resize\", \"row-resize\", \"n-resize\", \"e-resize\", \"s-resize\", \"w-resize\", \"ne-resize\", \"nw-resize\", \"se-resize\", \"sw-resize\", \"ew-resize\", \"ns-resize\", \"nesw-resize\", \"nwse-resize\", \"zoom-in\", \"zoom-out\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Field Sizing\n       * @see https://tailwindcss.com/docs/field-sizing\n       */\n      \"field-sizing\": [{\n        \"field-sizing\": [\"fixed\", \"content\"]\n      }],\n      /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */\n      \"pointer-events\": [{\n        \"pointer-events\": [\"auto\", \"none\"]\n      }],\n      /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */\n      resize: [{\n        resize: [\"none\", \"\", \"y\", \"x\"]\n      }],\n      /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */\n      \"scroll-behavior\": [{\n        scroll: [\"auto\", \"smooth\"]\n      }],\n      /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-m\": [{\n        \"scroll-m\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mx\": [{\n        \"scroll-mx\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-my\": [{\n        \"scroll-my\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-ms\": [{\n        \"scroll-ms\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-me\": [{\n        \"scroll-me\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mt\": [{\n        \"scroll-mt\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mr\": [{\n        \"scroll-mr\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mb\": [{\n        \"scroll-mb\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-ml\": [{\n        \"scroll-ml\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-p\": [{\n        \"scroll-p\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-px\": [{\n        \"scroll-px\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-py\": [{\n        \"scroll-py\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-ps\": [{\n        \"scroll-ps\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pe\": [{\n        \"scroll-pe\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pt\": [{\n        \"scroll-pt\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pr\": [{\n        \"scroll-pr\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pb\": [{\n        \"scroll-pb\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pl\": [{\n        \"scroll-pl\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */\n      \"snap-align\": [{\n        snap: [\"start\", \"end\", \"center\", \"align-none\"]\n      }],\n      /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */\n      \"snap-stop\": [{\n        snap: [\"normal\", \"always\"]\n      }],\n      /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      \"snap-type\": [{\n        snap: [\"none\", \"x\", \"y\", \"both\"]\n      }],\n      /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      \"snap-strictness\": [{\n        snap: [\"mandatory\", \"proximity\"]\n      }],\n      /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      touch: [{\n        touch: [\"auto\", \"none\", \"manipulation\"]\n      }],\n      /**\n       * Touch Action X\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-x\": [{\n        \"touch-pan\": [\"x\", \"left\", \"right\"]\n      }],\n      /**\n       * Touch Action Y\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-y\": [{\n        \"touch-pan\": [\"y\", \"up\", \"down\"]\n      }],\n      /**\n       * Touch Action Pinch Zoom\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-pz\": [\"touch-pinch-zoom\"],\n      /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */\n      select: [{\n        select: [\"none\", \"text\", \"all\", \"auto\"]\n      }],\n      /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */\n      \"will-change\": [{\n        \"will-change\": [\"auto\", \"scroll\", \"contents\", \"transform\", isArbitraryVariable, isArbitraryValue]\n      }],\n      // -----------\n      // --- SVG ---\n      // -----------\n      /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */\n      fill: [{\n        fill: [\"none\", ...scaleColor()]\n      }],\n      /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */\n      \"stroke-w\": [{\n        stroke: [isNumber, isArbitraryVariableLength, isArbitraryLength, isArbitraryNumber]\n      }],\n      /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */\n      stroke: [{\n        stroke: [\"none\", ...scaleColor()]\n      }],\n      // ---------------------\n      // --- Accessibility ---\n      // ---------------------\n      /**\n       * Forced Color Adjust\n       * @see https://tailwindcss.com/docs/forced-color-adjust\n       */\n      \"forced-color-adjust\": [{\n        \"forced-color-adjust\": [\"auto\", \"none\"]\n      }]\n    },\n    conflictingClassGroups: {\n      overflow: [\"overflow-x\", \"overflow-y\"],\n      overscroll: [\"overscroll-x\", \"overscroll-y\"],\n      inset: [\"inset-x\", \"inset-y\", \"start\", \"end\", \"top\", \"right\", \"bottom\", \"left\"],\n      \"inset-x\": [\"right\", \"left\"],\n      \"inset-y\": [\"top\", \"bottom\"],\n      flex: [\"basis\", \"grow\", \"shrink\"],\n      gap: [\"gap-x\", \"gap-y\"],\n      p: [\"px\", \"py\", \"ps\", \"pe\", \"pt\", \"pr\", \"pb\", \"pl\"],\n      px: [\"pr\", \"pl\"],\n      py: [\"pt\", \"pb\"],\n      m: [\"mx\", \"my\", \"ms\", \"me\", \"mt\", \"mr\", \"mb\", \"ml\"],\n      mx: [\"mr\", \"ml\"],\n      my: [\"mt\", \"mb\"],\n      size: [\"w\", \"h\"],\n      \"font-size\": [\"leading\"],\n      \"fvn-normal\": [\"fvn-ordinal\", \"fvn-slashed-zero\", \"fvn-figure\", \"fvn-spacing\", \"fvn-fraction\"],\n      \"fvn-ordinal\": [\"fvn-normal\"],\n      \"fvn-slashed-zero\": [\"fvn-normal\"],\n      \"fvn-figure\": [\"fvn-normal\"],\n      \"fvn-spacing\": [\"fvn-normal\"],\n      \"fvn-fraction\": [\"fvn-normal\"],\n      \"line-clamp\": [\"display\", \"overflow\"],\n      rounded: [\"rounded-s\", \"rounded-e\", \"rounded-t\", \"rounded-r\", \"rounded-b\", \"rounded-l\", \"rounded-ss\", \"rounded-se\", \"rounded-ee\", \"rounded-es\", \"rounded-tl\", \"rounded-tr\", \"rounded-br\", \"rounded-bl\"],\n      \"rounded-s\": [\"rounded-ss\", \"rounded-es\"],\n      \"rounded-e\": [\"rounded-se\", \"rounded-ee\"],\n      \"rounded-t\": [\"rounded-tl\", \"rounded-tr\"],\n      \"rounded-r\": [\"rounded-tr\", \"rounded-br\"],\n      \"rounded-b\": [\"rounded-br\", \"rounded-bl\"],\n      \"rounded-l\": [\"rounded-tl\", \"rounded-bl\"],\n      \"border-spacing\": [\"border-spacing-x\", \"border-spacing-y\"],\n      \"border-w\": [\"border-w-x\", \"border-w-y\", \"border-w-s\", \"border-w-e\", \"border-w-t\", \"border-w-r\", \"border-w-b\", \"border-w-l\"],\n      \"border-w-x\": [\"border-w-r\", \"border-w-l\"],\n      \"border-w-y\": [\"border-w-t\", \"border-w-b\"],\n      \"border-color\": [\"border-color-x\", \"border-color-y\", \"border-color-s\", \"border-color-e\", \"border-color-t\", \"border-color-r\", \"border-color-b\", \"border-color-l\"],\n      \"border-color-x\": [\"border-color-r\", \"border-color-l\"],\n      \"border-color-y\": [\"border-color-t\", \"border-color-b\"],\n      translate: [\"translate-x\", \"translate-y\", \"translate-none\"],\n      \"translate-none\": [\"translate\", \"translate-x\", \"translate-y\", \"translate-z\"],\n      \"scroll-m\": [\"scroll-mx\", \"scroll-my\", \"scroll-ms\", \"scroll-me\", \"scroll-mt\", \"scroll-mr\", \"scroll-mb\", \"scroll-ml\"],\n      \"scroll-mx\": [\"scroll-mr\", \"scroll-ml\"],\n      \"scroll-my\": [\"scroll-mt\", \"scroll-mb\"],\n      \"scroll-p\": [\"scroll-px\", \"scroll-py\", \"scroll-ps\", \"scroll-pe\", \"scroll-pt\", \"scroll-pr\", \"scroll-pb\", \"scroll-pl\"],\n      \"scroll-px\": [\"scroll-pr\", \"scroll-pl\"],\n      \"scroll-py\": [\"scroll-pt\", \"scroll-pb\"],\n      touch: [\"touch-x\", \"touch-y\", \"touch-pz\"],\n      \"touch-x\": [\"touch\"],\n      \"touch-y\": [\"touch\"],\n      \"touch-pz\": [\"touch\"]\n    },\n    conflictingClassGroupModifiers: {\n      \"font-size\": [\"leading\"]\n    },\n    orderSensitiveModifiers: [\"*\", \"**\", \"after\", \"backdrop\", \"before\", \"details-content\", \"file\", \"first-letter\", \"first-line\", \"marker\", \"placeholder\", \"selection\"]\n  };\n}, mergeConfigs = (baseConfig, {\n  cacheSize,\n  prefix,\n  experimentalParseClassName,\n  extend = {},\n  override = {}\n}) => (overrideProperty(baseConfig, \"cacheSize\", cacheSize), overrideProperty(baseConfig, \"prefix\", prefix), overrideProperty(baseConfig, \"experimentalParseClassName\", experimentalParseClassName), overrideConfigProperties(baseConfig.theme, override.theme), overrideConfigProperties(baseConfig.classGroups, override.classGroups), overrideConfigProperties(baseConfig.conflictingClassGroups, override.conflictingClassGroups), overrideConfigProperties(baseConfig.conflictingClassGroupModifiers, override.conflictingClassGroupModifiers), overrideProperty(baseConfig, \"orderSensitiveModifiers\", override.orderSensitiveModifiers), mergeConfigProperties(baseConfig.theme, extend.theme), mergeConfigProperties(baseConfig.classGroups, extend.classGroups), mergeConfigProperties(baseConfig.conflictingClassGroups, extend.conflictingClassGroups), mergeConfigProperties(baseConfig.conflictingClassGroupModifiers, extend.conflictingClassGroupModifiers), mergeArrayProperties(baseConfig, extend, \"orderSensitiveModifiers\"), baseConfig), overrideProperty = (baseObject, overrideKey, overrideValue) => {\n  overrideValue !== void 0 && (baseObject[overrideKey] = overrideValue);\n}, overrideConfigProperties = (baseObject, overrideObject) => {\n  if (overrideObject)\n    for (const key in overrideObject)\n      overrideProperty(baseObject, key, overrideObject[key]);\n}, mergeConfigProperties = (baseObject, mergeObject) => {\n  if (mergeObject)\n    for (const key in mergeObject)\n      mergeArrayProperties(baseObject, mergeObject, key);\n}, mergeArrayProperties = (baseObject, mergeObject, key) => {\n  const mergeValue = mergeObject[key];\n  mergeValue !== void 0 && (baseObject[key] = baseObject[key] ? baseObject[key].concat(mergeValue) : mergeValue);\n}, extendTailwindMerge = (configExtension, ...createConfig) => typeof configExtension == \"function\" ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(() => mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);\nfunction getElementAtPoint(x, y) {\n  return window.parent.document.elementsFromPoint(\n    x,\n    y\n  ).find(\n    (element) => !element.closest(\"svg\") && !element.closest(\"STAGEWISE-TOOLBAR\") && isElementAtPoint(element, x, y)\n  ) || window.parent.document.body;\n}\nconst isElementAtPoint = (element, clientX, clientY) => {\n  const boundingRect = element.getBoundingClientRect(), isInHorizontalBounds = clientX > boundingRect.left && clientX < boundingRect.left + boundingRect.width, isInVerticalBounds = clientY > boundingRect.top && clientY < boundingRect.top + boundingRect.height;\n  return isInHorizontalBounds && isInVerticalBounds;\n};\nvar HotkeyActions = /* @__PURE__ */ ((HotkeyActions2) => (HotkeyActions2[HotkeyActions2.ESC = 0] = \"ESC\", HotkeyActions2[HotkeyActions2.CTRL_ALT_C = 1] = \"CTRL_ALT_C\", HotkeyActions2))(HotkeyActions || {});\nconst hotkeyActionDefinitions = {\n  0: {\n    keyComboDefault: \"Esc\",\n    keyComboMac: \"esc\",\n    isEventMatching: (ev) => ev.code === \"Escape\"\n  },\n  1: {\n    keyComboDefault: \"Ctrl+Alt+C\",\n    keyComboMac: \"⌘+⌥+C\",\n    isEventMatching: (ev) => ev.code === \"KeyC\" && (ev.ctrlKey || ev.metaKey) && ev.altKey\n  }\n}, customTwMerge = extendTailwindMerge({\n  extend: {\n    classGroups: {\n      \"bg-image\": [\n        \"bg-gradient\",\n        \"bg-gradient-light-1\",\n        \"bg-gradient-light-2\",\n        \"bg-gradient-light-3\"\n      ]\n    }\n  }\n});\nfunction cn(...inputs) {\n  return customTwMerge(clsx(inputs));\n}\nconst generateId = (length = 16) => Math.random().toString(36).substring(2, length + 2);\nfunction Panel({\n  children,\n  alwaysFullHeight = !1\n}) {\n  return console.log(\"Hello from Panel!\"), /* @__PURE__ */ jsx(\n    \"section\",\n    {\n      className: cn(\n        \"flex max-h-full min-h-48 flex-col items-stretch justify-start rounded-2xl border border-border/30 bg-zinc-50/80 p-4 shadow-md backdrop-blur-md\",\n        alwaysFullHeight && \"h-full\"\n      ),\n      children\n    }\n  );\n}\nfunction PanelHeader({\n  title,\n  description\n}) {\n  return /* @__PURE__ */ jsxs(\"header\", { className: \"mb-3 flex flex-col gap-1 text-zinc-950\", children: [\n    title && /* @__PURE__ */ jsx(\"h3\", { className: \"font-semibold text-lg \", children: title }),\n    description && /* @__PURE__ */ jsx(\"p\", { className: \"font-medium text-zinc-600\", children: description })\n  ] });\n}\nfunction PanelContent({ children }) {\n  return /* @__PURE__ */ jsx(\"div\", { className: \"-mx-4 flex flex-col gap-2 overflow-y-auto border-border/30 border-t px-4 pt-4 text-zinc-950\", children });\n}\nfunction PanelFooter({ children }) {\n  return /* @__PURE__ */ jsx(\"footer\", { className: \"flex flex-row items-end justify-end gap-2 text-sm text-zinc-600\", children });\n}\nexport {\n  ConfigProvider as C,\n  HotkeyActions as H,\n  PluginProvider as P,\n  SRPCBridgeProvider as S,\n  VSCodeProvider as V,\n  useSRPCBridge as a,\n  usePlugins as b,\n  cn as c,\n  Panel as d,\n  PanelHeader as e,\n  PanelContent as f,\n  generateId as g,\n  hotkeyActionDefinitions as h,\n  getElementAtPoint as i,\n  clsx as j,\n  PanelFooter as k,\n  useVSCode as u\n};\n`, \"index.js\": `import React, { createContext, useState, createRef, useEffect, useCallback, useContext, useMemo, useRef, useLayoutEffect, forwardRef, Fragment, isValidElement, cloneElement, createElement, useId, StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { jsx, jsxs, Fragment as Fragment$1 } from \"react/jsx-runtime\";\nimport { u as useVSCode, a as useSRPCBridge, g as generateId, b as usePlugins, C as ConfigProvider, V as VSCodeProvider, S as SRPCBridgeProvider, P as PluginProvider, H as HotkeyActions, h as hotkeyActionDefinitions, c as cn, d as Panel, e as PanelHeader, f as PanelContent, i as getElementAtPoint } from \"panel-BpInY05d.js\";\nimport config from \"@stagewise/toolbar/config\";\nconst appStyle = '/*! tailwindcss v4.1.11 | MIT License | https://tailwindcss.com */@layer properties{@supports ((-webkit-hyphens:none) and (not (margin-trim:inline))) or ((-moz-orient:inline) and (not (color:rgb(from red r g b)))){*,:before,:after,::backdrop{--tw-scale-x:1;--tw-scale-y:1;--tw-scale-z:1;--tw-space-y-reverse:0;--tw-space-x-reverse:0;--tw-divide-y-reverse:0;--tw-border-style:solid;--tw-gradient-position:initial;--tw-gradient-from:#0000;--tw-gradient-via:#0000;--tw-gradient-to:#0000;--tw-gradient-stops:initial;--tw-gradient-via-stops:initial;--tw-gradient-from-position:0%;--tw-gradient-via-position:50%;--tw-gradient-to-position:100%;--tw-font-weight:initial;--tw-shadow:0 0 #0000;--tw-shadow-color:initial;--tw-shadow-alpha:100%;--tw-inset-shadow:0 0 #0000;--tw-inset-shadow-color:initial;--tw-inset-shadow-alpha:100%;--tw-ring-color:initial;--tw-ring-shadow:0 0 #0000;--tw-inset-ring-color:initial;--tw-inset-ring-shadow:0 0 #0000;--tw-ring-inset:initial;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-offset-shadow:0 0 #0000;--tw-outline-style:solid;--tw-blur:initial;--tw-brightness:initial;--tw-contrast:initial;--tw-grayscale:initial;--tw-hue-rotate:initial;--tw-invert:initial;--tw-opacity:initial;--tw-saturate:initial;--tw-sepia:initial;--tw-drop-shadow:initial;--tw-drop-shadow-color:initial;--tw-drop-shadow-alpha:100%;--tw-drop-shadow-size:initial;--tw-backdrop-blur:initial;--tw-backdrop-brightness:initial;--tw-backdrop-contrast:initial;--tw-backdrop-grayscale:initial;--tw-backdrop-hue-rotate:initial;--tw-backdrop-invert:initial;--tw-backdrop-opacity:initial;--tw-backdrop-saturate:initial;--tw-backdrop-sepia:initial;--tw-duration:initial;--tw-ease:initial}}}@layer theme{:root,:host{--font-sans:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--color-red-100:oklch(93.6% .032 17.717);--color-red-200:oklch(88.5% .062 18.334);--color-red-500:oklch(63.7% .237 25.331);--color-red-600:oklch(57.7% .245 27.325);--color-red-700:oklch(50.5% .213 27.518);--color-orange-50:oklch(98% .016 73.684);--color-orange-100:oklch(95.4% .038 75.164);--color-orange-200:oklch(90.1% .076 70.697);--color-orange-300:oklch(83.7% .128 66.29);--color-orange-500:oklch(70.5% .213 47.604);--color-orange-600:oklch(64.6% .222 41.116);--color-orange-700:oklch(55.3% .195 38.402);--color-orange-800:oklch(47% .157 37.304);--color-amber-50:oklch(98.7% .022 95.277);--color-amber-800:oklch(47.3% .137 46.201);--color-yellow-500:oklch(79.5% .184 86.047);--color-green-500:oklch(72.3% .219 149.579);--color-green-600:oklch(62.7% .194 149.214);--color-teal-500:oklch(70.4% .14 182.503);--color-sky-600:oklch(58.8% .158 241.966);--color-sky-700:oklch(50% .134 242.749);--color-blue-50:oklch(97% .014 254.604);--color-blue-100:oklch(93.2% .032 255.585);--color-blue-200:oklch(88.2% .059 254.128);--color-blue-300:oklch(80.9% .105 251.813);--color-blue-500:oklch(62.3% .214 259.815);--color-blue-600:oklch(54.6% .245 262.881);--color-blue-700:oklch(48.8% .243 264.376);--color-blue-800:oklch(42.4% .199 265.638);--color-indigo-700:oklch(45.7% .24 277.023);--color-indigo-950:oklch(25.7% .09 281.288);--color-violet-700:oklch(49.1% .27 292.581);--color-purple-500:oklch(62.7% .265 303.9);--color-fuchsia-700:oklch(51.8% .253 323.949);--color-pink-500:oklch(65.6% .241 354.308);--color-rose-600:oklch(58.6% .253 17.585);--color-zinc-50:oklch(98.5% 0 0);--color-zinc-100:oklch(96.7% .001 286.375);--color-zinc-300:oklch(87.1% .006 286.286);--color-zinc-400:oklch(70.5% .015 286.067);--color-zinc-500:oklch(55.2% .016 285.938);--color-zinc-600:oklch(44.2% .017 285.786);--color-zinc-700:oklch(37% .013 285.805);--color-zinc-900:oklch(21% .006 285.885);--color-zinc-950:oklch(14.1% .005 285.823);--color-black:#000;--color-white:#fff;--spacing:.25rem;--text-xs:.75rem;--text-xs--line-height:calc(1/.75);--text-sm:.875rem;--text-sm--line-height:calc(1.25/.875);--text-base:1rem;--text-base--line-height: 1.5 ;--text-lg:1.125rem;--text-lg--line-height:calc(1.75/1.125);--font-weight-normal:400;--font-weight-medium:500;--font-weight-semibold:600;--font-weight-bold:700;--radius-md:.375rem;--radius-lg:.5rem;--radius-2xl:1rem;--radius-3xl:1.5rem;--drop-shadow-xs:0 1px 1px #0000000d;--drop-shadow-md:0 3px 3px #0000001f;--drop-shadow-xl:0 9px 7px #0000001a;--ease-out:cubic-bezier(0,0,.2,1);--animate-spin:spin 1s linear infinite;--animate-pulse:pulse 2s cubic-bezier(.4,0,.6,1)infinite;--blur-md:12px;--default-transition-duration:.15s;--default-transition-timing-function:cubic-bezier(.4,0,.2,1);--default-font-family:var(--font-sans);--default-mono-font-family:var(--font-mono);--color-background:var(--color-white);--color-foreground:var(--color-zinc-950);--color-border:var(--color-zinc-500)}}@layer base{*,:after,:before,::backdrop{box-sizing:border-box;border:0 solid;margin:0;padding:0}::file-selector-button{box-sizing:border-box;border:0 solid;margin:0;padding:0}html,:host{-webkit-text-size-adjust:100%;-moz-tab-size:4;-o-tab-size:4;tab-size:4;line-height:1.5;font-family:var(--default-font-family,ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\");font-feature-settings:var(--default-font-feature-settings,normal);font-variation-settings:var(--default-font-variation-settings,normal);-webkit-tap-highlight-color:transparent}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:var(--default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace);font-feature-settings:var(--default-mono-font-feature-settings,normal);font-variation-settings:var(--default-mono-font-variation-settings,normal);font-size:1em}small{font-size:80%}sub,sup{vertical-align:baseline;font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}:-moz-focusring{outline:auto}progress{vertical-align:baseline}summary{display:list-item}ol,ul,menu{list-style:none}img,svg,video,canvas,audio,iframe,embed,object{vertical-align:middle;display:block}img,video{max-width:100%;height:auto}button,input,select,optgroup,textarea{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}::file-selector-button{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}:where(select:is([multiple],[size])) optgroup{font-weight:bolder}:where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}::file-selector-button{margin-inline-end:4px}::-moz-placeholder{opacity:1}::placeholder{opacity:1}@supports (not (-webkit-appearance:-apple-pay-button)) or (contain-intrinsic-size:1px){::-moz-placeholder{color:currentColor}::placeholder{color:currentColor}@supports (color:color-mix(in lab,red,red)){::-moz-placeholder{color:color-mix(in oklab,currentcolor 50%,transparent)}::placeholder{color:color-mix(in oklab,currentcolor 50%,transparent)}}}textarea{resize:vertical}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}::-webkit-datetime-edit{display:inline-flex}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-datetime-edit{padding-block:0}::-webkit-datetime-edit-year-field{padding-block:0}::-webkit-datetime-edit-month-field{padding-block:0}::-webkit-datetime-edit-day-field{padding-block:0}::-webkit-datetime-edit-hour-field{padding-block:0}::-webkit-datetime-edit-minute-field{padding-block:0}::-webkit-datetime-edit-second-field{padding-block:0}::-webkit-datetime-edit-millisecond-field{padding-block:0}::-webkit-datetime-edit-meridiem-field{padding-block:0}:-moz-ui-invalid{box-shadow:none}button,input:where([type=button],[type=reset],[type=submit]){-webkit-appearance:button;-moz-appearance:button;appearance:button}::file-selector-button{-webkit-appearance:button;-moz-appearance:button;appearance:button}::-webkit-inner-spin-button{height:auto}::-webkit-outer-spin-button{height:auto}[hidden]:where(:not([hidden=until-found])){display:none!important}*{min-width:0;min-height:0;position:relative}body{all:initial;color:var(--color-zinc-950);letter-spacing:normal!important;font-family:Inter,Noto Color Emoji,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,SF Compact,SF Pro,Helvetica Neue,sans-serif!important;font-weight:400!important;line-height:normal!important}@supports (font-variation-settings:normal){body{font-optical-sizing:auto!important;font-family:InterVariable,Noto Color Emoji,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,SF Compact,SF Pro,Helvetica Neue,sans-serif!important}}}@layer components{.chat-loading-gradient{background:linear-gradient(#f8fafccc,#f8fafccc) padding-box padding-box,linear-gradient(45deg,#8b5cf6,#06b6d4,#8b5cf6) 0 0/400% 400% border-box;border:2px solid #0000;animation:2s infinite gradient-animation}.chat-success-border{animation:2s ease-out blink-green-fade}.chat-error-border{animation:1s ease-out blink-red-fade}@keyframes blink-green-fade{0%,50%{box-shadow:0 0 0 2px #22c55eb3}to{box-shadow:0 0 0 2px #22c55e00}}@keyframes blink-red-fade{0%,50%{box-shadow:0 0 0 2px #ef4444}to{box-shadow:0 0 0 2px #ef444400}}}@layer utilities{.pointer-events-auto{pointer-events:auto}.pointer-events-none{pointer-events:none}.visible{visibility:visible}.absolute{position:absolute}.fixed{position:fixed}.relative{position:relative}.inset-0{inset:calc(var(--spacing)*0)}.inset-4{inset:calc(var(--spacing)*4)}.top-0{top:calc(var(--spacing)*0)}.top-0\\\\\\\\.5{top:calc(var(--spacing)*.5)}.top-1\\\\\\\\/2{top:50%}.top-\\\\\\\\[-20\\\\\\\\%\\\\\\\\]{top:-20%}.top-\\\\\\\\[25\\\\\\\\%\\\\\\\\]{top:25%}.right-0{right:calc(var(--spacing)*0)}.right-1\\\\\\\\/2{right:50%}.right-\\\\\\\\[100\\\\\\\\%\\\\\\\\]{right:100%}.bottom-0{bottom:calc(var(--spacing)*0)}.bottom-1\\\\\\\\/2{bottom:50%}.bottom-3{bottom:calc(var(--spacing)*3)}.left-0{left:calc(var(--spacing)*0)}.left-0\\\\\\\\.5{left:calc(var(--spacing)*.5)}.left-1\\\\\\\\/2{left:50%}.left-3{left:calc(var(--spacing)*3)}.left-\\\\\\\\[-10\\\\\\\\%\\\\\\\\]{left:-10%}.left-\\\\\\\\[25\\\\\\\\%\\\\\\\\]{left:25%}.left-\\\\\\\\[100\\\\\\\\%\\\\\\\\]{left:100%}.z-20{z-index:20}.z-50{z-index:50}.container{width:100%}@media (min-width:40rem){.container{max-width:40rem}}@media (min-width:48rem){.container{max-width:48rem}}@media (min-width:64rem){.container{max-width:64rem}}@media (min-width:80rem){.container{max-width:80rem}}@media (min-width:96rem){.container{max-width:96rem}}.-mx-4{margin-inline:calc(var(--spacing)*-4)}.my-2{margin-block:calc(var(--spacing)*2)}.mt-1{margin-top:calc(var(--spacing)*1)}.mt-2{margin-top:calc(var(--spacing)*2)}.mb-2{margin-bottom:calc(var(--spacing)*2)}.mb-3{margin-bottom:calc(var(--spacing)*3)}.block{display:block}.contents{display:contents}.flex{display:flex}.hidden{display:none}.inline{display:inline}.aspect-square{aspect-ratio:1}.size-0{width:calc(var(--spacing)*0);height:calc(var(--spacing)*0)}.size-1\\\\\\\\.5{width:calc(var(--spacing)*1.5);height:calc(var(--spacing)*1.5)}.size-2\\\\\\\\/3{width:66.6667%;height:66.6667%}.size-3{width:calc(var(--spacing)*3);height:calc(var(--spacing)*3)}.size-4{width:calc(var(--spacing)*4);height:calc(var(--spacing)*4)}.size-4\\\\\\\\.5{width:calc(var(--spacing)*4.5);height:calc(var(--spacing)*4.5)}.size-5{width:calc(var(--spacing)*5);height:calc(var(--spacing)*5)}.size-6{width:calc(var(--spacing)*6);height:calc(var(--spacing)*6)}.size-8{width:calc(var(--spacing)*8);height:calc(var(--spacing)*8)}.size-9{width:calc(var(--spacing)*9);height:calc(var(--spacing)*9)}.size-9\\\\\\\\/12{width:75%;height:75%}.size-12{width:calc(var(--spacing)*12);height:calc(var(--spacing)*12)}.size-\\\\\\\\[120\\\\\\\\%\\\\\\\\]{width:120%;height:120%}.size-full{width:100%;height:100%}.h-0{height:calc(var(--spacing)*0)}.h-3{height:calc(var(--spacing)*3)}.h-5{height:calc(var(--spacing)*5)}.h-8{height:calc(var(--spacing)*8)}.h-9\\\\\\\\.5{height:calc(var(--spacing)*9.5)}.h-12{height:calc(var(--spacing)*12)}.h-16{height:calc(var(--spacing)*16)}.h-24{height:calc(var(--spacing)*24)}.h-\\\\\\\\[50\\\\\\\\%\\\\\\\\]{height:50%}.h-\\\\\\\\[120\\\\\\\\%\\\\\\\\]{height:120%}.h-\\\\\\\\[calc\\\\\\\\(100vh-32px\\\\\\\\)\\\\\\\\]{height:calc(100vh - 32px)}.h-\\\\\\\\[calc-size\\\\\\\\(auto\\\\\\\\)\\\\\\\\]{height:calc-size(auto)}.h-\\\\\\\\[calc-size\\\\\\\\(auto\\\\\\\\,size\\\\\\\\)\\\\\\\\]{height:calc-size(auto,size)}.h-auto{height:auto}.h-full{height:100%}.h-screen{height:100vh}.max-h-full{max-height:100%}.min-h-0{min-height:calc(var(--spacing)*0)}.min-h-48{min-height:calc(var(--spacing)*48)}.w-8{width:calc(var(--spacing)*8)}.w-9\\\\\\\\.5{width:calc(var(--spacing)*9.5)}.w-96{width:calc(var(--spacing)*96)}.w-\\\\\\\\[50\\\\\\\\%\\\\\\\\]{width:50%}.w-auto{width:auto}.w-fit{width:-moz-fit-content;width:fit-content}.w-full{width:100%}.w-max{width:-moz-max-content;width:max-content}.w-screen{width:100vw}.max-w-8{max-width:calc(var(--spacing)*8)}.max-w-90{max-width:calc(var(--spacing)*90)}.max-w-\\\\\\\\[40vw\\\\\\\\]{max-width:40vw}.max-w-full{max-width:100%}.min-w-0{min-width:calc(var(--spacing)*0)}.min-w-3{min-width:calc(var(--spacing)*3)}.min-w-24{min-width:calc(var(--spacing)*24)}.flex-1{flex:1}.flex-shrink-0,.shrink-0{flex-shrink:0}.origin-bottom{transform-origin:bottom}.origin-bottom-left{transform-origin:0 100%}.origin-bottom-right{transform-origin:100% 100%}.origin-center{transform-origin:50%}.origin-top{transform-origin:top}.origin-top-left{transform-origin:0 0}.origin-top-right{transform-origin:100% 0}.scale-25{--tw-scale-x:25%;--tw-scale-y:25%;--tw-scale-z:25%;scale:var(--tw-scale-x)var(--tw-scale-y)}.scale-50{--tw-scale-x:50%;--tw-scale-y:50%;--tw-scale-z:50%;scale:var(--tw-scale-x)var(--tw-scale-y)}.scale-100{--tw-scale-x:100%;--tw-scale-y:100%;--tw-scale-z:100%;scale:var(--tw-scale-x)var(--tw-scale-y)}.animate-pulse{animation:var(--animate-pulse)}.animate-spin{animation:var(--animate-spin)}.cursor-copy{cursor:copy}.cursor-not-allowed{cursor:not-allowed}.cursor-pointer{cursor:pointer}.resize{resize:both}.resize-none{resize:none}.snap-start{scroll-snap-align:start}.list-inside{list-style-position:inside}.list-decimal{list-style-type:decimal}.flex-col{flex-direction:column}.flex-col-reverse{flex-direction:column-reverse}.flex-row{flex-direction:row}.flex-wrap{flex-wrap:wrap}.items-center{align-items:center}.items-end{align-items:flex-end}.items-start{align-items:flex-start}.items-stretch{align-items:stretch}.justify-between{justify-content:space-between}.justify-center{justify-content:center}.justify-end{justify-content:flex-end}.justify-start{justify-content:flex-start}.gap-0\\\\\\\\.5{gap:calc(var(--spacing)*.5)}.gap-1{gap:calc(var(--spacing)*1)}.gap-2{gap:calc(var(--spacing)*2)}.gap-3{gap:calc(var(--spacing)*3)}:where(.space-y-1>:not(:last-child)){--tw-space-y-reverse:0;margin-block-start:calc(calc(var(--spacing)*1)*var(--tw-space-y-reverse));margin-block-end:calc(calc(var(--spacing)*1)*calc(1 - var(--tw-space-y-reverse)))}:where(.space-y-2>:not(:last-child)){--tw-space-y-reverse:0;margin-block-start:calc(calc(var(--spacing)*2)*var(--tw-space-y-reverse));margin-block-end:calc(calc(var(--spacing)*2)*calc(1 - var(--tw-space-y-reverse)))}:where(.space-y-3>:not(:last-child)){--tw-space-y-reverse:0;margin-block-start:calc(calc(var(--spacing)*3)*var(--tw-space-y-reverse));margin-block-end:calc(calc(var(--spacing)*3)*calc(1 - var(--tw-space-y-reverse)))}:where(.space-y-4>:not(:last-child)){--tw-space-y-reverse:0;margin-block-start:calc(calc(var(--spacing)*4)*var(--tw-space-y-reverse));margin-block-end:calc(calc(var(--spacing)*4)*calc(1 - var(--tw-space-y-reverse)))}:where(.space-x-2>:not(:last-child)){--tw-space-x-reverse:0;margin-inline-start:calc(calc(var(--spacing)*2)*var(--tw-space-x-reverse));margin-inline-end:calc(calc(var(--spacing)*2)*calc(1 - var(--tw-space-x-reverse)))}:where(.divide-y>:not(:last-child)){--tw-divide-y-reverse:0;border-bottom-style:var(--tw-border-style);border-top-style:var(--tw-border-style);border-top-width:calc(1px*var(--tw-divide-y-reverse));border-bottom-width:calc(1px*calc(1 - var(--tw-divide-y-reverse)))}:where(.divide-y-reverse>:not(:last-child)){--tw-divide-y-reverse:1}:where(.divide-blue-200>:not(:last-child)){border-color:var(--color-blue-200)}:where(.divide-border\\\\\\\\/20>:not(:last-child)){border-color:#71717b33}@supports (color:color-mix(in lab,red,red)){:where(.divide-border\\\\\\\\/20>:not(:last-child)){border-color:color-mix(in oklab,var(--color-border)20%,transparent)}}:where(.divide-orange-200>:not(:last-child)){border-color:var(--color-orange-200)}.truncate{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.overflow-hidden{overflow:hidden}.overflow-visible{overflow:visible}.overflow-y-auto{overflow-y:auto}.rounded{border-radius:.25rem}.rounded-2xl{border-radius:var(--radius-2xl)}.rounded-full{border-radius:3.40282e38px}.rounded-lg{border-radius:var(--radius-lg)}.rounded-md{border-radius:var(--radius-md)}.rounded-t-3xl{border-top-left-radius:var(--radius-3xl);border-top-right-radius:var(--radius-3xl)}.rounded-t-lg{border-top-left-radius:var(--radius-lg);border-top-right-radius:var(--radius-lg)}.rounded-b-3xl{border-bottom-right-radius:var(--radius-3xl);border-bottom-left-radius:var(--radius-3xl)}.rounded-b-lg{border-bottom-right-radius:var(--radius-lg);border-bottom-left-radius:var(--radius-lg)}.border{border-style:var(--tw-border-style);border-width:1px}.border-2{border-style:var(--tw-border-style);border-width:2px}.border-t{border-top-style:var(--tw-border-style);border-top-width:1px}.border-solid{--tw-border-style:solid;border-style:solid}.border-blue-200{border-color:var(--color-blue-200)}.border-blue-300{border-color:var(--color-blue-300)}.border-blue-500{border-color:var(--color-blue-500)}.border-blue-600\\\\\\\\/80{border-color:#155dfccc}@supports (color:color-mix(in lab,red,red)){.border-blue-600\\\\\\\\/80{border-color:color-mix(in oklab,var(--color-blue-600)80%,transparent)}}.border-border\\\\\\\\/30{border-color:#71717b4d}@supports (color:color-mix(in lab,red,red)){.border-border\\\\\\\\/30{border-color:color-mix(in oklab,var(--color-border)30%,transparent)}}.border-green-500{border-color:var(--color-green-500)}.border-green-600\\\\\\\\/80{border-color:#00a544cc}@supports (color:color-mix(in lab,red,red)){.border-green-600\\\\\\\\/80{border-color:color-mix(in oklab,var(--color-green-600)80%,transparent)}}.border-orange-200{border-color:var(--color-orange-200)}.border-orange-300{border-color:var(--color-orange-300)}.border-orange-500{border-color:var(--color-orange-500)}.border-pink-500{border-color:var(--color-pink-500)}.border-purple-500{border-color:var(--color-purple-500)}.border-red-200{border-color:var(--color-red-200)}.border-red-500{border-color:var(--color-red-500)}.border-transparent{border-color:#0000}.border-yellow-500{border-color:var(--color-yellow-500)}.border-zinc-300{border-color:var(--color-zinc-300)}.border-zinc-500{border-color:var(--color-zinc-500)}.bg-amber-50{background-color:var(--color-amber-50)}.bg-background\\\\\\\\/60{background-color:#fff9}@supports (color:color-mix(in lab,red,red)){.bg-background\\\\\\\\/60{background-color:color-mix(in oklab,var(--color-background)60%,transparent)}}.bg-blue-50{background-color:var(--color-blue-50)}.bg-blue-50\\\\\\\\/90{background-color:#eff6ffe6}@supports (color:color-mix(in lab,red,red)){.bg-blue-50\\\\\\\\/90{background-color:color-mix(in oklab,var(--color-blue-50)90%,transparent)}}.bg-blue-100\\\\\\\\/80{background-color:#dbeafecc}@supports (color:color-mix(in lab,red,red)){.bg-blue-100\\\\\\\\/80{background-color:color-mix(in oklab,var(--color-blue-100)80%,transparent)}}.bg-blue-500{background-color:var(--color-blue-500)}.bg-blue-600{background-color:var(--color-blue-600)}.bg-blue-600\\\\\\\\/20{background-color:#155dfc33}@supports (color:color-mix(in lab,red,red)){.bg-blue-600\\\\\\\\/20{background-color:color-mix(in oklab,var(--color-blue-600)20%,transparent)}}.bg-green-500{background-color:var(--color-green-500)}.bg-green-600\\\\\\\\/5{background-color:#00a5440d}@supports (color:color-mix(in lab,red,red)){.bg-green-600\\\\\\\\/5{background-color:color-mix(in oklab,var(--color-green-600)5%,transparent)}}.bg-orange-50\\\\\\\\/90{background-color:#fff7ede6}@supports (color:color-mix(in lab,red,red)){.bg-orange-50\\\\\\\\/90{background-color:color-mix(in oklab,var(--color-orange-50)90%,transparent)}}.bg-orange-100\\\\\\\\/80{background-color:#ffedd5cc}@supports (color:color-mix(in lab,red,red)){.bg-orange-100\\\\\\\\/80{background-color:color-mix(in oklab,var(--color-orange-100)80%,transparent)}}.bg-orange-500{background-color:var(--color-orange-500)}.bg-orange-600{background-color:var(--color-orange-600)}.bg-pink-500{background-color:var(--color-pink-500)}.bg-purple-500{background-color:var(--color-purple-500)}.bg-red-100{background-color:var(--color-red-100)}.bg-red-500{background-color:var(--color-red-500)}.bg-rose-600{background-color:var(--color-rose-600)}.bg-transparent{background-color:#0000}.bg-white{background-color:var(--color-white)}.bg-white\\\\\\\\/40{background-color:#fff6}@supports (color:color-mix(in lab,red,red)){.bg-white\\\\\\\\/40{background-color:color-mix(in oklab,var(--color-white)40%,transparent)}}.bg-white\\\\\\\\/80{background-color:#fffc}@supports (color:color-mix(in lab,red,red)){.bg-white\\\\\\\\/80{background-color:color-mix(in oklab,var(--color-white)80%,transparent)}}.bg-white\\\\\\\\/90{background-color:#ffffffe6}@supports (color:color-mix(in lab,red,red)){.bg-white\\\\\\\\/90{background-color:color-mix(in oklab,var(--color-white)90%,transparent)}}.bg-yellow-500{background-color:var(--color-yellow-500)}.bg-zinc-50\\\\\\\\/80{background-color:#fafafacc}@supports (color:color-mix(in lab,red,red)){.bg-zinc-50\\\\\\\\/80{background-color:color-mix(in oklab,var(--color-zinc-50)80%,transparent)}}.bg-zinc-300{background-color:var(--color-zinc-300)}.bg-zinc-500{background-color:var(--color-zinc-500)}.bg-zinc-500\\\\\\\\/10{background-color:#71717b1a}@supports (color:color-mix(in lab,red,red)){.bg-zinc-500\\\\\\\\/10{background-color:color-mix(in oklab,var(--color-zinc-500)10%,transparent)}}.bg-zinc-500\\\\\\\\/40{background-color:#71717b66}@supports (color:color-mix(in lab,red,red)){.bg-zinc-500\\\\\\\\/40{background-color:color-mix(in oklab,var(--color-zinc-500)40%,transparent)}}.bg-zinc-700\\\\\\\\/80{background-color:#3f3f46cc}@supports (color:color-mix(in lab,red,red)){.bg-zinc-700\\\\\\\\/80{background-color:color-mix(in oklab,var(--color-zinc-700)80%,transparent)}}.bg-gradient-to-tr{--tw-gradient-position:to top right in oklab;background-image:linear-gradient(var(--tw-gradient-stops))}.bg-\\\\\\\\[radial-gradient\\\\\\\\(circle\\\\\\\\,rgba\\\\\\\\(55\\\\\\\\,48\\\\\\\\,163\\\\\\\\,0\\\\\\\\)_55\\\\\\\\%\\\\\\\\,rgba\\\\\\\\(55\\\\\\\\,48\\\\\\\\,163\\\\\\\\,0\\\\\\\\.35\\\\\\\\)_73\\\\\\\\%\\\\\\\\)\\\\\\\\]{background-image:radial-gradient(circle,#3730a300 55%,#3730a359 73%)}.bg-\\\\\\\\[radial-gradient\\\\\\\\(circle\\\\\\\\,rgba\\\\\\\\(219\\\\\\\\,39\\\\\\\\,119\\\\\\\\,0\\\\\\\\.2\\\\\\\\)_0\\\\\\\\%\\\\\\\\,rgba\\\\\\\\(219\\\\\\\\,39\\\\\\\\,119\\\\\\\\,0\\\\\\\\)_100\\\\\\\\%\\\\\\\\)\\\\\\\\]{background-image:radial-gradient(circle,#db277733,#db277700)}.bg-\\\\\\\\[radial-gradient\\\\\\\\(circle\\\\\\\\,rgba\\\\\\\\(255\\\\\\\\,255\\\\\\\\,255\\\\\\\\,0\\\\\\\\)_60\\\\\\\\%\\\\\\\\,rgba\\\\\\\\(255\\\\\\\\,255\\\\\\\\,255\\\\\\\\,0\\\\\\\\.2\\\\\\\\)_70\\\\\\\\%\\\\\\\\)\\\\\\\\]{background-image:radial-gradient(circle,#fff0 60%,#fff3 70%)}.from-blue-600{--tw-gradient-from:var(--color-blue-600);--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))}.from-indigo-700{--tw-gradient-from:var(--color-indigo-700);--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))}.from-orange-600{--tw-gradient-from:var(--color-orange-600);--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))}.from-sky-700{--tw-gradient-from:var(--color-sky-700);--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))}.via-blue-500{--tw-gradient-via:var(--color-blue-500);--tw-gradient-via-stops:var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-via)var(--tw-gradient-via-position),var(--tw-gradient-to)var(--tw-gradient-to-position);--tw-gradient-stops:var(--tw-gradient-via-stops)}.to-fuchsia-700{--tw-gradient-to:var(--color-fuchsia-700);--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))}.to-red-600{--tw-gradient-to:var(--color-red-600);--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))}.to-sky-600{--tw-gradient-to:var(--color-sky-600);--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))}.to-teal-500{--tw-gradient-to:var(--color-teal-500);--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))}.fill-current{fill:currentColor}.fill-white{fill:var(--color-white)}.fill-zinc-500\\\\\\\\/50{fill:#71717b80}@supports (color:color-mix(in lab,red,red)){.fill-zinc-500\\\\\\\\/50{fill:color-mix(in oklab,var(--color-zinc-500)50%,transparent)}}.fill-zinc-950{fill:var(--color-zinc-950)}.stroke-black\\\\\\\\/30{stroke:#0000004d}@supports (color:color-mix(in lab,red,red)){.stroke-black\\\\\\\\/30{stroke:color-mix(in oklab,var(--color-black)30%,transparent)}}.stroke-none{stroke:none}.stroke-white{stroke:var(--color-white)}.stroke-zinc-950{stroke:var(--color-zinc-950)}.stroke-1{stroke-width:1px}.p-0\\\\\\\\.5{padding:calc(var(--spacing)*.5)}.p-1{padding:calc(var(--spacing)*1)}.p-2{padding:calc(var(--spacing)*2)}.p-3{padding:calc(var(--spacing)*3)}.p-4{padding:calc(var(--spacing)*4)}.px-0\\\\\\\\.5{padding-inline:calc(var(--spacing)*.5)}.px-1{padding-inline:calc(var(--spacing)*1)}.px-2{padding-inline:calc(var(--spacing)*2)}.px-3{padding-inline:calc(var(--spacing)*3)}.px-4{padding-inline:calc(var(--spacing)*4)}.py-0{padding-block:calc(var(--spacing)*0)}.py-0\\\\\\\\.5{padding-block:calc(var(--spacing)*.5)}.py-2{padding-block:calc(var(--spacing)*2)}.pt-2{padding-top:calc(var(--spacing)*2)}.pt-4{padding-top:calc(var(--spacing)*4)}.pr-6{padding-right:calc(var(--spacing)*6)}.pb-4{padding-bottom:calc(var(--spacing)*4)}.pl-2{padding-left:calc(var(--spacing)*2)}.text-base{font-size:var(--text-base);line-height:var(--tw-leading,var(--text-base--line-height))}.text-lg{font-size:var(--text-lg);line-height:var(--tw-leading,var(--text-lg--line-height))}.text-sm{font-size:var(--text-sm);line-height:var(--tw-leading,var(--text-sm--line-height))}.text-xs{font-size:var(--text-xs);line-height:var(--tw-leading,var(--text-xs--line-height))}.text-\\\\\\\\[0\\\\\\\\.5em\\\\\\\\]{font-size:.5em}.font-bold{--tw-font-weight:var(--font-weight-bold);font-weight:var(--font-weight-bold)}.font-medium{--tw-font-weight:var(--font-weight-medium);font-weight:var(--font-weight-medium)}.font-normal{--tw-font-weight:var(--font-weight-normal);font-weight:var(--font-weight-normal)}.font-semibold{--tw-font-weight:var(--font-weight-semibold);font-weight:var(--font-weight-semibold)}.text-amber-800{color:var(--color-amber-800)}.text-blue-500{color:var(--color-blue-500)}.text-blue-600{color:var(--color-blue-600)}.text-blue-700{color:var(--color-blue-700)}.text-blue-800{color:var(--color-blue-800)}.text-foreground{color:var(--color-foreground)}.text-indigo-700{color:var(--color-indigo-700)}.text-orange-600{color:var(--color-orange-600)}.text-orange-700{color:var(--color-orange-700)}.text-orange-800{color:var(--color-orange-800)}.text-red-600{color:var(--color-red-600)}.text-red-700{color:var(--color-red-700)}.text-transparent{color:#0000}.text-violet-700{color:var(--color-violet-700)}.text-white{color:var(--color-white)}.text-zinc-500{color:var(--color-zinc-500)}.text-zinc-600{color:var(--color-zinc-600)}.text-zinc-700{color:var(--color-zinc-700)}.text-zinc-950{color:var(--color-zinc-950)}.opacity-0{opacity:0}.opacity-20{opacity:.2}.opacity-30{opacity:.3}.opacity-80{opacity:.8}.opacity-100{opacity:1}.shadow-lg{--tw-shadow:0 10px 15px -3px var(--tw-shadow-color,#0000001a),0 4px 6px -4px var(--tw-shadow-color,#0000001a);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.shadow-md{--tw-shadow:0 4px 6px -1px var(--tw-shadow-color,#0000001a),0 2px 4px -2px var(--tw-shadow-color,#0000001a);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.shadow-sm{--tw-shadow:0 1px 3px 0 var(--tw-shadow-color,#0000001a),0 1px 2px -1px var(--tw-shadow-color,#0000001a);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.ring{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(1px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.shadow-black\\\\\\\\/50{--tw-shadow-color:#00000080}@supports (color:color-mix(in lab,red,red)){.shadow-black\\\\\\\\/50{--tw-shadow-color:color-mix(in oklab,color-mix(in oklab,var(--color-black)50%,transparent)var(--tw-shadow-alpha),transparent)}}.ring-transparent{--tw-ring-color:transparent}.ring-zinc-950\\\\\\\\/20{--tw-ring-color:#09090b33}@supports (color:color-mix(in lab,red,red)){.ring-zinc-950\\\\\\\\/20{--tw-ring-color:color-mix(in oklab,var(--color-zinc-950)20%,transparent)}}.outline{outline-style:var(--tw-outline-style);outline-width:1px}.blur{--tw-blur:blur(8px);filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.blur-md{--tw-blur:blur(var(--blur-md));filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.blur-none{--tw-blur: ;filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.drop-shadow-md{--tw-drop-shadow-size:drop-shadow(0 3px 3px var(--tw-drop-shadow-color,#0000001f));--tw-drop-shadow:drop-shadow(var(--drop-shadow-md));filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.drop-shadow-xl{--tw-drop-shadow-size:drop-shadow(0 9px 7px var(--tw-drop-shadow-color,#0000001a));--tw-drop-shadow:drop-shadow(var(--drop-shadow-xl));filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.drop-shadow-xs{--tw-drop-shadow-size:drop-shadow(0 1px 1px var(--tw-drop-shadow-color,#0000000d));--tw-drop-shadow:drop-shadow(var(--drop-shadow-xs));filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.drop-shadow-black{--tw-drop-shadow-color:#000}@supports (color:color-mix(in lab,red,red)){.drop-shadow-black{--tw-drop-shadow-color:color-mix(in oklab,var(--color-black)var(--tw-drop-shadow-alpha),transparent)}}.drop-shadow-black{--tw-drop-shadow:var(--tw-drop-shadow-size)}.drop-shadow-indigo-950{--tw-drop-shadow-color:oklch(25.7% .09 281.288)}@supports (color:color-mix(in lab,red,red)){.drop-shadow-indigo-950{--tw-drop-shadow-color:color-mix(in oklab,var(--color-indigo-950)var(--tw-drop-shadow-alpha),transparent)}}.drop-shadow-indigo-950{--tw-drop-shadow:var(--tw-drop-shadow-size)}.backdrop-blur{--tw-backdrop-blur:blur(8px);-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,);backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)}.backdrop-blur-md{--tw-backdrop-blur:blur(var(--blur-md));-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,);backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)}.backdrop-saturate-150{--tw-backdrop-saturate:saturate(150%);-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,);backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)}.transition{transition-property:color,background-color,border-color,outline-color,text-decoration-color,fill,stroke,--tw-gradient-from,--tw-gradient-via,--tw-gradient-to,opacity,box-shadow,transform,translate,scale,rotate,filter,-webkit-backdrop-filter,backdrop-filter,display,visibility,content-visibility,overlay,pointer-events;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function));transition-duration:var(--tw-duration,var(--default-transition-duration))}.transition-all{transition-property:all;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function));transition-duration:var(--tw-duration,var(--default-transition-duration))}.transition-colors{transition-property:color,background-color,border-color,outline-color,text-decoration-color,fill,stroke,--tw-gradient-from,--tw-gradient-via,--tw-gradient-to;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function));transition-duration:var(--tw-duration,var(--default-transition-duration))}.duration-0{--tw-duration:0s;transition-duration:0s}.duration-100{--tw-duration:.1s;transition-duration:.1s}.duration-150{--tw-duration:.15s;transition-duration:.15s}.duration-300{--tw-duration:.3s;transition-duration:.3s}.duration-500{--tw-duration:.5s;transition-duration:.5s}.ease-out{--tw-ease:var(--ease-out);transition-timing-function:var(--ease-out)}.outline-none{--tw-outline-style:none;outline-style:none}.select-none{-webkit-user-select:none;-moz-user-select:none;user-select:none}:is(.\\\\\\\\*\\\\\\\\:size-full>*){width:100%;height:100%}.placeholder\\\\\\\\:text-zinc-400::-moz-placeholder{color:var(--color-zinc-400)}.placeholder\\\\\\\\:text-zinc-400::placeholder{color:var(--color-zinc-400)}.placeholder\\\\\\\\:text-zinc-950\\\\\\\\/50::-moz-placeholder{color:#09090b80}.placeholder\\\\\\\\:text-zinc-950\\\\\\\\/50::placeholder{color:#09090b80}@supports (color:color-mix(in lab,red,red)){.placeholder\\\\\\\\:text-zinc-950\\\\\\\\/50::-moz-placeholder{color:color-mix(in oklab,var(--color-zinc-950)50%,transparent)}.placeholder\\\\\\\\:text-zinc-950\\\\\\\\/50::placeholder{color:color-mix(in oklab,var(--color-zinc-950)50%,transparent)}}.placeholder\\\\\\\\:text-zinc-950\\\\\\\\/70::-moz-placeholder{color:#09090bb3}.placeholder\\\\\\\\:text-zinc-950\\\\\\\\/70::placeholder{color:#09090bb3}@supports (color:color-mix(in lab,red,red)){.placeholder\\\\\\\\:text-zinc-950\\\\\\\\/70::-moz-placeholder{color:color-mix(in oklab,var(--color-zinc-950)70%,transparent)}.placeholder\\\\\\\\:text-zinc-950\\\\\\\\/70::placeholder{color:color-mix(in oklab,var(--color-zinc-950)70%,transparent)}}@media (hover:hover){.hover\\\\\\\\:border-red-600\\\\\\\\/80:hover{border-color:#e40014cc}@supports (color:color-mix(in lab,red,red)){.hover\\\\\\\\:border-red-600\\\\\\\\/80:hover{border-color:color-mix(in oklab,var(--color-red-600)80%,transparent)}}.hover\\\\\\\\:bg-blue-200\\\\\\\\/80:hover{background-color:#bedbffcc}@supports (color:color-mix(in lab,red,red)){.hover\\\\\\\\:bg-blue-200\\\\\\\\/80:hover{background-color:color-mix(in oklab,var(--color-blue-200)80%,transparent)}}.hover\\\\\\\\:bg-orange-200:hover{background-color:var(--color-orange-200)}.hover\\\\\\\\:bg-orange-700:hover{background-color:var(--color-orange-700)}.hover\\\\\\\\:bg-red-600\\\\\\\\/20:hover{background-color:#e4001433}@supports (color:color-mix(in lab,red,red)){.hover\\\\\\\\:bg-red-600\\\\\\\\/20:hover{background-color:color-mix(in oklab,var(--color-red-600)20%,transparent)}}.hover\\\\\\\\:bg-zinc-500\\\\\\\\/20:hover{background-color:#71717b33}@supports (color:color-mix(in lab,red,red)){.hover\\\\\\\\:bg-zinc-500\\\\\\\\/20:hover{background-color:color-mix(in oklab,var(--color-zinc-500)20%,transparent)}}.hover\\\\\\\\:bg-zinc-950\\\\\\\\/5:hover{background-color:#09090b0d}@supports (color:color-mix(in lab,red,red)){.hover\\\\\\\\:bg-zinc-950\\\\\\\\/5:hover{background-color:color-mix(in oklab,var(--color-zinc-950)5%,transparent)}}.hover\\\\\\\\:bg-zinc-950\\\\\\\\/10:hover{background-color:#09090b1a}@supports (color:color-mix(in lab,red,red)){.hover\\\\\\\\:bg-zinc-950\\\\\\\\/10:hover{background-color:color-mix(in oklab,var(--color-zinc-950)10%,transparent)}}.hover\\\\\\\\:text-orange-800:hover{color:var(--color-orange-800)}.hover\\\\\\\\:text-white:hover{color:var(--color-white)}.hover\\\\\\\\:underline:hover{text-decoration-line:underline}.hover\\\\\\\\:opacity-100:hover{opacity:1}.hover\\\\\\\\:shadow-lg:hover{--tw-shadow:0 10px 15px -3px var(--tw-shadow-color,#0000001a),0 4px 6px -4px var(--tw-shadow-color,#0000001a);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}}.focus\\\\\\\\:border-blue-500:focus{border-color:var(--color-blue-500)}.focus\\\\\\\\:border-zinc-500:focus{border-color:var(--color-zinc-500)}.focus\\\\\\\\:text-zinc-900:focus{color:var(--color-zinc-900)}.focus\\\\\\\\:outline-none:focus{--tw-outline-style:none;outline-style:none}.disabled\\\\\\\\:opacity-50:disabled{opacity:.5}.data-focus\\\\\\\\:outline-none[data-focus]{--tw-outline-style:none;outline-style:none}.animate-shake{animation:.5s ease-in-out 2 shake}}:root{color-scheme:normal;font-feature-settings:\"liga\" 1,\"calt\" 1;background-color:#0000}body{background-color:#0000}@keyframes shake{0%,to{transform:translate(0)}10%,30%,50%,70%,90%{transform:translate(-2px)}20%,40%,60%,80%{transform:translate(2px)}}@keyframes gradient-animation{0%{background-position:0%}50%{background-position:100%}to{background-position:0%}}#headlessui-portal-root{z-index:50;width:100vw;height:100vh;position:fixed}#headlessui-portal-root>*{pointer-events:auto}@property --tw-scale-x{syntax:\"*\";inherits:false;initial-value:1}@property --tw-scale-y{syntax:\"*\";inherits:false;initial-value:1}@property --tw-scale-z{syntax:\"*\";inherits:false;initial-value:1}@property --tw-space-y-reverse{syntax:\"*\";inherits:false;initial-value:0}@property --tw-space-x-reverse{syntax:\"*\";inherits:false;initial-value:0}@property --tw-divide-y-reverse{syntax:\"*\";inherits:false;initial-value:0}@property --tw-border-style{syntax:\"*\";inherits:false;initial-value:solid}@property --tw-gradient-position{syntax:\"*\";inherits:false}@property --tw-gradient-from{syntax:\"<color>\";inherits:false;initial-value:#0000}@property --tw-gradient-via{syntax:\"<color>\";inherits:false;initial-value:#0000}@property --tw-gradient-to{syntax:\"<color>\";inherits:false;initial-value:#0000}@property --tw-gradient-stops{syntax:\"*\";inherits:false}@property --tw-gradient-via-stops{syntax:\"*\";inherits:false}@property --tw-gradient-from-position{syntax:\"<length-percentage>\";inherits:false;initial-value:0%}@property --tw-gradient-via-position{syntax:\"<length-percentage>\";inherits:false;initial-value:50%}@property --tw-gradient-to-position{syntax:\"<length-percentage>\";inherits:false;initial-value:100%}@property --tw-font-weight{syntax:\"*\";inherits:false}@property --tw-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-shadow-color{syntax:\"*\";inherits:false}@property --tw-shadow-alpha{syntax:\"<percentage>\";inherits:false;initial-value:100%}@property --tw-inset-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-inset-shadow-color{syntax:\"*\";inherits:false}@property --tw-inset-shadow-alpha{syntax:\"<percentage>\";inherits:false;initial-value:100%}@property --tw-ring-color{syntax:\"*\";inherits:false}@property --tw-ring-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-inset-ring-color{syntax:\"*\";inherits:false}@property --tw-inset-ring-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-ring-inset{syntax:\"*\";inherits:false}@property --tw-ring-offset-width{syntax:\"<length>\";inherits:false;initial-value:0}@property --tw-ring-offset-color{syntax:\"*\";inherits:false;initial-value:#fff}@property --tw-ring-offset-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-outline-style{syntax:\"*\";inherits:false;initial-value:solid}@property --tw-blur{syntax:\"*\";inherits:false}@property --tw-brightness{syntax:\"*\";inherits:false}@property --tw-contrast{syntax:\"*\";inherits:false}@property --tw-grayscale{syntax:\"*\";inherits:false}@property --tw-hue-rotate{syntax:\"*\";inherits:false}@property --tw-invert{syntax:\"*\";inherits:false}@property --tw-opacity{syntax:\"*\";inherits:false}@property --tw-saturate{syntax:\"*\";inherits:false}@property --tw-sepia{syntax:\"*\";inherits:false}@property --tw-drop-shadow{syntax:\"*\";inherits:false}@property --tw-drop-shadow-color{syntax:\"*\";inherits:false}@property --tw-drop-shadow-alpha{syntax:\"<percentage>\";inherits:false;initial-value:100%}@property --tw-drop-shadow-size{syntax:\"*\";inherits:false}@property --tw-backdrop-blur{syntax:\"*\";inherits:false}@property --tw-backdrop-brightness{syntax:\"*\";inherits:false}@property --tw-backdrop-contrast{syntax:\"*\";inherits:false}@property --tw-backdrop-grayscale{syntax:\"*\";inherits:false}@property --tw-backdrop-hue-rotate{syntax:\"*\";inherits:false}@property --tw-backdrop-invert{syntax:\"*\";inherits:false}@property --tw-backdrop-opacity{syntax:\"*\";inherits:false}@property --tw-backdrop-saturate{syntax:\"*\";inherits:false}@property --tw-backdrop-sepia{syntax:\"*\";inherits:false}@property --tw-duration{syntax:\"*\";inherits:false}@property --tw-ease{syntax:\"*\";inherits:false}@keyframes spin{to{transform:rotate(360deg)}}@keyframes pulse{50%{opacity:.5}}';\nfunction getElementAttributes(element) {\n  const attrs = {}, priorityAttrs = [\n    \"id\",\n    \"class\",\n    \"name\",\n    \"type\",\n    \"href\",\n    \"src\",\n    \"alt\",\n    \"for\",\n    \"placeholder\"\n  ], dataAttrs = [];\n  for (let i2 = 0; i2 < element.attributes.length; i2++) {\n    const attr = element.attributes[i2];\n    attr.name.startsWith(\"data-\") ? dataAttrs.push({ name: attr.name, value: attr.value }) : (priorityAttrs.includes(attr.name.toLowerCase()) || attr.name.toLowerCase() !== \"style\") && (attrs[attr.name] = attr.value);\n  }\n  return dataAttrs.forEach((da) => {\n    attrs[da.name] = da.value;\n  }), attrs;\n}\nfunction generateElementContext(element, index) {\n  var _a;\n  let context = \\`<element index=\"\\${index + 1}\">\n\\`;\n  context += \\`  <tag>\\${element.tagName.toLowerCase()}</tag>\n\\`;\n  const id = element.id;\n  id && (context += \\`  <id>\\${id}</id>\n\\`);\n  const classes = Array.from(element.classList).join(\", \");\n  classes && (context += \\`  <classes>\\${classes}</classes>\n\\`);\n  const attributes = getElementAttributes(element);\n  if (Object.keys(attributes).length > 0) {\n    context += \\`  <attributes>\n\\`;\n    for (const [key, value] of Object.entries(attributes))\n      (key.toLowerCase() !== \"class\" || !classes) && (context += \\`    <\\${key}>\\${value}</\\${key}>\n\\`);\n    context += \\`  </attributes>\n\\`;\n  }\n  const text = (_a = element.innerText) == null ? void 0 : _a.trim();\n  if (text && (context += \\`  <text>\\${text.length > 100 ? \\`\\${text.substring(0, 100)}...\\` : text}</text>\n\\`), context += \\`  <structural_context>\n\\`, element.parentElement) {\n    const parent = element.parentElement;\n    context += \\`    <parent>\n\\`, context += \\`      <tag>\\${parent.tagName.toLowerCase()}</tag>\n\\`, parent.id && (context += \\`      <id>\\${parent.id}</id>\n\\`);\n    const parentClasses = Array.from(parent.classList).join(\", \");\n    parentClasses && (context += \\`      <classes>\\${parentClasses}</classes>\n\\`), context += \\`    </parent>\n\\`;\n  } else\n    context += \\`    <parent>No parent element found (likely root or disconnected)</parent>\n\\`;\n  context += \\`  </structural_context>\n\\`;\n  try {\n    const styles = window.getComputedStyle(element), relevantStyles = {\n      color: styles.color,\n      backgroundColor: styles.backgroundColor,\n      fontSize: styles.fontSize,\n      fontWeight: styles.fontWeight,\n      display: styles.display\n    };\n    context += \\`  <styles>\n\\`;\n    for (const [key, value] of Object.entries(relevantStyles))\n      context += \\`    <\\${key}>\\${value}</\\${key}>\n\\`;\n    context += \\`  </styles>\n\\`;\n  } catch {\n    context += \\`  <styles>Could not retrieve computed styles</styles>\n\\`;\n  }\n  return context += \\`</element>\n\\`, context;\n}\nfunction createPrompt(selectedElements, userPrompt, url, contextSnippets) {\n  const pluginContext = contextSnippets.map(\n    (snippet) => \\`\n      <plugin_contexts>\n<\\${snippet.pluginName}>\n\\${snippet.contextSnippets.map((snippet2) => \\`    <\\${snippet2.promptContextName}>\\${snippet2.content}</\\${snippet2.promptContextName}>\\`).join(\\`\n\\`)}\n</\\${snippet.pluginName}>\n</plugin_contexts>\n\\`.trim()\n  ).join(\\`\n\\`);\n  if (!selectedElements || selectedElements.length === 0)\n    return \\`\n    <request>\n      <user_goal>\\${userPrompt}</user_goal>\n      <url>\\${url}</url>\n  <context>No specific element was selected on the page. Please analyze the page code in general or ask for clarification.</context>\n  \\${pluginContext}\n</request>\\`.trim();\n  let detailedContext = \"\";\n  return selectedElements.forEach((element, index) => {\n    detailedContext += generateElementContext(element, index);\n  }), \\`\n<request>\n  <user_goal>\\${userPrompt}</user_goal>\n  <url>\\${url}</url>\n  <selected_elements>\n    \\${detailedContext.trim()}\n  </selected_elements>\n  \\${pluginContext}\n</request>\\`.trim();\n}\nconst AppContext = createContext(null), STORAGE_KEY = \"stgws:companion\";\nfunction loadStateFromStorage() {\n  try {\n    const stored = sessionStorage.getItem(STORAGE_KEY);\n    return stored ? JSON.parse(stored) : {};\n  } catch (error) {\n    return console.error(\"Failed to load state from storage:\", error), {};\n  }\n}\nfunction saveStateToStorage(state) {\n  try {\n    sessionStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n  } catch (error) {\n    console.error(\"Failed to save state to storage:\", error);\n  }\n}\nfunction AppStateProvider({ children }) {\n  const [state, setState] = useState(() => {\n    const storedState = loadStateFromStorage();\n    return {\n      appBlockRequestList: [],\n      appUnblockRequestList: [],\n      lastBlockRequestNumber: 0,\n      lastUnblockRequestNumber: 0,\n      isMainAppBlocked: !1,\n      toolbarBoxRef: createRef(),\n      minimized: storedState.minimized ?? !1,\n      requestMainAppBlock: () => 0,\n      // These will be replaced by the actual implementations\n      requestMainAppUnblock: () => 0,\n      discardMainAppBlock: () => {\n      },\n      discardMainAppUnblock: () => {\n      },\n      setToolbarBoxRef: () => {\n      },\n      unsetToolbarBoxRef: () => {\n      },\n      minimize: () => {\n      },\n      expand: () => {\n      }\n    };\n  });\n  useEffect(() => {\n    saveStateToStorage({\n      minimized: state.minimized\n    });\n  }, [state.minimized]);\n  const requestMainAppBlock = useCallback(() => {\n    let newHandleValue = 0;\n    return setState((prev) => (newHandleValue = prev.lastBlockRequestNumber + 1, {\n      ...prev,\n      appBlockRequestList: [...prev.appBlockRequestList, newHandleValue],\n      lastBlockRequestNumber: newHandleValue,\n      isMainAppBlocked: prev.appUnblockRequestList.length === 0\n    })), newHandleValue;\n  }, []), requestMainAppUnblock = useCallback(() => {\n    let newHandleValue = 0;\n    return setState((prev) => (newHandleValue = prev.lastUnblockRequestNumber + 1, {\n      ...prev,\n      appUnblockRequestList: [...prev.appUnblockRequestList, newHandleValue],\n      lastUnblockRequestNumber: newHandleValue,\n      isMainAppBlocked: !1\n    })), newHandleValue;\n  }, []), discardMainAppBlock = useCallback((handle) => {\n    setState((prev) => {\n      const newBlockRequestList = prev.appBlockRequestList.filter(\n        (h2) => h2 !== handle\n      );\n      return {\n        ...prev,\n        appBlockRequestList: newBlockRequestList,\n        isMainAppBlocked: newBlockRequestList.length > 0 && prev.appUnblockRequestList.length === 0\n      };\n    });\n  }, []), discardMainAppUnblock = useCallback((handle) => {\n    setState((prev) => {\n      const newUnblockRequestList = prev.appUnblockRequestList.filter(\n        (h2) => h2 !== handle\n      );\n      return {\n        ...prev,\n        appUnblockRequestList: newUnblockRequestList,\n        isMainAppBlocked: prev.appBlockRequestList.length > 0 && newUnblockRequestList.length === 0\n      };\n    });\n  }, []), setToolbarBoxRef = useCallback((ref) => {\n    setState((prev) => ({ ...prev, toolbarBoxRef: ref }));\n  }, []), unsetToolbarBoxRef = useCallback(() => {\n    setState((prev) => ({ ...prev, toolbarBoxRef: createRef() }));\n  }, []), minimize = useCallback(() => {\n    setState((prev) => ({ ...prev, minimized: !0 }));\n  }, []), expand = useCallback(() => {\n    setState((prev) => ({ ...prev, minimized: !1 }));\n  }, []), value = {\n    requestMainAppBlock,\n    requestMainAppUnblock,\n    discardMainAppBlock,\n    discardMainAppUnblock,\n    isMainAppBlocked: state.isMainAppBlocked,\n    toolbarBoxRef: state.toolbarBoxRef,\n    setToolbarBoxRef,\n    unsetToolbarBoxRef,\n    minimized: state.minimized,\n    minimize,\n    expand\n  };\n  return /* @__PURE__ */ jsx(AppContext.Provider, { value, children });\n}\nfunction useAppState() {\n  const context = useContext(AppContext);\n  if (!context)\n    throw new Error(\"useAppState must be used within an AppStateProvider\");\n  return context;\n}\nconst ChatContext = createContext({\n  chats: [],\n  currentChatId: null,\n  createChat: () => \"\",\n  deleteChat: () => {\n  },\n  setCurrentChat: () => {\n  },\n  setChatInput: () => {\n  },\n  addChatDomContext: () => {\n  },\n  removeChatDomContext: () => {\n  },\n  addMessage: () => {\n  },\n  chatAreaState: \"hidden\",\n  setChatAreaState: () => {\n  },\n  isPromptCreationActive: !1,\n  startPromptCreation: () => {\n  },\n  stopPromptCreation: () => {\n  },\n  promptState: \"idle\",\n  resetPromptState: () => {\n  }\n}), ChatStateProvider = ({ children }) => {\n  const [chats, setChats] = useState([\n    {\n      id: \"new_chat\",\n      messages: [],\n      title: \"New chat\",\n      inputValue: \"\",\n      domContextElements: []\n    }\n  ]), [currentChatId, setCurrentChatId] = useState(\"new_chat\"), [chatAreaState, internalSetChatAreaState] = useState(\"hidden\"), [isPromptCreationMode, setIsPromptCreationMode] = useState(!1), [promptState, setPromptState] = useState(\"idle\"), resetPromptState = useCallback(() => {\n    setPromptState(\"idle\");\n  }, []), { minimized } = useAppState(), { selectedSession, setShouldPromptWindowSelection } = useVSCode();\n  useEffect(() => {\n    minimized && (setIsPromptCreationMode(!1), internalSetChatAreaState(\"hidden\"));\n  }, [minimized]);\n  const { bridge } = useSRPCBridge(), createChat = useCallback(() => {\n    const newChatId = generateId(), newChat = {\n      id: newChatId,\n      title: null,\n      messages: [],\n      inputValue: \"\",\n      domContextElements: []\n    };\n    return setChats((prev) => [...prev, newChat]), setCurrentChatId(newChatId), newChatId;\n  }, []), deleteChat = useCallback(\n    (chatId) => {\n      setChats((prev) => {\n        const filteredChats = prev.filter((chat) => chat.id !== chatId);\n        return filteredChats.length === 0 ? [\n          {\n            id: \"new_chat\",\n            messages: [],\n            title: \"New chat\",\n            inputValue: \"\",\n            domContextElements: []\n          }\n        ] : filteredChats;\n      }), currentChatId === chatId && setChats((prev) => (setCurrentChatId(prev[0].id), prev));\n    },\n    [currentChatId]\n  ), setCurrentChat = useCallback((chatId) => {\n    setCurrentChatId(chatId);\n  }, []), setChatInput = useCallback((chatId, value2) => {\n    setChats(\n      (prev) => prev.map(\n        (chat) => chat.id === chatId ? { ...chat, inputValue: value2 } : chat\n      )\n    );\n  }, []), { plugins } = usePlugins(), startPromptCreation = useCallback(() => {\n    setIsPromptCreationMode(!0), chatAreaState === \"hidden\" && internalSetChatAreaState(\"compact\"), plugins.forEach((plugin) => {\n      var _a;\n      (_a = plugin.onPromptingStart) == null || _a.call(plugin);\n    });\n  }, [chatAreaState]), stopPromptCreation = useCallback(() => {\n    setIsPromptCreationMode(!1), setPromptState(\"idle\"), setChats(\n      (prev) => prev.map(\n        (chat) => chat.id === currentChatId ? { ...chat, domContextElements: [] } : chat\n      )\n    ), chatAreaState === \"compact\" && internalSetChatAreaState(\"hidden\"), plugins.forEach((plugin) => {\n      var _a;\n      (_a = plugin.onPromptingAbort) == null || _a.call(plugin);\n    });\n  }, [currentChatId, chatAreaState]), setChatAreaState = useCallback(\n    (state) => {\n      internalSetChatAreaState(state), state === \"hidden\" && stopPromptCreation();\n    },\n    [internalSetChatAreaState, stopPromptCreation]\n  ), addChatDomContext = useCallback(\n    (chatId, element) => {\n      const pluginsWithContextGetters = plugins.filter(\n        (plugin) => plugin.onContextElementSelect\n      );\n      setChats(\n        (prev) => prev.map((chat) => chat.id === chatId ? {\n          ...chat,\n          domContextElements: [\n            ...chat.domContextElements,\n            {\n              element,\n              pluginContext: pluginsWithContextGetters.map((plugin) => {\n                var _a;\n                return {\n                  pluginName: plugin.pluginName,\n                  context: (_a = plugin.onContextElementSelect) == null ? void 0 : _a.call(plugin, element)\n                };\n              })\n            }\n          ]\n        } : chat)\n      );\n    },\n    [plugins]\n  ), removeChatDomContext = useCallback(\n    (chatId, element) => {\n      setChats(\n        (prev) => prev.map(\n          (chat) => chat.id === chatId ? {\n            ...chat,\n            domContextElements: chat.domContextElements.filter(\n              (e2) => e2.element !== element\n            )\n          } : chat\n        )\n      );\n    },\n    []\n  ), addMessage = useCallback(\n    async (chatId, content, pluginTriggered = !1) => {\n      if (!content.trim() || promptState === \"loading\") return;\n      const chat = chats.find((chat2) => chat2.id === chatId);\n      setPromptState(\"loading\");\n      const pluginContextSnippets = [], pluginProcessingPromises = plugins.map(async (plugin) => {\n        var _a;\n        const userMessagePayload = {\n          id: generateId(),\n          text: content,\n          contextElements: (chat == null ? void 0 : chat.domContextElements.map((el) => el.element)) || [],\n          sentByPlugin: pluginTriggered\n        }, handlerResult = await ((_a = plugin.onPromptSend) == null ? void 0 : _a.call(plugin, userMessagePayload));\n        if (!handlerResult || !handlerResult.contextSnippets || handlerResult.contextSnippets.length === 0)\n          return null;\n        const snippetPromises = handlerResult.contextSnippets.map(\n          async (snippet) => {\n            const resolvedContent = typeof snippet.content == \"string\" ? snippet.content : await snippet.content();\n            return {\n              promptContextName: snippet.promptContextName,\n              content: resolvedContent\n            };\n          }\n        ), resolvedSnippets = await Promise.all(snippetPromises);\n        return resolvedSnippets.length > 0 ? {\n          pluginName: plugin.pluginName,\n          contextSnippets: resolvedSnippets\n        } : null;\n      });\n      (await Promise.all(pluginProcessingPromises)).forEach((pluginCtx) => {\n        pluginCtx && pluginContextSnippets.push(pluginCtx);\n      });\n      const prompt = createPrompt(\n        chat == null ? void 0 : chat.domContextElements.map((e2) => e2.element),\n        content,\n        window.parent.location.href,\n        pluginContextSnippets\n      ), newMessage = {\n        id: generateId(),\n        content: content.trim(),\n        sender: \"user\",\n        type: \"regular\",\n        timestamp: /* @__PURE__ */ new Date()\n      };\n      async function triggerAgentPrompt() {\n        if (bridge)\n          try {\n            const result = await bridge.call.triggerAgentPrompt(\n              {\n                prompt,\n                sessionId: selectedSession == null ? void 0 : selectedSession.sessionId\n              },\n              { onUpdate: (_update) => {\n              } }\n            );\n            result.result.success ? (setTimeout(() => {\n              setPromptState(\"success\");\n            }, 1e3), setChats(\n              (prev) => prev.map(\n                (chat2) => chat2.id === chatId ? { ...chat2, inputValue: \"\" } : chat2\n              )\n            )) : (result.result.errorCode && result.result.errorCode === \"session_mismatch\" && setShouldPromptWindowSelection(!0), setPromptState(\"error\"), setTimeout(() => {\n              setPromptState(\"idle\"), setIsPromptCreationMode(!1), setChats(\n                (prev) => prev.map(\n                  (chat2) => chat2.id === chatId ? { ...chat2, inputValue: \"\" } : chat2\n                )\n              );\n            }, 300));\n          } catch {\n            setPromptState(\"error\"), setTimeout(() => {\n              setPromptState(\"idle\"), setIsPromptCreationMode(!1), setChats(\n                (prev) => prev.map(\n                  (chat2) => chat2.id === chatId ? { ...chat2, inputValue: \"\" } : chat2\n                )\n              );\n            }, 300);\n          }\n        else\n          setShouldPromptWindowSelection(!0), setPromptState(\"error\"), setTimeout(() => {\n            setPromptState(\"idle\"), setIsPromptCreationMode(!1), setChats(\n              (prev) => prev.map(\n                (chat2) => chat2.id === chatId ? { ...chat2, inputValue: \"\" } : chat2\n              )\n            );\n          }, 300);\n      }\n      triggerAgentPrompt(), chatAreaState === \"hidden\" && internalSetChatAreaState(\"compact\"), setChats(\n        (prev) => prev.map(\n          (chat2) => chat2.id === chatId ? {\n            ...chat2,\n            messages: [...chat2.messages, newMessage],\n            inputValue: content.trim(),\n            // Keep the original prompt instead of clearing\n            domContextElements: []\n          } : chat2\n        )\n      );\n    },\n    [\n      chatAreaState,\n      bridge,\n      chats,\n      setIsPromptCreationMode,\n      internalSetChatAreaState,\n      selectedSession,\n      promptState,\n      setPromptState,\n      plugins\n    ]\n  ), value = {\n    chats,\n    currentChatId,\n    createChat,\n    deleteChat,\n    setCurrentChat,\n    setChatInput,\n    addMessage,\n    chatAreaState,\n    setChatAreaState,\n    isPromptCreationActive: isPromptCreationMode,\n    startPromptCreation,\n    stopPromptCreation,\n    addChatDomContext,\n    removeChatDomContext,\n    promptState,\n    resetPromptState\n  };\n  return /* @__PURE__ */ jsx(ChatContext.Provider, { value, children });\n};\nfunction useChatState() {\n  const context = useContext(ChatContext);\n  if (!context)\n    throw new Error(\"useChatState must be used within a ChatStateProvider\");\n  return context;\n}\nfunction ContextProviders({\n  children,\n  config: config2\n}) {\n  return /* @__PURE__ */ jsx(ConfigProvider, { config: config2, children: /* @__PURE__ */ jsx(VSCodeProvider, { children: /* @__PURE__ */ jsx(SRPCBridgeProvider, { children: /* @__PURE__ */ jsx(PluginProvider, { children: /* @__PURE__ */ jsx(ChatStateProvider, { children }) }) }) }) });\n}\nfunction useEventListener(eventName, handler, options, element = window) {\n  useEffect(() => {\n    if (!(typeof window > \"u\") && element)\n      return element.addEventListener(eventName, handler, options), () => element.removeEventListener(eventName, handler, options);\n  }, [eventName, handler, element, options]);\n}\nfunction HotkeyListener() {\n  const { startPromptCreation, stopPromptCreation, isPromptCreationActive } = useChatState(), hotKeyHandlerMap = useMemo(\n    () => ({\n      // Functions that return true will prevent further propagation of the event.\n      [HotkeyActions.CTRL_ALT_C]: () => isPromptCreationActive ? !1 : (startPromptCreation(), !0),\n      [HotkeyActions.ESC]: () => isPromptCreationActive ? (stopPromptCreation(), !0) : !1\n    }),\n    [startPromptCreation, stopPromptCreation, isPromptCreationActive]\n  ), hotKeyListener = useCallback(\n    (ev) => {\n      for (const [action, definition] of Object.entries(\n        hotkeyActionDefinitions\n      ))\n        if (definition.isEventMatching(ev)) {\n          hotKeyHandlerMap[action]() && (ev.preventDefault(), ev.stopPropagation());\n          break;\n        }\n    },\n    [hotKeyHandlerMap]\n  );\n  return useEventListener(\"keydown\", hotKeyListener, {\n    capture: !0\n  }), null;\n}\nconst $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof document < \"u\" ? React.useLayoutEffect : () => {\n};\nfunction $8ae05eaa5c114e9c$export$7f54fc3180508a52(fn) {\n  const ref = useRef(null);\n  return $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {\n    ref.current = fn;\n  }, [\n    fn\n  ]), useCallback((...args) => {\n    const f2 = ref.current;\n    return f2 == null ? void 0 : f2(...args);\n  }, []);\n}\nconst $431fbd86ca7dc216$export$b204af158042fbac = (el) => {\n  var _el_ownerDocument;\n  return (_el_ownerDocument = el == null ? void 0 : el.ownerDocument) !== null && _el_ownerDocument !== void 0 ? _el_ownerDocument : document;\n}, $431fbd86ca7dc216$export$f21a1ffae260145a = (el) => el && \"window\" in el && el.window === el ? el : $431fbd86ca7dc216$export$b204af158042fbac(el).defaultView || window;\nfunction $431fbd86ca7dc216$var$isNode(value) {\n  return value !== null && typeof value == \"object\" && \"nodeType\" in value && typeof value.nodeType == \"number\";\n}\nfunction $431fbd86ca7dc216$export$af51f0f06c0f328a(node) {\n  return $431fbd86ca7dc216$var$isNode(node) && node.nodeType === Node.DOCUMENT_FRAGMENT_NODE && \"host\" in node;\n}\nlet $f4e2df6bd15f8569$var$_shadowDOM = !1;\nfunction $f4e2df6bd15f8569$export$98658e8c59125e6a() {\n  return $f4e2df6bd15f8569$var$_shadowDOM;\n}\nfunction $d4ee10de306f2510$export$4282f70798064fe0(node, otherNode) {\n  if (!$f4e2df6bd15f8569$export$98658e8c59125e6a()) return otherNode && node ? node.contains(otherNode) : !1;\n  if (!node || !otherNode) return !1;\n  let currentNode = otherNode;\n  for (; currentNode !== null; ) {\n    if (currentNode === node) return !0;\n    currentNode.tagName === \"SLOT\" && currentNode.assignedSlot ? currentNode = currentNode.assignedSlot.parentNode : $431fbd86ca7dc216$export$af51f0f06c0f328a(currentNode) ? currentNode = currentNode.host : currentNode = currentNode.parentNode;\n  }\n  return !1;\n}\nconst $d4ee10de306f2510$export$cd4e5573fbe2b576 = (doc = document) => {\n  var _activeElement_shadowRoot;\n  if (!$f4e2df6bd15f8569$export$98658e8c59125e6a()) return doc.activeElement;\n  let activeElement = doc.activeElement;\n  for (; activeElement && \"shadowRoot\" in activeElement && (!((_activeElement_shadowRoot = activeElement.shadowRoot) === null || _activeElement_shadowRoot === void 0) && _activeElement_shadowRoot.activeElement); ) activeElement = activeElement.shadowRoot.activeElement;\n  return activeElement;\n};\nfunction $d4ee10de306f2510$export$e58f029f0fbfdb29(event) {\n  return $f4e2df6bd15f8569$export$98658e8c59125e6a() && event.target.shadowRoot && event.composedPath ? event.composedPath()[0] : event.target;\n}\nvar define_process_env_default$2 = {};\nfunction $c87311424ea30a05$var$testUserAgent(re) {\n  var _window_navigator_userAgentData;\n  return typeof window > \"u\" || window.navigator == null ? !1 : ((_window_navigator_userAgentData = window.navigator.userAgentData) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand) => re.test(brand.brand))) || re.test(window.navigator.userAgent);\n}\nfunction $c87311424ea30a05$var$testPlatform(re) {\n  var _window_navigator_userAgentData;\n  return typeof window < \"u\" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator.userAgentData) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : !1;\n}\nfunction $c87311424ea30a05$var$cached(fn) {\n  if (define_process_env_default$2.NODE_ENV === \"test\") return fn;\n  let res = null;\n  return () => (res == null && (res = fn()), res);\n}\nconst $c87311424ea30a05$export$9ac100e40613ea10 = $c87311424ea30a05$var$cached(function() {\n  return $c87311424ea30a05$var$testPlatform(/^Mac/i);\n}), $c87311424ea30a05$export$a11b0059900ceec8 = $c87311424ea30a05$var$cached(function() {\n  return $c87311424ea30a05$var$testUserAgent(/Android/i);\n});\nfunction $03deb23ff14920c4$export$4eaf04e54aa8eed6() {\n  let globalListeners = useRef(/* @__PURE__ */ new Map()), addGlobalListener = useCallback((eventTarget, type, listener, options) => {\n    let fn = options != null && options.once ? (...args) => {\n      globalListeners.current.delete(listener), listener(...args);\n    } : listener;\n    globalListeners.current.set(listener, {\n      type,\n      eventTarget,\n      fn,\n      options\n    }), eventTarget.addEventListener(type, fn, options);\n  }, []), removeGlobalListener = useCallback((eventTarget, type, listener, options) => {\n    var _globalListeners_current_get;\n    let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;\n    eventTarget.removeEventListener(type, fn, options), globalListeners.current.delete(listener);\n  }, []), removeAllGlobalListeners = useCallback(() => {\n    globalListeners.current.forEach((value, key) => {\n      removeGlobalListener(value.eventTarget, value.type, key, value.options);\n    });\n  }, [\n    removeGlobalListener\n  ]);\n  return useEffect(() => removeAllGlobalListeners, [\n    removeAllGlobalListeners\n  ]), {\n    addGlobalListener,\n    removeGlobalListener,\n    removeAllGlobalListeners\n  };\n}\nfunction $6a7db85432448f7f$export$60278871457622de(event) {\n  return event.mozInputSource === 0 && event.isTrusted ? !0 : $c87311424ea30a05$export$a11b0059900ceec8() && event.pointerType ? event.type === \"click\" && event.buttons === 1 : event.detail === 0 && !event.pointerType;\n}\nfunction $8a9cb279dc87e130$export$525bc4921d56d4a(nativeEvent) {\n  let event = nativeEvent;\n  return event.nativeEvent = nativeEvent, event.isDefaultPrevented = () => event.defaultPrevented, event.isPropagationStopped = () => event.cancelBubble, event.persist = () => {\n  }, event;\n}\nfunction $8a9cb279dc87e130$export$c2b7abe5d61ec696(event, target) {\n  Object.defineProperty(event, \"target\", {\n    value: target\n  }), Object.defineProperty(event, \"currentTarget\", {\n    value: target\n  });\n}\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n  let stateRef = useRef({\n    isFocused: !1,\n    observer: null\n  });\n  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {\n    const state = stateRef.current;\n    return () => {\n      state.observer && (state.observer.disconnect(), state.observer = null);\n    };\n  }, []);\n  let dispatchBlur = $8ae05eaa5c114e9c$export$7f54fc3180508a52((e2) => {\n    onBlur == null || onBlur(e2);\n  });\n  return useCallback((e2) => {\n    if (e2.target instanceof HTMLButtonElement || e2.target instanceof HTMLInputElement || e2.target instanceof HTMLTextAreaElement || e2.target instanceof HTMLSelectElement) {\n      stateRef.current.isFocused = !0;\n      let target = e2.target, onBlurHandler = (e3) => {\n        if (stateRef.current.isFocused = !1, target.disabled) {\n          let event = $8a9cb279dc87e130$export$525bc4921d56d4a(e3);\n          dispatchBlur(event);\n        }\n        stateRef.current.observer && (stateRef.current.observer.disconnect(), stateRef.current.observer = null);\n      };\n      target.addEventListener(\"focusout\", onBlurHandler, {\n        once: !0\n      }), stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          var _stateRef_current_observer;\n          (_stateRef_current_observer = stateRef.current.observer) === null || _stateRef_current_observer === void 0 || _stateRef_current_observer.disconnect();\n          let relatedTargetEl = target === document.activeElement ? null : document.activeElement;\n          target.dispatchEvent(new FocusEvent(\"blur\", {\n            relatedTarget: relatedTargetEl\n          })), target.dispatchEvent(new FocusEvent(\"focusout\", {\n            bubbles: !0,\n            relatedTarget: relatedTargetEl\n          }));\n        }\n      }), stateRef.current.observer.observe(target, {\n        attributes: !0,\n        attributeFilter: [\n          \"disabled\"\n        ]\n      });\n    }\n  }, [\n    dispatchBlur\n  ]);\n}\nlet $8a9cb279dc87e130$export$fda7da73ab5d4c48 = !1;\nvar define_process_env_default$1 = {};\nlet $507fabe10e71c6fb$var$currentModality = null, $507fabe10e71c6fb$var$changeHandlers = /* @__PURE__ */ new Set(), $507fabe10e71c6fb$export$d90243b58daecda7 = /* @__PURE__ */ new Map(), $507fabe10e71c6fb$var$hasEventBeforeFocus = !1, $507fabe10e71c6fb$var$hasBlurredWindowRecently = !1;\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: !0,\n  Escape: !0\n};\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e2) {\n  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e2);\n}\nfunction $507fabe10e71c6fb$var$isValidKey(e2) {\n  return !(e2.metaKey || !$c87311424ea30a05$export$9ac100e40613ea10() && e2.altKey || e2.ctrlKey || e2.key === \"Control\" || e2.key === \"Shift\" || e2.key === \"Meta\");\n}\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e2) {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = !0, $507fabe10e71c6fb$var$isValidKey(e2) && ($507fabe10e71c6fb$var$currentModality = \"keyboard\", $507fabe10e71c6fb$var$triggerChangeHandlers(\"keyboard\", e2));\n}\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e2) {\n  $507fabe10e71c6fb$var$currentModality = \"pointer\", (e2.type === \"mousedown\" || e2.type === \"pointerdown\") && ($507fabe10e71c6fb$var$hasEventBeforeFocus = !0, $507fabe10e71c6fb$var$triggerChangeHandlers(\"pointer\", e2));\n}\nfunction $507fabe10e71c6fb$var$handleClickEvent(e2) {\n  $6a7db85432448f7f$export$60278871457622de(e2) && ($507fabe10e71c6fb$var$hasEventBeforeFocus = !0, $507fabe10e71c6fb$var$currentModality = \"virtual\");\n}\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e2) {\n  e2.target === window || e2.target === document || $8a9cb279dc87e130$export$fda7da73ab5d4c48 || !e2.isTrusted || (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently && ($507fabe10e71c6fb$var$currentModality = \"virtual\", $507fabe10e71c6fb$var$triggerChangeHandlers(\"virtual\", e2)), $507fabe10e71c6fb$var$hasEventBeforeFocus = !1, $507fabe10e71c6fb$var$hasBlurredWindowRecently = !1);\n}\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = !1, $507fabe10e71c6fb$var$hasBlurredWindowRecently = !0;\n}\nfunction $507fabe10e71c6fb$var$setupGlobalFocusEvents(element) {\n  if (typeof window > \"u\" || $507fabe10e71c6fb$export$d90243b58daecda7.get($431fbd86ca7dc216$export$f21a1ffae260145a(element))) return;\n  const windowObject = $431fbd86ca7dc216$export$f21a1ffae260145a(element), documentObject = $431fbd86ca7dc216$export$b204af158042fbac(element);\n  let focus = windowObject.HTMLElement.prototype.focus;\n  windowObject.HTMLElement.prototype.focus = function() {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = !0, focus.apply(this, arguments);\n  }, documentObject.addEventListener(\"keydown\", $507fabe10e71c6fb$var$handleKeyboardEvent, !0), documentObject.addEventListener(\"keyup\", $507fabe10e71c6fb$var$handleKeyboardEvent, !0), documentObject.addEventListener(\"click\", $507fabe10e71c6fb$var$handleClickEvent, !0), windowObject.addEventListener(\"focus\", $507fabe10e71c6fb$var$handleFocusEvent, !0), windowObject.addEventListener(\"blur\", $507fabe10e71c6fb$var$handleWindowBlur, !1), typeof PointerEvent < \"u\" ? (documentObject.addEventListener(\"pointerdown\", $507fabe10e71c6fb$var$handlePointerEvent, !0), documentObject.addEventListener(\"pointermove\", $507fabe10e71c6fb$var$handlePointerEvent, !0), documentObject.addEventListener(\"pointerup\", $507fabe10e71c6fb$var$handlePointerEvent, !0)) : define_process_env_default$1.NODE_ENV === \"test\" && (documentObject.addEventListener(\"mousedown\", $507fabe10e71c6fb$var$handlePointerEvent, !0), documentObject.addEventListener(\"mousemove\", $507fabe10e71c6fb$var$handlePointerEvent, !0), documentObject.addEventListener(\"mouseup\", $507fabe10e71c6fb$var$handlePointerEvent, !0)), windowObject.addEventListener(\"beforeunload\", () => {\n    $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element);\n  }, {\n    once: !0\n  }), $507fabe10e71c6fb$export$d90243b58daecda7.set(windowObject, {\n    focus\n  });\n}\nconst $507fabe10e71c6fb$var$tearDownWindowFocusTracking = (element, loadListener) => {\n  const windowObject = $431fbd86ca7dc216$export$f21a1ffae260145a(element), documentObject = $431fbd86ca7dc216$export$b204af158042fbac(element);\n  loadListener && documentObject.removeEventListener(\"DOMContentLoaded\", loadListener), $507fabe10e71c6fb$export$d90243b58daecda7.has(windowObject) && (windowObject.HTMLElement.prototype.focus = $507fabe10e71c6fb$export$d90243b58daecda7.get(windowObject).focus, documentObject.removeEventListener(\"keydown\", $507fabe10e71c6fb$var$handleKeyboardEvent, !0), documentObject.removeEventListener(\"keyup\", $507fabe10e71c6fb$var$handleKeyboardEvent, !0), documentObject.removeEventListener(\"click\", $507fabe10e71c6fb$var$handleClickEvent, !0), windowObject.removeEventListener(\"focus\", $507fabe10e71c6fb$var$handleFocusEvent, !0), windowObject.removeEventListener(\"blur\", $507fabe10e71c6fb$var$handleWindowBlur, !1), typeof PointerEvent < \"u\" ? (documentObject.removeEventListener(\"pointerdown\", $507fabe10e71c6fb$var$handlePointerEvent, !0), documentObject.removeEventListener(\"pointermove\", $507fabe10e71c6fb$var$handlePointerEvent, !0), documentObject.removeEventListener(\"pointerup\", $507fabe10e71c6fb$var$handlePointerEvent, !0)) : define_process_env_default$1.NODE_ENV === \"test\" && (documentObject.removeEventListener(\"mousedown\", $507fabe10e71c6fb$var$handlePointerEvent, !0), documentObject.removeEventListener(\"mousemove\", $507fabe10e71c6fb$var$handlePointerEvent, !0), documentObject.removeEventListener(\"mouseup\", $507fabe10e71c6fb$var$handlePointerEvent, !0)), $507fabe10e71c6fb$export$d90243b58daecda7.delete(windowObject));\n};\nfunction $507fabe10e71c6fb$export$2f1888112f558a7d(element) {\n  const documentObject = $431fbd86ca7dc216$export$b204af158042fbac(element);\n  let loadListener;\n  return documentObject.readyState !== \"loading\" ? $507fabe10e71c6fb$var$setupGlobalFocusEvents(element) : (loadListener = () => {\n    $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);\n  }, documentObject.addEventListener(\"DOMContentLoaded\", loadListener)), () => $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element, loadListener);\n}\ntypeof document < \"u\" && $507fabe10e71c6fb$export$2f1888112f558a7d();\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n  return $507fabe10e71c6fb$var$currentModality !== \"pointer\";\n}\nconst $507fabe10e71c6fb$var$nonTextInputTypes = /* @__PURE__ */ new Set([\n  \"checkbox\",\n  \"radio\",\n  \"range\",\n  \"color\",\n  \"file\",\n  \"image\",\n  \"button\",\n  \"submit\",\n  \"reset\"\n]);\nfunction $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e2) {\n  let document1 = $431fbd86ca7dc216$export$b204af158042fbac(e2 == null ? void 0 : e2.target);\n  const IHTMLInputElement = typeof window < \"u\" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e2 == null ? void 0 : e2.target).HTMLInputElement : HTMLInputElement, IHTMLTextAreaElement = typeof window < \"u\" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e2 == null ? void 0 : e2.target).HTMLTextAreaElement : HTMLTextAreaElement, IHTMLElement = typeof window < \"u\" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e2 == null ? void 0 : e2.target).HTMLElement : HTMLElement, IKeyboardEvent = typeof window < \"u\" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e2 == null ? void 0 : e2.target).KeyboardEvent : KeyboardEvent;\n  return isTextInput = isTextInput || document1.activeElement instanceof IHTMLInputElement && !$507fabe10e71c6fb$var$nonTextInputTypes.has(document1.activeElement.type) || document1.activeElement instanceof IHTMLTextAreaElement || document1.activeElement instanceof IHTMLElement && document1.activeElement.isContentEditable, !(isTextInput && modality === \"keyboard\" && e2 instanceof IKeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e2.key]);\n}\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents(), useEffect(() => {\n    let handler = (modality, e2) => {\n      $507fabe10e71c6fb$var$isKeyboardFocusEvent(!!(opts != null && opts.isTextInput), modality, e2) && fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n    };\n    return $507fabe10e71c6fb$var$changeHandlers.add(handler), () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, deps);\n}\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n  let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;\n  const onBlur = useCallback((e2) => {\n    if (e2.target === e2.currentTarget)\n      return onBlurProp && onBlurProp(e2), onFocusChange && onFocusChange(!1), !0;\n  }, [\n    onBlurProp,\n    onFocusChange\n  ]), onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur), onFocus = useCallback((e2) => {\n    const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(e2.target), activeElement = ownerDocument ? $d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument) : $d4ee10de306f2510$export$cd4e5573fbe2b576();\n    e2.target === e2.currentTarget && activeElement === $d4ee10de306f2510$export$e58f029f0fbfdb29(e2.nativeEvent) && (onFocusProp && onFocusProp(e2), onFocusChange && onFocusChange(!0), onSyntheticFocus(e2));\n  }, [\n    onFocusChange,\n    onFocusProp,\n    onSyntheticFocus\n  ]);\n  return {\n    focusProps: {\n      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,\n      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : void 0\n    }\n  };\n}\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n  let { isDisabled, onBlurWithin, onFocusWithin, onFocusWithinChange } = props, state = useRef({\n    isFocusWithin: !1\n  }), { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6(), onBlur = useCallback((e2) => {\n    e2.currentTarget.contains(e2.target) && state.current.isFocusWithin && !e2.currentTarget.contains(e2.relatedTarget) && (state.current.isFocusWithin = !1, removeAllGlobalListeners(), onBlurWithin && onBlurWithin(e2), onFocusWithinChange && onFocusWithinChange(!1));\n  }, [\n    onBlurWithin,\n    onFocusWithinChange,\n    state,\n    removeAllGlobalListeners\n  ]), onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur), onFocus = useCallback((e2) => {\n    if (!e2.currentTarget.contains(e2.target)) return;\n    const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(e2.target), activeElement = $d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument);\n    if (!state.current.isFocusWithin && activeElement === $d4ee10de306f2510$export$e58f029f0fbfdb29(e2.nativeEvent)) {\n      onFocusWithin && onFocusWithin(e2), onFocusWithinChange && onFocusWithinChange(!0), state.current.isFocusWithin = !0, onSyntheticFocus(e2);\n      let currentTarget = e2.currentTarget;\n      addGlobalListener(ownerDocument, \"focus\", (e3) => {\n        if (state.current.isFocusWithin && !$d4ee10de306f2510$export$4282f70798064fe0(currentTarget, e3.target)) {\n          let nativeEvent = new ownerDocument.defaultView.FocusEvent(\"blur\", {\n            relatedTarget: e3.target\n          });\n          $8a9cb279dc87e130$export$c2b7abe5d61ec696(nativeEvent, currentTarget);\n          let event = $8a9cb279dc87e130$export$525bc4921d56d4a(nativeEvent);\n          onBlur(event);\n        }\n      }, {\n        capture: !0\n      });\n    }\n  }, [\n    onFocusWithin,\n    onFocusWithinChange,\n    onSyntheticFocus,\n    addGlobalListener,\n    onBlur\n  ]);\n  return isDisabled ? {\n    focusWithinProps: {\n      // These cannot be null, that would conflict in mergeProps\n      onFocus: void 0,\n      onBlur: void 0\n    }\n  } : {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\nvar define_process_env_default = {};\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = !1, $6179b936705e76d3$var$hoverCount = 0;\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = !0, setTimeout(() => {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = !1;\n  }, 50);\n}\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e2) {\n  e2.pointerType === \"touch\" && $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n  if (!(typeof document > \"u\"))\n    return typeof PointerEvent < \"u\" ? document.addEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent) : define_process_env_default.NODE_ENV === \"test\" && document.addEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents), $6179b936705e76d3$var$hoverCount++, () => {\n      $6179b936705e76d3$var$hoverCount--, !($6179b936705e76d3$var$hoverCount > 0) && (typeof PointerEvent < \"u\" ? document.removeEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent) : define_process_env_default.NODE_ENV === \"test\" && document.removeEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents));\n    };\n}\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n  let { onHoverStart, onHoverChange, onHoverEnd, isDisabled } = props, [isHovered, setHovered] = useState(!1), state = useRef({\n    isHovered: !1,\n    ignoreEmulatedMouseEvents: !1,\n    pointerType: \"\",\n    target: null\n  }).current;\n  useEffect($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n  let { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6(), { hoverProps, triggerHoverEnd } = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      if (state.pointerType = pointerType, isDisabled || pointerType === \"touch\" || state.isHovered || !event.currentTarget.contains(event.target)) return;\n      state.isHovered = !0;\n      let target = event.currentTarget;\n      state.target = target, addGlobalListener($431fbd86ca7dc216$export$b204af158042fbac(event.target), \"pointerover\", (e2) => {\n        state.isHovered && state.target && !$d4ee10de306f2510$export$4282f70798064fe0(state.target, e2.target) && triggerHoverEnd2(e2, e2.pointerType);\n      }, {\n        capture: !0\n      }), onHoverStart && onHoverStart({\n        type: \"hoverstart\",\n        target,\n        pointerType\n      }), onHoverChange && onHoverChange(!0), setHovered(!0);\n    }, triggerHoverEnd2 = (event, pointerType) => {\n      let target = state.target;\n      state.pointerType = \"\", state.target = null, !(pointerType === \"touch\" || !state.isHovered || !target) && (state.isHovered = !1, removeAllGlobalListeners(), onHoverEnd && onHoverEnd({\n        type: \"hoverend\",\n        target,\n        pointerType\n      }), onHoverChange && onHoverChange(!1), setHovered(!1));\n    }, hoverProps2 = {};\n    return typeof PointerEvent < \"u\" ? (hoverProps2.onPointerEnter = (e2) => {\n      $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e2.pointerType === \"mouse\" || triggerHoverStart(e2, e2.pointerType);\n    }, hoverProps2.onPointerLeave = (e2) => {\n      !isDisabled && e2.currentTarget.contains(e2.target) && triggerHoverEnd2(e2, e2.pointerType);\n    }) : define_process_env_default.NODE_ENV === \"test\" && (hoverProps2.onTouchStart = () => {\n      state.ignoreEmulatedMouseEvents = !0;\n    }, hoverProps2.onMouseEnter = (e2) => {\n      !state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && triggerHoverStart(e2, \"mouse\"), state.ignoreEmulatedMouseEvents = !1;\n    }, hoverProps2.onMouseLeave = (e2) => {\n      !isDisabled && e2.currentTarget.contains(e2.target) && triggerHoverEnd2(e2, \"mouse\");\n    }), {\n      hoverProps: hoverProps2,\n      triggerHoverEnd: triggerHoverEnd2\n    };\n  }, [\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled,\n    state,\n    addGlobalListener,\n    removeAllGlobalListeners\n  ]);\n  return useEffect(() => {\n    isDisabled && triggerHoverEnd({\n      currentTarget: state.target\n    }, state.pointerType);\n  }, [\n    isDisabled\n  ]), {\n    hoverProps,\n    isHovered\n  };\n}\nfunction $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {\n  let { autoFocus = !1, isTextInput, within } = props, state = useRef({\n    isFocused: !1,\n    isFocusVisible: autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27()\n  }), [isFocused, setFocused] = useState(!1), [isFocusVisibleState, setFocusVisible] = useState(() => state.current.isFocused && state.current.isFocusVisible), updateState = useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []), onFocusChange = useCallback((isFocused2) => {\n    state.current.isFocused = isFocused2, setFocused(isFocused2), updateState();\n  }, [\n    updateState\n  ]);\n  $507fabe10e71c6fb$export$ec71b4b83ac08ec3((isFocusVisible) => {\n    state.current.isFocusVisible = isFocusVisible, updateState();\n  }, [], {\n    isTextInput\n  });\n  let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({\n    isDisabled: within,\n    onFocusChange\n  }), { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n  return {\n    isFocused,\n    isFocusVisible: isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\nvar i = Object.defineProperty, d = (t2, e2, n2) => e2 in t2 ? i(t2, e2, { enumerable: !0, configurable: !0, writable: !0, value: n2 }) : t2[e2] = n2, r = (t2, e2, n2) => (d(t2, typeof e2 != \"symbol\" ? e2 + \"\" : e2, n2), n2);\nlet o$3 = class {\n  constructor() {\n    r(this, \"current\", this.detect()), r(this, \"handoffState\", \"pending\"), r(this, \"currentId\", 0);\n  }\n  set(e2) {\n    this.current !== e2 && (this.handoffState = \"pending\", this.currentId = 0, this.current = e2);\n  }\n  reset() {\n    this.set(this.detect());\n  }\n  nextId() {\n    return ++this.currentId;\n  }\n  get isServer() {\n    return this.current === \"server\";\n  }\n  get isClient() {\n    return this.current === \"client\";\n  }\n  detect() {\n    return typeof window > \"u\" || typeof document > \"u\" ? \"server\" : \"client\";\n  }\n  handoff() {\n    this.handoffState === \"pending\" && (this.handoffState = \"complete\");\n  }\n  get isHandoffComplete() {\n    return this.handoffState === \"complete\";\n  }\n}, s$1 = new o$3();\nfunction o$2(n2) {\n  var e2, r2;\n  return s$1.isServer ? null : n2 ? \"ownerDocument\" in n2 ? n2.ownerDocument : \"current\" in n2 ? (r2 = (e2 = n2.current) == null ? void 0 : e2.ownerDocument) != null ? r2 : document : null : document;\n}\nfunction t$1(e2) {\n  typeof queueMicrotask == \"function\" ? queueMicrotask(e2) : Promise.resolve().then(e2).catch((o3) => setTimeout(() => {\n    throw o3;\n  }));\n}\nfunction o$1() {\n  let n2 = [], r2 = { addEventListener(e2, t2, s2, a2) {\n    return e2.addEventListener(t2, s2, a2), r2.add(() => e2.removeEventListener(t2, s2, a2));\n  }, requestAnimationFrame(...e2) {\n    let t2 = requestAnimationFrame(...e2);\n    return r2.add(() => cancelAnimationFrame(t2));\n  }, nextFrame(...e2) {\n    return r2.requestAnimationFrame(() => r2.requestAnimationFrame(...e2));\n  }, setTimeout(...e2) {\n    let t2 = setTimeout(...e2);\n    return r2.add(() => clearTimeout(t2));\n  }, microTask(...e2) {\n    let t2 = { current: !0 };\n    return t$1(() => {\n      t2.current && e2[0]();\n    }), r2.add(() => {\n      t2.current = !1;\n    });\n  }, style(e2, t2, s2) {\n    let a2 = e2.style.getPropertyValue(t2);\n    return Object.assign(e2.style, { [t2]: s2 }), this.add(() => {\n      Object.assign(e2.style, { [t2]: a2 });\n    });\n  }, group(e2) {\n    let t2 = o$1();\n    return e2(t2), this.add(() => t2.dispose());\n  }, add(e2) {\n    return n2.includes(e2) || n2.push(e2), () => {\n      let t2 = n2.indexOf(e2);\n      if (t2 >= 0) for (let s2 of n2.splice(t2, 1)) s2();\n    };\n  }, dispose() {\n    for (let e2 of n2.splice(0)) e2();\n  } };\n  return r2;\n}\nfunction p() {\n  let [e2] = useState(o$1);\n  return useEffect(() => () => e2.dispose(), [e2]), e2;\n}\nlet n = (e2, t2) => {\n  s$1.isServer ? useEffect(e2, t2) : useLayoutEffect(e2, t2);\n};\nfunction s(e2) {\n  let r2 = useRef(e2);\n  return n(() => {\n    r2.current = e2;\n  }, [e2]), r2;\n}\nlet o2 = function(t2) {\n  let e2 = s(t2);\n  return React.useCallback((...r2) => e2.current(...r2), [e2]);\n};\nfunction E(e2) {\n  let t2 = e2.width / 2, n2 = e2.height / 2;\n  return { top: e2.clientY - n2, right: e2.clientX + t2, bottom: e2.clientY + n2, left: e2.clientX - t2 };\n}\nfunction P$2(e2, t2) {\n  return !(!e2 || !t2 || e2.right < t2.left || e2.left > t2.right || e2.bottom < t2.top || e2.top > t2.bottom);\n}\nfunction w({ disabled: e2 = !1 } = {}) {\n  let t2 = useRef(null), [n2, l] = useState(!1), r2 = p(), o$12 = o2(() => {\n    t2.current = null, l(!1), r2.dispose();\n  }), f2 = o2((s2) => {\n    if (r2.dispose(), t2.current === null) {\n      t2.current = s2.currentTarget, l(!0);\n      {\n        let i2 = o$2(s2.currentTarget);\n        r2.addEventListener(i2, \"pointerup\", o$12, !1), r2.addEventListener(i2, \"pointermove\", (c2) => {\n          if (t2.current) {\n            let p2 = E(c2);\n            l(P$2(p2, t2.current.getBoundingClientRect()));\n          }\n        }, !1), r2.addEventListener(i2, \"pointercancel\", o$12, !1);\n      }\n    }\n  });\n  return { pressed: n2, pressProps: e2 ? {} : { onPointerDown: f2, onPointerUp: o$12, onClick: o$12 } };\n}\nlet e$1 = createContext(void 0);\nfunction a$1() {\n  return useContext(e$1);\n}\nfunction t(...r2) {\n  return Array.from(new Set(r2.flatMap((n2) => typeof n2 == \"string\" ? n2.split(\" \") : []))).filter(Boolean).join(\" \");\n}\nfunction u$2(r2, n2, ...a2) {\n  if (r2 in n2) {\n    let e2 = n2[r2];\n    return typeof e2 == \"function\" ? e2(...a2) : e2;\n  }\n  let t2 = new Error(\\`Tried to handle \"\\${r2}\" but there is no handler defined. Only defined handlers are: \\${Object.keys(n2).map((e2) => \\`\"\\${e2}\"\\`).join(\", \")}.\\`);\n  throw Error.captureStackTrace && Error.captureStackTrace(t2, u$2), t2;\n}\nvar O = ((a2) => (a2[a2.None = 0] = \"None\", a2[a2.RenderStrategy = 1] = \"RenderStrategy\", a2[a2.Static = 2] = \"Static\", a2))(O || {}), A = ((e2) => (e2[e2.Unmount = 0] = \"Unmount\", e2[e2.Hidden = 1] = \"Hidden\", e2))(A || {});\nfunction L$1() {\n  let n2 = U$2();\n  return useCallback((r2) => C$1({ mergeRefs: n2, ...r2 }), [n2]);\n}\nfunction C$1({ ourProps: n2, theirProps: r2, slot: e2, defaultTag: a2, features: s2, visible: t2 = !0, name: l, mergeRefs: i2 }) {\n  i2 = i2 ?? $;\n  let o3 = P$1(r2, n2);\n  if (t2) return F(o3, e2, a2, l, i2);\n  let y2 = s2 ?? 0;\n  if (y2 & 2) {\n    let { static: f2 = !1, ...u2 } = o3;\n    if (f2) return F(u2, e2, a2, l, i2);\n  }\n  if (y2 & 1) {\n    let { unmount: f2 = !0, ...u2 } = o3;\n    return u$2(f2 ? 0 : 1, { 0() {\n      return null;\n    }, 1() {\n      return F({ ...u2, hidden: !0, style: { display: \"none\" } }, e2, a2, l, i2);\n    } });\n  }\n  return F(o3, e2, a2, l, i2);\n}\nfunction F(n2, r2 = {}, e2, a2, s2) {\n  let { as: t$12 = e2, children: l, refName: i2 = \"ref\", ...o3 } = h(n2, [\"unmount\", \"static\"]), y2 = n2.ref !== void 0 ? { [i2]: n2.ref } : {}, f2 = typeof l == \"function\" ? l(r2) : l;\n  \"className\" in o3 && o3.className && typeof o3.className == \"function\" && (o3.className = o3.className(r2)), o3[\"aria-labelledby\"] && o3[\"aria-labelledby\"] === o3.id && (o3[\"aria-labelledby\"] = void 0);\n  let u2 = {};\n  if (r2) {\n    let d2 = !1, p2 = [];\n    for (let [c2, T] of Object.entries(r2)) typeof T == \"boolean\" && (d2 = !0), T === !0 && p2.push(c2.replace(/([A-Z])/g, (g) => \\`-\\${g.toLowerCase()}\\`));\n    if (d2) {\n      u2[\"data-headlessui-state\"] = p2.join(\" \");\n      for (let c2 of p2) u2[\\`data-\\${c2}\\`] = \"\";\n    }\n  }\n  if (t$12 === Fragment && (Object.keys(m(o3)).length > 0 || Object.keys(m(u2)).length > 0)) if (!isValidElement(f2) || Array.isArray(f2) && f2.length > 1) {\n    if (Object.keys(m(o3)).length > 0) throw new Error(['Passing props on \"Fragment\"!', \"\", \\`The current component <\\${a2} /> is rendering a \"Fragment\".\\`, \"However we need to passthrough the following props:\", Object.keys(m(o3)).concat(Object.keys(m(u2))).map((d2) => \\`  - \\${d2}\\`).join(\\`\n\\`), \"\", \"You can apply a few solutions:\", ['Add an \\`as=\"...\"\\` prop, to ensure that we render an actual element instead of a \"Fragment\".', \"Render a single element as the child so that we can forward the props onto that element.\"].map((d2) => \\`  - \\${d2}\\`).join(\\`\n\\`)].join(\\`\n\\`));\n  } else {\n    let d2 = f2.props, p2 = d2 == null ? void 0 : d2.className, c2 = typeof p2 == \"function\" ? (...R2) => t(p2(...R2), o3.className) : t(p2, o3.className), T = c2 ? { className: c2 } : {}, g = P$1(f2.props, m(h(o3, [\"ref\"])));\n    for (let R2 in u2) R2 in g && delete u2[R2];\n    return cloneElement(f2, Object.assign({}, g, u2, y2, { ref: s2(H$2(f2), y2.ref) }, T));\n  }\n  return createElement(t$12, Object.assign({}, h(o3, [\"ref\"]), t$12 !== Fragment && y2, t$12 !== Fragment && u2), f2);\n}\nfunction U$2() {\n  let n2 = useRef([]), r2 = useCallback((e2) => {\n    for (let a2 of n2.current) a2 != null && (typeof a2 == \"function\" ? a2(e2) : a2.current = e2);\n  }, []);\n  return (...e2) => {\n    if (!e2.every((a2) => a2 == null)) return n2.current = e2, r2;\n  };\n}\nfunction $(...n2) {\n  return n2.every((r2) => r2 == null) ? void 0 : (r2) => {\n    for (let e2 of n2) e2 != null && (typeof e2 == \"function\" ? e2(r2) : e2.current = r2);\n  };\n}\nfunction P$1(...n2) {\n  if (n2.length === 0) return {};\n  if (n2.length === 1) return n2[0];\n  let r2 = {}, e2 = {};\n  for (let s2 of n2) for (let t2 in s2) t2.startsWith(\"on\") && typeof s2[t2] == \"function\" ? (e2[t2] != null || (e2[t2] = []), e2[t2].push(s2[t2])) : r2[t2] = s2[t2];\n  if (r2.disabled || r2[\"aria-disabled\"]) for (let s2 in e2) /^(on(?:Click|Pointer|Mouse|Key)(?:Down|Up|Press)?)$/.test(s2) && (e2[s2] = [(t2) => {\n    var l;\n    return (l = t2 == null ? void 0 : t2.preventDefault) == null ? void 0 : l.call(t2);\n  }]);\n  for (let s2 in e2) Object.assign(r2, { [s2](t2, ...l) {\n    let i2 = e2[s2];\n    for (let o3 of i2) {\n      if ((t2 instanceof Event || (t2 == null ? void 0 : t2.nativeEvent) instanceof Event) && t2.defaultPrevented) return;\n      o3(t2, ...l);\n    }\n  } });\n  return r2;\n}\nfunction _$1(...n2) {\n  if (n2.length === 0) return {};\n  if (n2.length === 1) return n2[0];\n  let r2 = {}, e2 = {};\n  for (let s2 of n2) for (let t2 in s2) t2.startsWith(\"on\") && typeof s2[t2] == \"function\" ? (e2[t2] != null || (e2[t2] = []), e2[t2].push(s2[t2])) : r2[t2] = s2[t2];\n  for (let s2 in e2) Object.assign(r2, { [s2](...t2) {\n    let l = e2[s2];\n    for (let i2 of l) i2 == null || i2(...t2);\n  } });\n  return r2;\n}\nfunction K(n2) {\n  var r2;\n  return Object.assign(forwardRef(n2), { displayName: (r2 = n2.displayName) != null ? r2 : n2.name });\n}\nfunction m(n2) {\n  let r2 = Object.assign({}, n2);\n  for (let e2 in r2) r2[e2] === void 0 && delete r2[e2];\n  return r2;\n}\nfunction h(n2, r2 = []) {\n  let e2 = Object.assign({}, n2);\n  for (let a2 of r2) a2 in e2 && delete e2[a2];\n  return e2;\n}\nfunction H$2(n2) {\n  return React.version.split(\".\")[0] >= \"19\" ? n2.props.ref : n2.ref;\n}\nlet R = \"button\";\nfunction v(a2, u2) {\n  var p2;\n  let l = a$1(), { disabled: e2 = l || !1, autoFocus: t2 = !1, ...o3 } = a2, { isFocusVisible: r2, focusProps: i2 } = $f7dceffc5ad7768b$export$4e328f61c538687f({ autoFocus: t2 }), { isHovered: s2, hoverProps: T } = $6179b936705e76d3$export$ae780daf29e6d456({ isDisabled: e2 }), { pressed: n2, pressProps: d2 } = w({ disabled: e2 }), f2 = _$1({ ref: u2, type: (p2 = o3.type) != null ? p2 : \"button\", disabled: e2 || void 0, autoFocus: t2 }, i2, T, d2), m2 = useMemo(() => ({ disabled: e2, hover: s2, focus: r2, active: n2, autofocus: t2 }), [e2, s2, r2, n2, t2]);\n  return L$1()({ ourProps: f2, theirProps: o3, slot: m2, defaultTag: R, name: \"Button\" });\n}\nlet H$1 = K(v), e = createContext(void 0);\nfunction u$1() {\n  return useContext(e);\n}\nlet u = Symbol();\nfunction y(...t2) {\n  let n2 = useRef(t2);\n  useEffect(() => {\n    n2.current = t2;\n  }, [t2]);\n  let c2 = o2((e2) => {\n    for (let o3 of n2.current) o3 != null && (typeof o3 == \"function\" ? o3(e2) : o3.current = e2);\n  });\n  return t2.every((e2) => e2 == null || (e2 == null ? void 0 : e2[u])) ? void 0 : c2;\n}\nlet a = createContext(null);\na.displayName = \"DescriptionContext\";\nfunction f() {\n  let r2 = useContext(a);\n  if (r2 === null) {\n    let e2 = new Error(\"You used a <Description /> component, but it is not inside a relevant parent.\");\n    throw Error.captureStackTrace && Error.captureStackTrace(e2, f), e2;\n  }\n  return r2;\n}\nfunction U$1() {\n  var r2, e2;\n  return (e2 = (r2 = useContext(a)) == null ? void 0 : r2.value) != null ? e2 : void 0;\n}\nlet S = \"p\";\nfunction C(r2, e2) {\n  let d2 = useId(), t2 = a$1(), { id: i2 = \\`headlessui-description-\\${d2}\\`, ...l } = r2, n$1 = f(), s2 = y(e2);\n  n(() => n$1.register(i2), [i2, n$1.register]);\n  let o3 = t2 || !1, p2 = useMemo(() => ({ ...n$1.slot, disabled: o3 }), [n$1.slot, o3]), D = { ref: s2, ...n$1.props, id: i2 };\n  return L$1()({ ourProps: D, theirProps: l, slot: p2, defaultTag: S, name: n$1.name || \"Description\" });\n}\nlet _ = K(C);\nObject.assign(_, {});\nlet c = createContext(null);\nc.displayName = \"LabelContext\";\nfunction P() {\n  let r2 = useContext(c);\n  if (r2 === null) {\n    let l = new Error(\"You used a <Label /> component, but it is not inside a relevant parent.\");\n    throw Error.captureStackTrace && Error.captureStackTrace(l, P), l;\n  }\n  return r2;\n}\nfunction I(r2) {\n  var a2, e2, o3;\n  let l = (e2 = (a2 = useContext(c)) == null ? void 0 : a2.value) != null ? e2 : void 0;\n  return ((o3 = void 0) != null ? o3 : 0) > 0 ? [l, ...r2].filter(Boolean).join(\" \") : l;\n}\nlet N = \"label\";\nfunction G(r2, l) {\n  var y$1;\n  let a2 = useId(), e2 = P(), o$12 = u$1(), g = a$1(), { id: t2 = \\`headlessui-label-\\${a2}\\`, htmlFor: s2 = o$12 ?? ((y$1 = e2.props) == null ? void 0 : y$1.htmlFor), passive: m2 = !1, ...i2 } = r2, p2 = y(l);\n  n(() => e2.register(t2), [t2, e2.register]);\n  let u2 = o2((L2) => {\n    let b = L2.currentTarget;\n    if (b instanceof HTMLLabelElement && L2.preventDefault(), e2.props && \"onClick\" in e2.props && typeof e2.props.onClick == \"function\" && e2.props.onClick(L2), b instanceof HTMLLabelElement) {\n      let n2 = document.getElementById(b.htmlFor);\n      if (n2) {\n        let E2 = n2.getAttribute(\"disabled\");\n        if (E2 === \"true\" || E2 === \"\") return;\n        let x = n2.getAttribute(\"aria-disabled\");\n        if (x === \"true\" || x === \"\") return;\n        (n2 instanceof HTMLInputElement && (n2.type === \"radio\" || n2.type === \"checkbox\") || n2.role === \"radio\" || n2.role === \"checkbox\" || n2.role === \"switch\") && n2.click(), n2.focus({ preventScroll: !0 });\n      }\n    }\n  }), d2 = g || !1, C2 = useMemo(() => ({ ...e2.slot, disabled: d2 }), [e2.slot, d2]), f2 = { ref: p2, ...e2.props, id: t2, htmlFor: s2, onClick: u2 };\n  return m2 && (\"onClick\" in f2 && (delete f2.htmlFor, delete f2.onClick), \"onClick\" in i2 && delete i2.onClick), L$1()({ ourProps: f2, theirProps: i2, slot: C2, defaultTag: s2 ? N : \"div\", name: e2.name || \"Label\" });\n}\nlet U = K(G);\nObject.assign(U, {});\nlet L = \"textarea\";\nfunction H(s2, l) {\n  let i2 = useId(), d2 = u$1(), n2 = a$1(), { id: p2 = d2 || \\`headlessui-textarea-\\${i2}\\`, disabled: e2 = n2 || !1, autoFocus: r2 = !1, invalid: a2 = !1, ...T } = s2, f2 = I(), m2 = U$1(), { isFocused: o3, focusProps: u2 } = $f7dceffc5ad7768b$export$4e328f61c538687f({ autoFocus: r2 }), { isHovered: t2, hoverProps: b } = $6179b936705e76d3$export$ae780daf29e6d456({ isDisabled: e2 }), y2 = _$1({ ref: l, id: p2, \"aria-labelledby\": f2, \"aria-describedby\": m2, \"aria-invalid\": a2 ? \"true\" : void 0, disabled: e2 || void 0, autoFocus: r2 }, u2, b), x = useMemo(() => ({ disabled: e2, invalid: a2, hover: t2, focus: o3, autofocus: r2 }), [e2, a2, t2, o3, r2]);\n  return L$1()({ ourProps: y2, theirProps: T, slot: x, defaultTag: L, name: \"Textarea\" });\n}\nlet J = K(H);\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase(), toCamelCase = (string) => string.replace(\n  /^([A-Z])|[\\\\s-_]+(\\\\w)/g,\n  (match, p1, p2) => p2 ? p2.toUpperCase() : p1.toLowerCase()\n), toPascalCase = (string) => {\n  const camelCase = toCamelCase(string);\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}, mergeClasses = (...classes) => classes.filter((className, index, array) => !!className && className.trim() !== \"\" && array.indexOf(className) === index).join(\" \").trim(), hasA11yProp = (props) => {\n  for (const prop in props)\n    if (prop.startsWith(\"aria-\") || prop === \"role\" || prop === \"title\")\n      return !0;\n};\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nvar defaultAttributes = {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 24,\n  height: 24,\n  viewBox: \"0 0 24 24\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  strokeWidth: 2,\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\"\n};\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst Icon = forwardRef(\n  ({\n    color = \"currentColor\",\n    size = 24,\n    strokeWidth = 2,\n    absoluteStrokeWidth,\n    className = \"\",\n    children,\n    iconNode,\n    ...rest\n  }, ref) => createElement(\n    \"svg\",\n    {\n      ref,\n      ...defaultAttributes,\n      width: size,\n      height: size,\n      stroke: color,\n      strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n      className: mergeClasses(\"lucide\", className),\n      ...!children && !hasA11yProp(rest) && { \"aria-hidden\": \"true\" },\n      ...rest\n    },\n    [\n      ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n      ...Array.isArray(children) ? children : [children]\n    ]\n  )\n);\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst createLucideIcon = (iconName, iconNode) => {\n  const Component = forwardRef(\n    ({ className, ...props }, ref) => createElement(Icon, {\n      ref,\n      iconNode,\n      className: mergeClasses(\n        \\`lucide-\\${toKebabCase(toPascalCase(iconName))}\\`,\n        \\`lucide-\\${iconName}\\`,\n        className\n      ),\n      ...props\n    })\n  );\n  return Component.displayName = toPascalCase(iconName), Component;\n};\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$9 = [[\"path\", { d: \"m6 9 6 6 6-6\", key: \"qrunsl\" }]], ChevronDown = createLucideIcon(\"chevron-down\", __iconNode$9);\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$8 = [[\"path\", { d: \"m18 15-6-6-6 6\", key: \"153udz\" }]], ChevronUp = createLucideIcon(\"chevron-up\", __iconNode$8);\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$7 = [\n  [\"path\", { d: \"M7.9 20A9 9 0 1 0 4 16.1L2 22Z\", key: \"vv11sd\" }]\n], MessageCircle = createLucideIcon(\"message-circle\", __iconNode$7);\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$6 = [\n  [\"path\", { d: \"M5 12h14\", key: \"1ays0h\" }],\n  [\"path\", { d: \"M12 5v14\", key: \"s699le\" }]\n], Plus = createLucideIcon(\"plus\", __iconNode$6);\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$5 = [\n  [\n    \"path\",\n    {\n      d: \"M15.39 4.39a1 1 0 0 0 1.68-.474 2.5 2.5 0 1 1 3.014 3.015 1 1 0 0 0-.474 1.68l1.683 1.682a2.414 2.414 0 0 1 0 3.414L19.61 15.39a1 1 0 0 1-1.68-.474 2.5 2.5 0 1 0-3.014 3.015 1 1 0 0 1 .474 1.68l-1.683 1.682a2.414 2.414 0 0 1-3.414 0L8.61 19.61a1 1 0 0 0-1.68.474 2.5 2.5 0 1 1-3.014-3.015 1 1 0 0 0 .474-1.68l-1.683-1.682a2.414 2.414 0 0 1 0-3.414L4.39 8.61a1 1 0 0 1 1.68.474 2.5 2.5 0 1 0 3.014-3.015 1 1 0 0 1-.474-1.68l1.683-1.682a2.414 2.414 0 0 1 3.414 0z\",\n      key: \"w46dr5\"\n    }\n  ]\n], Puzzle = createLucideIcon(\"puzzle\", __iconNode$5);\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$4 = [\n  [\"path\", { d: \"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\", key: \"v9h5vc\" }],\n  [\"path\", { d: \"M21 3v5h-5\", key: \"1q7to0\" }],\n  [\"path\", { d: \"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\", key: \"3uifl3\" }],\n  [\"path\", { d: \"M8 16H3v5\", key: \"1cv678\" }]\n], RefreshCw = createLucideIcon(\"refresh-cw\", __iconNode$4);\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$3 = [\n  [\n    \"path\",\n    {\n      d: \"M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z\",\n      key: \"1ffxy3\"\n    }\n  ],\n  [\"path\", { d: \"m21.854 2.147-10.94 10.939\", key: \"12cjpa\" }]\n], Send = createLucideIcon(\"send\", __iconNode$3);\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$2 = [\n  [\n    \"path\",\n    {\n      d: \"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z\",\n      key: \"1qme2f\"\n    }\n  ],\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"3\", key: \"1v7zrd\" }]\n], Settings = createLucideIcon(\"settings\", __iconNode$2);\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$1 = [\n  [\"path\", { d: \"M3 6h18\", key: \"d0wm0j\" }],\n  [\"path\", { d: \"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\", key: \"4alrt4\" }],\n  [\"path\", { d: \"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\", key: \"v07s0e\" }],\n  [\"line\", { x1: \"10\", x2: \"10\", y1: \"11\", y2: \"17\", key: \"1uufr5\" }],\n  [\"line\", { x1: \"14\", x2: \"14\", y1: \"11\", y2: \"17\", key: \"xtxkd\" }]\n], Trash2 = createLucideIcon(\"trash-2\", __iconNode$1);\n/**\n * @license lucide-react v0.523.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode = [\n  [\"path\", { d: \"M12 20h.01\", key: \"zekei9\" }],\n  [\"path\", { d: \"M8.5 16.429a5 5 0 0 1 7 0\", key: \"1bycff\" }],\n  [\"path\", { d: \"M5 12.859a10 10 0 0 1 5.17-2.69\", key: \"1dl1wf\" }],\n  [\"path\", { d: \"M19 12.859a10 10 0 0 0-2.007-1.523\", key: \"4k23kn\" }],\n  [\"path\", { d: \"M2 8.82a15 15 0 0 1 4.177-2.643\", key: \"1grhjp\" }],\n  [\"path\", { d: \"M22 8.82a15 15 0 0 0-11.288-3.764\", key: \"z3jwby\" }],\n  [\"path\", { d: \"m2 2 20 20\", key: \"1ooewy\" }]\n], WifiOff = createLucideIcon(\"wifi-off\", __iconNode), BROWSER_ALIASES_MAP = {\n  \"Amazon Silk\": \"amazon_silk\",\n  \"Android Browser\": \"android\",\n  Bada: \"bada\",\n  BlackBerry: \"blackberry\",\n  Chrome: \"chrome\",\n  Chromium: \"chromium\",\n  Electron: \"electron\",\n  Epiphany: \"epiphany\",\n  Firefox: \"firefox\",\n  Focus: \"focus\",\n  Generic: \"generic\",\n  \"Google Search\": \"google_search\",\n  Googlebot: \"googlebot\",\n  \"Internet Explorer\": \"ie\",\n  \"K-Meleon\": \"k_meleon\",\n  Maxthon: \"maxthon\",\n  \"Microsoft Edge\": \"edge\",\n  \"MZ Browser\": \"mz\",\n  \"NAVER Whale Browser\": \"naver\",\n  Opera: \"opera\",\n  \"Opera Coast\": \"opera_coast\",\n  PhantomJS: \"phantomjs\",\n  Puffin: \"puffin\",\n  QupZilla: \"qupzilla\",\n  QQ: \"qq\",\n  QQLite: \"qqlite\",\n  Safari: \"safari\",\n  Sailfish: \"sailfish\",\n  \"Samsung Internet for Android\": \"samsung_internet\",\n  SeaMonkey: \"seamonkey\",\n  Sleipnir: \"sleipnir\",\n  Swing: \"swing\",\n  Tizen: \"tizen\",\n  \"UC Browser\": \"uc\",\n  Vivaldi: \"vivaldi\",\n  \"WebOS Browser\": \"webos\",\n  WeChat: \"wechat\",\n  \"Yandex Browser\": \"yandex\",\n  Roku: \"roku\"\n}, BROWSER_MAP = {\n  amazon_silk: \"Amazon Silk\",\n  android: \"Android Browser\",\n  bada: \"Bada\",\n  blackberry: \"BlackBerry\",\n  chrome: \"Chrome\",\n  chromium: \"Chromium\",\n  electron: \"Electron\",\n  epiphany: \"Epiphany\",\n  firefox: \"Firefox\",\n  focus: \"Focus\",\n  generic: \"Generic\",\n  googlebot: \"Googlebot\",\n  google_search: \"Google Search\",\n  ie: \"Internet Explorer\",\n  k_meleon: \"K-Meleon\",\n  maxthon: \"Maxthon\",\n  edge: \"Microsoft Edge\",\n  mz: \"MZ Browser\",\n  naver: \"NAVER Whale Browser\",\n  opera: \"Opera\",\n  opera_coast: \"Opera Coast\",\n  phantomjs: \"PhantomJS\",\n  puffin: \"Puffin\",\n  qupzilla: \"QupZilla\",\n  qq: \"QQ Browser\",\n  qqlite: \"QQ Browser Lite\",\n  safari: \"Safari\",\n  sailfish: \"Sailfish\",\n  samsung_internet: \"Samsung Internet for Android\",\n  seamonkey: \"SeaMonkey\",\n  sleipnir: \"Sleipnir\",\n  swing: \"Swing\",\n  tizen: \"Tizen\",\n  uc: \"UC Browser\",\n  vivaldi: \"Vivaldi\",\n  webos: \"WebOS Browser\",\n  wechat: \"WeChat\",\n  yandex: \"Yandex Browser\"\n}, PLATFORMS_MAP = {\n  tablet: \"tablet\",\n  mobile: \"mobile\",\n  desktop: \"desktop\",\n  tv: \"tv\"\n}, OS_MAP = {\n  WindowsPhone: \"Windows Phone\",\n  Windows: \"Windows\",\n  MacOS: \"macOS\",\n  iOS: \"iOS\",\n  Android: \"Android\",\n  WebOS: \"WebOS\",\n  BlackBerry: \"BlackBerry\",\n  Bada: \"Bada\",\n  Tizen: \"Tizen\",\n  Linux: \"Linux\",\n  ChromeOS: \"Chrome OS\",\n  PlayStation4: \"PlayStation 4\",\n  Roku: \"Roku\"\n}, ENGINE_MAP = {\n  EdgeHTML: \"EdgeHTML\",\n  Blink: \"Blink\",\n  Trident: \"Trident\",\n  Presto: \"Presto\",\n  Gecko: \"Gecko\",\n  WebKit: \"WebKit\"\n};\nclass Utils {\n  /**\n   * Get first matched item for a string\n   * @param {RegExp} regexp\n   * @param {String} ua\n   * @return {Array|{index: number, input: string}|*|boolean|string}\n   */\n  static getFirstMatch(regexp, ua) {\n    const match = ua.match(regexp);\n    return match && match.length > 0 && match[1] || \"\";\n  }\n  /**\n   * Get second matched item for a string\n   * @param regexp\n   * @param {String} ua\n   * @return {Array|{index: number, input: string}|*|boolean|string}\n   */\n  static getSecondMatch(regexp, ua) {\n    const match = ua.match(regexp);\n    return match && match.length > 1 && match[2] || \"\";\n  }\n  /**\n   * Match a regexp and return a constant or undefined\n   * @param {RegExp} regexp\n   * @param {String} ua\n   * @param {*} _const Any const that will be returned if regexp matches the string\n   * @return {*}\n   */\n  static matchAndReturnConst(regexp, ua, _const) {\n    if (regexp.test(ua))\n      return _const;\n  }\n  static getWindowsVersionName(version) {\n    switch (version) {\n      case \"NT\":\n        return \"NT\";\n      case \"XP\":\n        return \"XP\";\n      case \"NT 5.0\":\n        return \"2000\";\n      case \"NT 5.1\":\n        return \"XP\";\n      case \"NT 5.2\":\n        return \"2003\";\n      case \"NT 6.0\":\n        return \"Vista\";\n      case \"NT 6.1\":\n        return \"7\";\n      case \"NT 6.2\":\n        return \"8\";\n      case \"NT 6.3\":\n        return \"8.1\";\n      case \"NT 10.0\":\n        return \"10\";\n      default:\n        return;\n    }\n  }\n  /**\n   * Get macOS version name\n   *    10.5 - Leopard\n   *    10.6 - Snow Leopard\n   *    10.7 - Lion\n   *    10.8 - Mountain Lion\n   *    10.9 - Mavericks\n   *    10.10 - Yosemite\n   *    10.11 - El Capitan\n   *    10.12 - Sierra\n   *    10.13 - High Sierra\n   *    10.14 - Mojave\n   *    10.15 - Catalina\n   *\n   * @example\n   *   getMacOSVersionName(\"10.14\") // 'Mojave'\n   *\n   * @param  {string} version\n   * @return {string} versionName\n   */\n  static getMacOSVersionName(version) {\n    const v2 = version.split(\".\").splice(0, 2).map((s2) => parseInt(s2, 10) || 0);\n    if (v2.push(0), v2[0] === 10)\n      switch (v2[1]) {\n        case 5:\n          return \"Leopard\";\n        case 6:\n          return \"Snow Leopard\";\n        case 7:\n          return \"Lion\";\n        case 8:\n          return \"Mountain Lion\";\n        case 9:\n          return \"Mavericks\";\n        case 10:\n          return \"Yosemite\";\n        case 11:\n          return \"El Capitan\";\n        case 12:\n          return \"Sierra\";\n        case 13:\n          return \"High Sierra\";\n        case 14:\n          return \"Mojave\";\n        case 15:\n          return \"Catalina\";\n        default:\n          return;\n      }\n  }\n  /**\n   * Get Android version name\n   *    1.5 - Cupcake\n   *    1.6 - Donut\n   *    2.0 - Eclair\n   *    2.1 - Eclair\n   *    2.2 - Froyo\n   *    2.x - Gingerbread\n   *    3.x - Honeycomb\n   *    4.0 - Ice Cream Sandwich\n   *    4.1 - Jelly Bean\n   *    4.4 - KitKat\n   *    5.x - Lollipop\n   *    6.x - Marshmallow\n   *    7.x - Nougat\n   *    8.x - Oreo\n   *    9.x - Pie\n   *\n   * @example\n   *   getAndroidVersionName(\"7.0\") // 'Nougat'\n   *\n   * @param  {string} version\n   * @return {string} versionName\n   */\n  static getAndroidVersionName(version) {\n    const v2 = version.split(\".\").splice(0, 2).map((s2) => parseInt(s2, 10) || 0);\n    if (v2.push(0), !(v2[0] === 1 && v2[1] < 5)) {\n      if (v2[0] === 1 && v2[1] < 6) return \"Cupcake\";\n      if (v2[0] === 1 && v2[1] >= 6) return \"Donut\";\n      if (v2[0] === 2 && v2[1] < 2) return \"Eclair\";\n      if (v2[0] === 2 && v2[1] === 2) return \"Froyo\";\n      if (v2[0] === 2 && v2[1] > 2) return \"Gingerbread\";\n      if (v2[0] === 3) return \"Honeycomb\";\n      if (v2[0] === 4 && v2[1] < 1) return \"Ice Cream Sandwich\";\n      if (v2[0] === 4 && v2[1] < 4) return \"Jelly Bean\";\n      if (v2[0] === 4 && v2[1] >= 4) return \"KitKat\";\n      if (v2[0] === 5) return \"Lollipop\";\n      if (v2[0] === 6) return \"Marshmallow\";\n      if (v2[0] === 7) return \"Nougat\";\n      if (v2[0] === 8) return \"Oreo\";\n      if (v2[0] === 9) return \"Pie\";\n    }\n  }\n  /**\n   * Get version precisions count\n   *\n   * @example\n   *   getVersionPrecision(\"1.10.3\") // 3\n   *\n   * @param  {string} version\n   * @return {number}\n   */\n  static getVersionPrecision(version) {\n    return version.split(\".\").length;\n  }\n  /**\n   * Calculate browser version weight\n   *\n   * @example\n   *   compareVersions('1.10.2.1',  '1.8.2.1.90')    // 1\n   *   compareVersions('1.010.2.1', '1.09.2.1.90');  // 1\n   *   compareVersions('1.10.2.1',  '1.10.2.1');     // 0\n   *   compareVersions('1.10.2.1',  '1.0800.2');     // -1\n   *   compareVersions('1.10.2.1',  '1.10',  true);  // 0\n   *\n   * @param {String} versionA versions versions to compare\n   * @param {String} versionB versions versions to compare\n   * @param {boolean} [isLoose] enable loose comparison\n   * @return {Number} comparison result: -1 when versionA is lower,\n   * 1 when versionA is bigger, 0 when both equal\n   */\n  /* eslint consistent-return: 1 */\n  static compareVersions(versionA, versionB, isLoose = !1) {\n    const versionAPrecision = Utils.getVersionPrecision(versionA), versionBPrecision = Utils.getVersionPrecision(versionB);\n    let precision = Math.max(versionAPrecision, versionBPrecision), lastPrecision = 0;\n    const chunks = Utils.map([versionA, versionB], (version) => {\n      const delta = precision - Utils.getVersionPrecision(version), _version = version + new Array(delta + 1).join(\".0\");\n      return Utils.map(_version.split(\".\"), (chunk) => new Array(20 - chunk.length).join(\"0\") + chunk).reverse();\n    });\n    for (isLoose && (lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision)), precision -= 1; precision >= lastPrecision; ) {\n      if (chunks[0][precision] > chunks[1][precision])\n        return 1;\n      if (chunks[0][precision] === chunks[1][precision]) {\n        if (precision === lastPrecision)\n          return 0;\n        precision -= 1;\n      } else if (chunks[0][precision] < chunks[1][precision])\n        return -1;\n    }\n  }\n  /**\n   * Array::map polyfill\n   *\n   * @param  {Array} arr\n   * @param  {Function} iterator\n   * @return {Array}\n   */\n  static map(arr, iterator) {\n    const result = [];\n    let i2;\n    if (Array.prototype.map)\n      return Array.prototype.map.call(arr, iterator);\n    for (i2 = 0; i2 < arr.length; i2 += 1)\n      result.push(iterator(arr[i2]));\n    return result;\n  }\n  /**\n   * Array::find polyfill\n   *\n   * @param  {Array} arr\n   * @param  {Function} predicate\n   * @return {Array}\n   */\n  static find(arr, predicate) {\n    let i2, l;\n    if (Array.prototype.find)\n      return Array.prototype.find.call(arr, predicate);\n    for (i2 = 0, l = arr.length; i2 < l; i2 += 1) {\n      const value = arr[i2];\n      if (predicate(value, i2))\n        return value;\n    }\n  }\n  /**\n   * Object::assign polyfill\n   *\n   * @param  {Object} obj\n   * @param  {Object} ...objs\n   * @return {Object}\n   */\n  static assign(obj, ...assigners) {\n    const result = obj;\n    let i2, l;\n    if (Object.assign)\n      return Object.assign(obj, ...assigners);\n    for (i2 = 0, l = assigners.length; i2 < l; i2 += 1) {\n      const assigner = assigners[i2];\n      typeof assigner == \"object\" && assigner !== null && Object.keys(assigner).forEach((key) => {\n        result[key] = assigner[key];\n      });\n    }\n    return obj;\n  }\n  /**\n   * Get short version/alias for a browser name\n   *\n   * @example\n   *   getBrowserAlias('Microsoft Edge') // edge\n   *\n   * @param  {string} browserName\n   * @return {string}\n   */\n  static getBrowserAlias(browserName) {\n    return BROWSER_ALIASES_MAP[browserName];\n  }\n  /**\n   * Get short version/alias for a browser name\n   *\n   * @example\n   *   getBrowserAlias('edge') // Microsoft Edge\n   *\n   * @param  {string} browserAlias\n   * @return {string}\n   */\n  static getBrowserTypeByAlias(browserAlias) {\n    return BROWSER_MAP[browserAlias] || \"\";\n  }\n}\nconst commonVersionIdentifier = /version\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, browsersList = [\n  /* Googlebot */\n  {\n    test: [/googlebot/i],\n    describe(ua) {\n      const browser = {\n        name: \"Googlebot\"\n      }, version = Utils.getFirstMatch(/googlebot\\\\/(\\\\d+(\\\\.\\\\d+))/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  /* Opera < 13.0 */\n  {\n    test: [/opera/i],\n    describe(ua) {\n      const browser = {\n        name: \"Opera\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:opera)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  /* Opera > 13.0 */\n  {\n    test: [/opr\\\\/|opios/i],\n    describe(ua) {\n      const browser = {\n        name: \"Opera\"\n      }, version = Utils.getFirstMatch(/(?:opr|opios)[\\\\s/](\\\\S+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/SamsungBrowser/i],\n    describe(ua) {\n      const browser = {\n        name: \"Samsung Internet for Android\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:SamsungBrowser)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/Whale/i],\n    describe(ua) {\n      const browser = {\n        name: \"NAVER Whale Browser\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:whale)[\\\\s/](\\\\d+(?:\\\\.\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/MZBrowser/i],\n    describe(ua) {\n      const browser = {\n        name: \"MZ Browser\"\n      }, version = Utils.getFirstMatch(/(?:MZBrowser)[\\\\s/](\\\\d+(?:\\\\.\\\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/focus/i],\n    describe(ua) {\n      const browser = {\n        name: \"Focus\"\n      }, version = Utils.getFirstMatch(/(?:focus)[\\\\s/](\\\\d+(?:\\\\.\\\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/swing/i],\n    describe(ua) {\n      const browser = {\n        name: \"Swing\"\n      }, version = Utils.getFirstMatch(/(?:swing)[\\\\s/](\\\\d+(?:\\\\.\\\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/coast/i],\n    describe(ua) {\n      const browser = {\n        name: \"Opera Coast\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:coast)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/opt\\\\/\\\\d+(?:.?_?\\\\d+)+/i],\n    describe(ua) {\n      const browser = {\n        name: \"Opera Touch\"\n      }, version = Utils.getFirstMatch(/(?:opt)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/yabrowser/i],\n    describe(ua) {\n      const browser = {\n        name: \"Yandex Browser\"\n      }, version = Utils.getFirstMatch(/(?:yabrowser)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/ucbrowser/i],\n    describe(ua) {\n      const browser = {\n        name: \"UC Browser\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:ucbrowser)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/Maxthon|mxios/i],\n    describe(ua) {\n      const browser = {\n        name: \"Maxthon\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/epiphany/i],\n    describe(ua) {\n      const browser = {\n        name: \"Epiphany\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:epiphany)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/puffin/i],\n    describe(ua) {\n      const browser = {\n        name: \"Puffin\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:puffin)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/sleipnir/i],\n    describe(ua) {\n      const browser = {\n        name: \"Sleipnir\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:sleipnir)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/k-meleon/i],\n    describe(ua) {\n      const browser = {\n        name: \"K-Meleon\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:k-meleon)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/micromessenger/i],\n    describe(ua) {\n      const browser = {\n        name: \"WeChat\"\n      }, version = Utils.getFirstMatch(/(?:micromessenger)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/qqbrowser/i],\n    describe(ua) {\n      const browser = {\n        name: /qqbrowserlite/i.test(ua) ? \"QQ Browser Lite\" : \"QQ Browser\"\n      }, version = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/msie|trident/i],\n    describe(ua) {\n      const browser = {\n        name: \"Internet Explorer\"\n      }, version = Utils.getFirstMatch(/(?:msie |rv:)(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/\\\\sedg\\\\//i],\n    describe(ua) {\n      const browser = {\n        name: \"Microsoft Edge\"\n      }, version = Utils.getFirstMatch(/\\\\sedg\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/edg([ea]|ios)/i],\n    describe(ua) {\n      const browser = {\n        name: \"Microsoft Edge\"\n      }, version = Utils.getSecondMatch(/edg([ea]|ios)\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/vivaldi/i],\n    describe(ua) {\n      const browser = {\n        name: \"Vivaldi\"\n      }, version = Utils.getFirstMatch(/vivaldi\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/seamonkey/i],\n    describe(ua) {\n      const browser = {\n        name: \"SeaMonkey\"\n      }, version = Utils.getFirstMatch(/seamonkey\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/sailfish/i],\n    describe(ua) {\n      const browser = {\n        name: \"Sailfish\"\n      }, version = Utils.getFirstMatch(/sailfish\\\\s?browser\\\\/(\\\\d+(\\\\.\\\\d+)?)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/silk/i],\n    describe(ua) {\n      const browser = {\n        name: \"Amazon Silk\"\n      }, version = Utils.getFirstMatch(/silk\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/phantom/i],\n    describe(ua) {\n      const browser = {\n        name: \"PhantomJS\"\n      }, version = Utils.getFirstMatch(/phantomjs\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/slimerjs/i],\n    describe(ua) {\n      const browser = {\n        name: \"SlimerJS\"\n      }, version = Utils.getFirstMatch(/slimerjs\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/blackberry|\\\\bbb\\\\d+/i, /rim\\\\stablet/i],\n    describe(ua) {\n      const browser = {\n        name: \"BlackBerry\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/blackberry[\\\\d]+\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/(web|hpw)[o0]s/i],\n    describe(ua) {\n      const browser = {\n        name: \"WebOS Browser\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/bada/i],\n    describe(ua) {\n      const browser = {\n        name: \"Bada\"\n      }, version = Utils.getFirstMatch(/dolfin\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/tizen/i],\n    describe(ua) {\n      const browser = {\n        name: \"Tizen\"\n      }, version = Utils.getFirstMatch(/(?:tizen\\\\s?)?browser\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/qupzilla/i],\n    describe(ua) {\n      const browser = {\n        name: \"QupZilla\"\n      }, version = Utils.getFirstMatch(/(?:qupzilla)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/firefox|iceweasel|fxios/i],\n    describe(ua) {\n      const browser = {\n        name: \"Firefox\"\n      }, version = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/electron/i],\n    describe(ua) {\n      const browser = {\n        name: \"Electron\"\n      }, version = Utils.getFirstMatch(/(?:electron)\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/MiuiBrowser/i],\n    describe(ua) {\n      const browser = {\n        name: \"Miui\"\n      }, version = Utils.getFirstMatch(/(?:MiuiBrowser)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/chromium/i],\n    describe(ua) {\n      const browser = {\n        name: \"Chromium\"\n      }, version = Utils.getFirstMatch(/(?:chromium)[\\\\s/](\\\\d+(\\\\.?_?\\\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/chrome|crios|crmo/i],\n    describe(ua) {\n      const browser = {\n        name: \"Chrome\"\n      }, version = Utils.getFirstMatch(/(?:chrome|crios|crmo)\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  {\n    test: [/GSA/i],\n    describe(ua) {\n      const browser = {\n        name: \"Google Search\"\n      }, version = Utils.getFirstMatch(/(?:GSA)\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  /* Android Browser */\n  {\n    test(parser) {\n      const notLikeAndroid = !parser.test(/like android/i), butAndroid = parser.test(/android/i);\n      return notLikeAndroid && butAndroid;\n    },\n    describe(ua) {\n      const browser = {\n        name: \"Android Browser\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  /* PlayStation 4 */\n  {\n    test: [/playstation 4/i],\n    describe(ua) {\n      const browser = {\n        name: \"PlayStation 4\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  /* Safari */\n  {\n    test: [/safari|applewebkit/i],\n    describe(ua) {\n      const browser = {\n        name: \"Safari\"\n      }, version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n      return version && (browser.version = version), browser;\n    }\n  },\n  /* Something else */\n  {\n    test: [/.*/i],\n    describe(ua) {\n      const regexpWithoutDeviceSpec = /^(.*)\\\\/(.*) /, regexpWithDeviceSpec = /^(.*)\\\\/(.*)[ \\\\t]\\\\((.*)/, regexp = ua.search(\"\\\\\\\\(\") !== -1 ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;\n      return {\n        name: Utils.getFirstMatch(regexp, ua),\n        version: Utils.getSecondMatch(regexp, ua)\n      };\n    }\n  }\n], osParsersList = [\n  /* Roku */\n  {\n    test: [/Roku\\\\/DVP/],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/Roku\\\\/DVP-(\\\\d+\\\\.\\\\d+)/i, ua);\n      return {\n        name: OS_MAP.Roku,\n        version\n      };\n    }\n  },\n  /* Windows Phone */\n  {\n    test: [/windows phone/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/windows phone (?:os)?\\\\s?(\\\\d+(\\\\.\\\\d+)*)/i, ua);\n      return {\n        name: OS_MAP.WindowsPhone,\n        version\n      };\n    }\n  },\n  /* Windows */\n  {\n    test: [/windows /i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/Windows ((NT|XP)( \\\\d\\\\d?.\\\\d)?)/i, ua), versionName = Utils.getWindowsVersionName(version);\n      return {\n        name: OS_MAP.Windows,\n        version,\n        versionName\n      };\n    }\n  },\n  /* Firefox on iPad */\n  {\n    test: [/Macintosh(.*?) FxiOS(.*?)\\\\//],\n    describe(ua) {\n      const result = {\n        name: OS_MAP.iOS\n      }, version = Utils.getSecondMatch(/(Version\\\\/)(\\\\d[\\\\d.]+)/, ua);\n      return version && (result.version = version), result;\n    }\n  },\n  /* macOS */\n  {\n    test: [/macintosh/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/mac os x (\\\\d+(\\\\.?_?\\\\d+)+)/i, ua).replace(/[_\\\\s]/g, \".\"), versionName = Utils.getMacOSVersionName(version), os = {\n        name: OS_MAP.MacOS,\n        version\n      };\n      return versionName && (os.versionName = versionName), os;\n    }\n  },\n  /* iOS */\n  {\n    test: [/(ipod|iphone|ipad)/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/os (\\\\d+([_\\\\s]\\\\d+)*) like mac os x/i, ua).replace(/[_\\\\s]/g, \".\");\n      return {\n        name: OS_MAP.iOS,\n        version\n      };\n    }\n  },\n  /* Android */\n  {\n    test(parser) {\n      const notLikeAndroid = !parser.test(/like android/i), butAndroid = parser.test(/android/i);\n      return notLikeAndroid && butAndroid;\n    },\n    describe(ua) {\n      const version = Utils.getFirstMatch(/android[\\\\s/-](\\\\d+(\\\\.\\\\d+)*)/i, ua), versionName = Utils.getAndroidVersionName(version), os = {\n        name: OS_MAP.Android,\n        version\n      };\n      return versionName && (os.versionName = versionName), os;\n    }\n  },\n  /* WebOS */\n  {\n    test: [/(web|hpw)[o0]s/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/(?:web|hpw)[o0]s\\\\/(\\\\d+(\\\\.\\\\d+)*)/i, ua), os = {\n        name: OS_MAP.WebOS\n      };\n      return version && version.length && (os.version = version), os;\n    }\n  },\n  /* BlackBerry */\n  {\n    test: [/blackberry|\\\\bbb\\\\d+/i, /rim\\\\stablet/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/rim\\\\stablet\\\\sos\\\\s(\\\\d+(\\\\.\\\\d+)*)/i, ua) || Utils.getFirstMatch(/blackberry\\\\d+\\\\/(\\\\d+([_\\\\s]\\\\d+)*)/i, ua) || Utils.getFirstMatch(/\\\\bbb(\\\\d+)/i, ua);\n      return {\n        name: OS_MAP.BlackBerry,\n        version\n      };\n    }\n  },\n  /* Bada */\n  {\n    test: [/bada/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/bada\\\\/(\\\\d+(\\\\.\\\\d+)*)/i, ua);\n      return {\n        name: OS_MAP.Bada,\n        version\n      };\n    }\n  },\n  /* Tizen */\n  {\n    test: [/tizen/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/tizen[/\\\\s](\\\\d+(\\\\.\\\\d+)*)/i, ua);\n      return {\n        name: OS_MAP.Tizen,\n        version\n      };\n    }\n  },\n  /* Linux */\n  {\n    test: [/linux/i],\n    describe() {\n      return {\n        name: OS_MAP.Linux\n      };\n    }\n  },\n  /* Chrome OS */\n  {\n    test: [/CrOS/],\n    describe() {\n      return {\n        name: OS_MAP.ChromeOS\n      };\n    }\n  },\n  /* Playstation 4 */\n  {\n    test: [/PlayStation 4/],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/PlayStation 4[/\\\\s](\\\\d+(\\\\.\\\\d+)*)/i, ua);\n      return {\n        name: OS_MAP.PlayStation4,\n        version\n      };\n    }\n  }\n], platformParsersList = [\n  /* Googlebot */\n  {\n    test: [/googlebot/i],\n    describe() {\n      return {\n        type: \"bot\",\n        vendor: \"Google\"\n      };\n    }\n  },\n  /* Huawei */\n  {\n    test: [/huawei/i],\n    describe(ua) {\n      const model = Utils.getFirstMatch(/(can-l01)/i, ua) && \"Nova\", platform = {\n        type: PLATFORMS_MAP.mobile,\n        vendor: \"Huawei\"\n      };\n      return model && (platform.model = model), platform;\n    }\n  },\n  /* Nexus Tablet */\n  {\n    test: [/nexus\\\\s*(?:7|8|9|10).*/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: \"Nexus\"\n      };\n    }\n  },\n  /* iPad */\n  {\n    test: [/ipad/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: \"Apple\",\n        model: \"iPad\"\n      };\n    }\n  },\n  /* Firefox on iPad */\n  {\n    test: [/Macintosh(.*?) FxiOS(.*?)\\\\//],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: \"Apple\",\n        model: \"iPad\"\n      };\n    }\n  },\n  /* Amazon Kindle Fire */\n  {\n    test: [/kftt build/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: \"Amazon\",\n        model: \"Kindle Fire HD 7\"\n      };\n    }\n  },\n  /* Another Amazon Tablet with Silk */\n  {\n    test: [/silk/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: \"Amazon\"\n      };\n    }\n  },\n  /* Tablet */\n  {\n    test: [/tablet(?! pc)/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet\n      };\n    }\n  },\n  /* iPod/iPhone */\n  {\n    test(parser) {\n      const iDevice = parser.test(/ipod|iphone/i), likeIDevice = parser.test(/like (ipod|iphone)/i);\n      return iDevice && !likeIDevice;\n    },\n    describe(ua) {\n      const model = Utils.getFirstMatch(/(ipod|iphone)/i, ua);\n      return {\n        type: PLATFORMS_MAP.mobile,\n        vendor: \"Apple\",\n        model\n      };\n    }\n  },\n  /* Nexus Mobile */\n  {\n    test: [/nexus\\\\s*[0-6].*/i, /galaxy nexus/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n        vendor: \"Nexus\"\n      };\n    }\n  },\n  /* Mobile */\n  {\n    test: [/[^-]mobi/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile\n      };\n    }\n  },\n  /* BlackBerry */\n  {\n    test(parser) {\n      return parser.getBrowserName(!0) === \"blackberry\";\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n        vendor: \"BlackBerry\"\n      };\n    }\n  },\n  /* Bada */\n  {\n    test(parser) {\n      return parser.getBrowserName(!0) === \"bada\";\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile\n      };\n    }\n  },\n  /* Windows Phone */\n  {\n    test(parser) {\n      return parser.getBrowserName() === \"windows phone\";\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n        vendor: \"Microsoft\"\n      };\n    }\n  },\n  /* Android Tablet */\n  {\n    test(parser) {\n      const osMajorVersion = Number(String(parser.getOSVersion()).split(\".\")[0]);\n      return parser.getOSName(!0) === \"android\" && osMajorVersion >= 3;\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet\n      };\n    }\n  },\n  /* Android Mobile */\n  {\n    test(parser) {\n      return parser.getOSName(!0) === \"android\";\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile\n      };\n    }\n  },\n  /* desktop */\n  {\n    test(parser) {\n      return parser.getOSName(!0) === \"macos\";\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.desktop,\n        vendor: \"Apple\"\n      };\n    }\n  },\n  /* Windows */\n  {\n    test(parser) {\n      return parser.getOSName(!0) === \"windows\";\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.desktop\n      };\n    }\n  },\n  /* Linux */\n  {\n    test(parser) {\n      return parser.getOSName(!0) === \"linux\";\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.desktop\n      };\n    }\n  },\n  /* PlayStation 4 */\n  {\n    test(parser) {\n      return parser.getOSName(!0) === \"playstation 4\";\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tv\n      };\n    }\n  },\n  /* Roku */\n  {\n    test(parser) {\n      return parser.getOSName(!0) === \"roku\";\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tv\n      };\n    }\n  }\n], enginesParsersList = [\n  /* EdgeHTML */\n  {\n    test(parser) {\n      return parser.getBrowserName(!0) === \"microsoft edge\";\n    },\n    describe(ua) {\n      if (/\\\\sedg\\\\//i.test(ua))\n        return {\n          name: ENGINE_MAP.Blink\n        };\n      const version = Utils.getFirstMatch(/edge\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return {\n        name: ENGINE_MAP.EdgeHTML,\n        version\n      };\n    }\n  },\n  /* Trident */\n  {\n    test: [/trident/i],\n    describe(ua) {\n      const engine = {\n        name: ENGINE_MAP.Trident\n      }, version = Utils.getFirstMatch(/trident\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (engine.version = version), engine;\n    }\n  },\n  /* Presto */\n  {\n    test(parser) {\n      return parser.test(/presto/i);\n    },\n    describe(ua) {\n      const engine = {\n        name: ENGINE_MAP.Presto\n      }, version = Utils.getFirstMatch(/presto\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (engine.version = version), engine;\n    }\n  },\n  /* Gecko */\n  {\n    test(parser) {\n      const isGecko = parser.test(/gecko/i), likeGecko = parser.test(/like gecko/i);\n      return isGecko && !likeGecko;\n    },\n    describe(ua) {\n      const engine = {\n        name: ENGINE_MAP.Gecko\n      }, version = Utils.getFirstMatch(/gecko\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (engine.version = version), engine;\n    }\n  },\n  /* Blink */\n  {\n    test: [/(apple)?webkit\\\\/537\\\\.36/i],\n    describe() {\n      return {\n        name: ENGINE_MAP.Blink\n      };\n    }\n  },\n  /* WebKit */\n  {\n    test: [/(apple)?webkit/i],\n    describe(ua) {\n      const engine = {\n        name: ENGINE_MAP.WebKit\n      }, version = Utils.getFirstMatch(/webkit\\\\/(\\\\d+(\\\\.?_?\\\\d+)+)/i, ua);\n      return version && (engine.version = version), engine;\n    }\n  }\n];\nclass Parser {\n  /**\n   * Create instance of Parser\n   *\n   * @param {String} UA User-Agent string\n   * @param {Boolean} [skipParsing=false] parser can skip parsing in purpose of performance\n   * improvements if you need to make a more particular parsing\n   * like {@link Parser#parseBrowser} or {@link Parser#parsePlatform}\n   *\n   * @throw {Error} in case of empty UA String\n   *\n   * @constructor\n   */\n  constructor(UA, skipParsing = !1) {\n    if (UA == null || UA === \"\")\n      throw new Error(\"UserAgent parameter can't be empty\");\n    this._ua = UA, this.parsedResult = {}, skipParsing !== !0 && this.parse();\n  }\n  /**\n   * Get UserAgent string of current Parser instance\n   * @return {String} User-Agent String of the current <Parser> object\n   *\n   * @public\n   */\n  getUA() {\n    return this._ua;\n  }\n  /**\n   * Test a UA string for a regexp\n   * @param {RegExp} regex\n   * @return {Boolean}\n   */\n  test(regex) {\n    return regex.test(this._ua);\n  }\n  /**\n   * Get parsed browser object\n   * @return {Object}\n   */\n  parseBrowser() {\n    this.parsedResult.browser = {};\n    const browserDescriptor = Utils.find(browsersList, (_browser) => {\n      if (typeof _browser.test == \"function\")\n        return _browser.test(this);\n      if (_browser.test instanceof Array)\n        return _browser.test.some((condition) => this.test(condition));\n      throw new Error(\"Browser's test function is not valid\");\n    });\n    return browserDescriptor && (this.parsedResult.browser = browserDescriptor.describe(this.getUA())), this.parsedResult.browser;\n  }\n  /**\n   * Get parsed browser object\n   * @return {Object}\n   *\n   * @public\n   */\n  getBrowser() {\n    return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();\n  }\n  /**\n   * Get browser's name\n   * @return {String} Browser's name or an empty string\n   *\n   * @public\n   */\n  getBrowserName(toLowerCase) {\n    return toLowerCase ? String(this.getBrowser().name).toLowerCase() || \"\" : this.getBrowser().name || \"\";\n  }\n  /**\n   * Get browser's version\n   * @return {String} version of browser\n   *\n   * @public\n   */\n  getBrowserVersion() {\n    return this.getBrowser().version;\n  }\n  /**\n   * Get OS\n   * @return {Object}\n   *\n   * @example\n   * this.getOS();\n   * {\n   *   name: 'macOS',\n   *   version: '10.11.12'\n   * }\n   */\n  getOS() {\n    return this.parsedResult.os ? this.parsedResult.os : this.parseOS();\n  }\n  /**\n   * Parse OS and save it to this.parsedResult.os\n   * @return {*|{}}\n   */\n  parseOS() {\n    this.parsedResult.os = {};\n    const os = Utils.find(osParsersList, (_os) => {\n      if (typeof _os.test == \"function\")\n        return _os.test(this);\n      if (_os.test instanceof Array)\n        return _os.test.some((condition) => this.test(condition));\n      throw new Error(\"Browser's test function is not valid\");\n    });\n    return os && (this.parsedResult.os = os.describe(this.getUA())), this.parsedResult.os;\n  }\n  /**\n   * Get OS name\n   * @param {Boolean} [toLowerCase] return lower-cased value\n   * @return {String} name of the OS — macOS, Windows, Linux, etc.\n   */\n  getOSName(toLowerCase) {\n    const { name } = this.getOS();\n    return toLowerCase ? String(name).toLowerCase() || \"\" : name || \"\";\n  }\n  /**\n   * Get OS version\n   * @return {String} full version with dots ('10.11.12', '5.6', etc)\n   */\n  getOSVersion() {\n    return this.getOS().version;\n  }\n  /**\n   * Get parsed platform\n   * @return {{}}\n   */\n  getPlatform() {\n    return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();\n  }\n  /**\n   * Get platform name\n   * @param {Boolean} [toLowerCase=false]\n   * @return {*}\n   */\n  getPlatformType(toLowerCase = !1) {\n    const { type } = this.getPlatform();\n    return toLowerCase ? String(type).toLowerCase() || \"\" : type || \"\";\n  }\n  /**\n   * Get parsed platform\n   * @return {{}}\n   */\n  parsePlatform() {\n    this.parsedResult.platform = {};\n    const platform = Utils.find(platformParsersList, (_platform) => {\n      if (typeof _platform.test == \"function\")\n        return _platform.test(this);\n      if (_platform.test instanceof Array)\n        return _platform.test.some((condition) => this.test(condition));\n      throw new Error(\"Browser's test function is not valid\");\n    });\n    return platform && (this.parsedResult.platform = platform.describe(this.getUA())), this.parsedResult.platform;\n  }\n  /**\n   * Get parsed engine\n   * @return {{}}\n   */\n  getEngine() {\n    return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();\n  }\n  /**\n   * Get engines's name\n   * @return {String} Engines's name or an empty string\n   *\n   * @public\n   */\n  getEngineName(toLowerCase) {\n    return toLowerCase ? String(this.getEngine().name).toLowerCase() || \"\" : this.getEngine().name || \"\";\n  }\n  /**\n   * Get parsed platform\n   * @return {{}}\n   */\n  parseEngine() {\n    this.parsedResult.engine = {};\n    const engine = Utils.find(enginesParsersList, (_engine) => {\n      if (typeof _engine.test == \"function\")\n        return _engine.test(this);\n      if (_engine.test instanceof Array)\n        return _engine.test.some((condition) => this.test(condition));\n      throw new Error(\"Browser's test function is not valid\");\n    });\n    return engine && (this.parsedResult.engine = engine.describe(this.getUA())), this.parsedResult.engine;\n  }\n  /**\n   * Parse full information about the browser\n   * @returns {Parser}\n   */\n  parse() {\n    return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;\n  }\n  /**\n   * Get parsed result\n   * @return {ParsedResult}\n   */\n  getResult() {\n    return Utils.assign({}, this.parsedResult);\n  }\n  /**\n   * Check if parsed browser matches certain conditions\n   *\n   * @param {Object} checkTree It's one or two layered object,\n   * which can include a platform or an OS on the first layer\n   * and should have browsers specs on the bottom-laying layer\n   *\n   * @returns {Boolean|undefined} Whether the browser satisfies the set conditions or not.\n   * Returns \\`undefined\\` when the browser is no described in the checkTree object.\n   *\n   * @example\n   * const browser = Bowser.getParser(window.navigator.userAgent);\n   * if (browser.satisfies({chrome: '>118.01.1322' }))\n   * // or with os\n   * if (browser.satisfies({windows: { chrome: '>118.01.1322' } }))\n   * // or with platforms\n   * if (browser.satisfies({desktop: { chrome: '>118.01.1322' } }))\n   */\n  satisfies(checkTree) {\n    const platformsAndOSes = {};\n    let platformsAndOSCounter = 0;\n    const browsers = {};\n    let browsersCounter = 0;\n    if (Object.keys(checkTree).forEach((key) => {\n      const currentDefinition = checkTree[key];\n      typeof currentDefinition == \"string\" ? (browsers[key] = currentDefinition, browsersCounter += 1) : typeof currentDefinition == \"object\" && (platformsAndOSes[key] = currentDefinition, platformsAndOSCounter += 1);\n    }), platformsAndOSCounter > 0) {\n      const platformsAndOSNames = Object.keys(platformsAndOSes), OSMatchingDefinition = Utils.find(platformsAndOSNames, (name) => this.isOS(name));\n      if (OSMatchingDefinition) {\n        const osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);\n        if (osResult !== void 0)\n          return osResult;\n      }\n      const platformMatchingDefinition = Utils.find(\n        platformsAndOSNames,\n        (name) => this.isPlatform(name)\n      );\n      if (platformMatchingDefinition) {\n        const platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);\n        if (platformResult !== void 0)\n          return platformResult;\n      }\n    }\n    if (browsersCounter > 0) {\n      const browserNames = Object.keys(browsers), matchingDefinition = Utils.find(browserNames, (name) => this.isBrowser(name, !0));\n      if (matchingDefinition !== void 0)\n        return this.compareVersion(browsers[matchingDefinition]);\n    }\n  }\n  /**\n   * Check if the browser name equals the passed string\n   * @param browserName The string to compare with the browser name\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\n   * @returns {boolean}\n   */\n  isBrowser(browserName, includingAlias = !1) {\n    const defaultBrowserName = this.getBrowserName().toLowerCase();\n    let browserNameLower = browserName.toLowerCase();\n    const alias = Utils.getBrowserTypeByAlias(browserNameLower);\n    return includingAlias && alias && (browserNameLower = alias.toLowerCase()), browserNameLower === defaultBrowserName;\n  }\n  compareVersion(version) {\n    let expectedResults = [0], comparableVersion = version, isLoose = !1;\n    const currentBrowserVersion = this.getBrowserVersion();\n    if (typeof currentBrowserVersion == \"string\")\n      return version[0] === \">\" || version[0] === \"<\" ? (comparableVersion = version.substr(1), version[1] === \"=\" ? (isLoose = !0, comparableVersion = version.substr(2)) : expectedResults = [], version[0] === \">\" ? expectedResults.push(1) : expectedResults.push(-1)) : version[0] === \"=\" ? comparableVersion = version.substr(1) : version[0] === \"~\" && (isLoose = !0, comparableVersion = version.substr(1)), expectedResults.indexOf(\n        Utils.compareVersions(currentBrowserVersion, comparableVersion, isLoose)\n      ) > -1;\n  }\n  isOS(osName) {\n    return this.getOSName(!0) === String(osName).toLowerCase();\n  }\n  isPlatform(platformType) {\n    return this.getPlatformType(!0) === String(platformType).toLowerCase();\n  }\n  isEngine(engineName) {\n    return this.getEngineName(!0) === String(engineName).toLowerCase();\n  }\n  /**\n   * Is anything? Check if the browser is called \"anything\",\n   * the OS called \"anything\" or the platform called \"anything\"\n   * @param {String} anything\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\n   * @returns {Boolean}\n   */\n  is(anything, includingAlias = !1) {\n    return this.isBrowser(anything, includingAlias) || this.isOS(anything) || this.isPlatform(anything);\n  }\n  /**\n   * Check if any of the given values satisfies this.is(anything)\n   * @param {String[]} anythings\n   * @returns {Boolean}\n   */\n  some(anythings = []) {\n    return anythings.some((anything) => this.is(anything));\n  }\n}\n/*!\n * Bowser - a browser detector\n * https://github.com/lancedikson/bowser\n * MIT License | (c) Dustin Diaz 2012-2015\n * MIT License | (c) Denis Demchenko 2015-2019\n */\nclass Bowser {\n  /**\n   * Creates a {@link Parser} instance\n   *\n   * @param {String} UA UserAgent string\n   * @param {Boolean} [skipParsing=false] Will make the Parser postpone parsing until you ask it\n   * explicitly. Same as \\`skipParsing\\` for {@link Parser}.\n   * @returns {Parser}\n   * @throws {Error} when UA is not a String\n   *\n   * @example\n   * const parser = Bowser.getParser(window.navigator.userAgent);\n   * const result = parser.getResult();\n   */\n  static getParser(UA, skipParsing = !1) {\n    if (typeof UA != \"string\")\n      throw new Error(\"UserAgent should be a string\");\n    return new Parser(UA, skipParsing);\n  }\n  /**\n   * Creates a {@link Parser} instance and runs {@link Parser.getResult} immediately\n   *\n   * @param UA\n   * @return {ParsedResult}\n   *\n   * @example\n   * const result = Bowser.parse(window.navigator.userAgent);\n   */\n  static parse(UA) {\n    return new Parser(UA).getResult();\n  }\n  static get BROWSER_MAP() {\n    return BROWSER_MAP;\n  }\n  static get ENGINE_MAP() {\n    return ENGINE_MAP;\n  }\n  static get OS_MAP() {\n    return OS_MAP;\n  }\n  static get PLATFORMS_MAP() {\n    return PLATFORMS_MAP;\n  }\n}\nconst useBrowserInfo = () => useMemo(() => {\n  {\n    const result = Bowser.parse(window.navigator.userAgent);\n    return {\n      browser: result.browser,\n      engine: result.engine,\n      os: result.os\n    };\n  }\n}, []);\nfunction useHotkeyListenerComboText(action) {\n  return useBrowserInfo().os.name.toLowerCase().includes(\"mac\") ? hotkeyActionDefinitions[action].keyComboMac : hotkeyActionDefinitions[action].keyComboDefault;\n}\nfunction ToolbarChatArea() {\n  const chatState = useChatState(), [isComposing, setIsComposing] = useState(!1), currentChat = useMemo(\n    () => chatState.chats.find((c2) => c2.id === chatState.currentChatId),\n    [chatState.chats, chatState.currentChatId]\n  ), currentInput = useMemo(\n    () => (currentChat == null ? void 0 : currentChat.inputValue) || \"\",\n    [currentChat == null ? void 0 : currentChat.inputValue]\n  ), handleInputChange = useCallback(\n    (value) => {\n      chatState.setChatInput(chatState.currentChatId, value);\n    },\n    [chatState.setChatInput, chatState.currentChatId]\n  ), handleSubmit = useCallback(() => {\n    !currentChat || !currentInput.trim() || chatState.addMessage(currentChat.id, currentInput);\n  }, [currentChat, currentInput, chatState.addMessage]), handleKeyDown = useCallback(\n    (e2) => {\n      e2.key === \"Enter\" && !e2.shiftKey && !isComposing && (e2.preventDefault(), handleSubmit());\n    },\n    [handleSubmit, isComposing]\n  ), handleCompositionStart = useCallback(() => {\n    setIsComposing(!0);\n  }, []), handleCompositionEnd = useCallback(() => {\n    setIsComposing(!1);\n  }, []), inputRef = useRef(null);\n  useEffect(() => {\n    var _a, _b, _c;\n    const blurHandler = () => {\n      var _a2;\n      return (_a2 = inputRef.current) == null ? void 0 : _a2.focus();\n    };\n    return chatState.isPromptCreationActive ? ((_a = inputRef.current) == null || _a.focus(), (_b = inputRef.current) == null || _b.addEventListener(\"blur\", blurHandler)) : (_c = inputRef.current) == null || _c.blur(), () => {\n      var _a2;\n      (_a2 = inputRef.current) == null || _a2.removeEventListener(\"blur\", blurHandler);\n    };\n  }, [chatState.isPromptCreationActive]);\n  const buttonClassName = useMemo(\n    () => cn(\n      \"flex size-8 items-center justify-center rounded-full bg-transparent p-1 text-zinc-950 opacity-20 transition-all duration-150\",\n      currentInput.length > 0 && \"bg-blue-600 text-white opacity-100\",\n      chatState.promptState === \"loading\" && \"cursor-not-allowed bg-zinc-300 text-zinc-500 opacity-30\"\n    ),\n    [currentInput.length, chatState.promptState]\n  ), textareaClassName = useMemo(\n    () => cn(\n      \"h-full w-full flex-1 resize-none bg-transparent text-zinc-950 transition-all duration-150 placeholder:text-zinc-950/50 focus:outline-none\",\n      chatState.promptState === \"loading\" && \"text-zinc-500 placeholder:text-zinc-400\"\n    ),\n    [chatState.promptState]\n  ), containerClassName = useMemo(() => {\n    const baseClasses = \"flex h-24 w-full flex-1 flex-row items-end gap-1 rounded-2xl p-4 text-sm text-zinc-950 shadow-md backdrop-blur transition-all duration-150 placeholder:text-zinc-950/70\";\n    switch (chatState.promptState) {\n      case \"loading\":\n        return cn(\n          baseClasses,\n          \"border-2 border-transparent bg-zinc-50/80\",\n          \"chat-loading-gradient\"\n        );\n      case \"success\":\n        return cn(\n          baseClasses,\n          \"border-2 border-transparent bg-zinc-50/80\",\n          \"chat-success-border\"\n        );\n      case \"error\":\n        return cn(\n          baseClasses,\n          \"border-2 border-transparent bg-zinc-50/80\",\n          \"chat-error-border animate-shake\"\n        );\n      default:\n        return cn(baseClasses, \"border border-border/30 bg-zinc-50/80\");\n    }\n  }, [chatState.promptState]), ctrlAltCText = useHotkeyListenerComboText(HotkeyActions.CTRL_ALT_C);\n  return /* @__PURE__ */ jsxs(\n    \"div\",\n    {\n      className: containerClassName,\n      onClick: () => chatState.startPromptCreation(),\n      role: \"button\",\n      tabIndex: 0,\n      children: [\n        /* @__PURE__ */ jsx(\n          J,\n          {\n            ref: inputRef,\n            className: textareaClassName,\n            value: currentInput,\n            onChange: (e2) => handleInputChange(e2.currentTarget.value),\n            onKeyDown: handleKeyDown,\n            onCompositionStart: handleCompositionStart,\n            onCompositionEnd: handleCompositionEnd,\n            placeholder: chatState.isPromptCreationActive ? chatState.promptState === \"loading\" ? \"Processing...\" : \"Enter prompt...\" : \\`What do you want to change? (\\${ctrlAltCText})\\`,\n            disabled: chatState.promptState === \"loading\"\n          }\n        ),\n        /* @__PURE__ */ jsx(\n          H$1,\n          {\n            className: buttonClassName,\n            disabled: currentInput.length === 0 || chatState.promptState === \"loading\",\n            onClick: handleSubmit,\n            children: /* @__PURE__ */ jsx(Send, { className: \"size-4\" })\n          }\n        )\n      ]\n    }\n  );\n}\nconst DraggableContext = createContext(\n  null\n), DraggableProvider = ({\n  containerRef,\n  children,\n  snapAreas,\n  onDragStart,\n  onDragEnd\n}) => {\n  const [borderLocation, setBorderLocation] = useState({\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  });\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const updateBorderLocation = () => {\n      if (containerRef.current) {\n        const rect = containerRef.current.getBoundingClientRect();\n        setBorderLocation({\n          top: rect.top,\n          left: rect.left,\n          right: rect.right,\n          bottom: rect.bottom\n        });\n      }\n    };\n    updateBorderLocation();\n    const resizeObserver = new ResizeObserver(updateBorderLocation);\n    return resizeObserver.observe(containerRef.current), window.addEventListener(\"resize\", updateBorderLocation), () => {\n      containerRef.current && resizeObserver.unobserve(containerRef.current), resizeObserver.disconnect(), window.removeEventListener(\"resize\", updateBorderLocation);\n    };\n  }, [containerRef]);\n  const dragStartListeners = useRef(/* @__PURE__ */ new Set()), dragEndListeners = useRef(/* @__PURE__ */ new Set()), registerDragStart = useCallback((cb) => (dragStartListeners.current.add(cb), () => dragStartListeners.current.delete(cb)), []), registerDragEnd = useCallback((cb) => (dragEndListeners.current.add(cb), () => dragEndListeners.current.delete(cb)), []), emitDragStart = useCallback(() => {\n    onDragStart && onDragStart(), dragStartListeners.current.forEach((cb) => cb());\n  }, [onDragStart]), emitDragEnd = useCallback(() => {\n    onDragEnd && onDragEnd(), dragEndListeners.current.forEach((cb) => cb());\n  }, [onDragEnd]), contextValue = {\n    borderLocation,\n    snapAreas,\n    registerDragStart,\n    registerDragEnd,\n    emitDragStart,\n    emitDragEnd\n  };\n  return /* @__PURE__ */ jsx(DraggableContext.Provider, { value: contextValue, children });\n};\nfunction useDraggable(config2) {\n  const providerData = useContext(DraggableContext), latestProviderDataRef = useRef(providerData);\n  useEffect(() => {\n    latestProviderDataRef.current = providerData;\n  }, [providerData]);\n  const movingElementRef = useRef(null), dragInitiatorRef = useRef(null), [movingElementNode, setMovingElementNode] = useState(null), [dragInitiatorNode, setDragInitiatorNode] = useState(null), mouseToDraggableCenterOffsetRef = useRef(null), mouseDownPosRef = useRef(null), currentMousePosRef = useRef(null), isDraggingRef = useRef(!1), persistedRelativeCenterRef = useRef(config2.initialRelativeCenter), [currentSnapArea, setCurrentSnapArea] = useState(null), {\n    startThreshold = 3,\n    areaSnapThreshold = 60,\n    // px, default threshold for snapping\n    onDragStart,\n    onDragEnd,\n    initialSnapArea,\n    springStiffness = 0.2,\n    // Default spring stiffness\n    springDampness = 0.55\n    // Default spring dampness\n    // initialRelativeCenter is used to initialize persistedRelativeCenterRef\n  } = config2, animatedPositionRef = useRef(null), velocityRef = useRef({ x: 0, y: 0 }), hasAnimatedOnceRef = useRef(!1);\n  useEffect(() => {\n    if (initialSnapArea && providerData && providerData.borderLocation && providerData.snapAreas && providerData.snapAreas[initialSnapArea] && !isDraggingRef.current) {\n      const { top, left, right, bottom } = providerData.borderLocation, width = right - left, height = bottom - top, center = {\n        topLeft: { x: left, y: top },\n        topRight: { x: right, y: top },\n        bottomLeft: { x: left, y: bottom },\n        bottomRight: { x: right, y: bottom }\n      }[initialSnapArea];\n      if (center && width > 0 && height > 0) {\n        const relX = (center.x - left) / width, relY = (center.y - top) / height;\n        persistedRelativeCenterRef.current = { x: relX, y: relY };\n      } else center && console.warn(\n        \"useDraggable: Container for initialSnapArea has zero width or height. Cannot calculate relative center from snap area. Falling back to initialRelativeCenter or undefined.\"\n      );\n    }\n  }, [initialSnapArea, providerData]);\n  function getSnapAreaCenters(borderLocation) {\n    const { top, left, right, bottom } = borderLocation, centerX = (left + right) / 2;\n    return {\n      topLeft: { x: left, y: top },\n      topCenter: { x: centerX, y: top },\n      topRight: { x: right, y: top },\n      bottomLeft: { x: left, y: bottom },\n      bottomCenter: { x: centerX, y: bottom },\n      bottomRight: { x: right, y: bottom }\n    };\n  }\n  const updateDraggablePosition = useCallback(() => {\n    var _a, _b;\n    const draggableEl = movingElementRef.current;\n    if (!draggableEl) return;\n    const draggableWidth = draggableEl.offsetWidth, draggableHeight = draggableEl.offsetHeight, offsetParent = draggableEl.offsetParent;\n    let parentViewportLeft = 0, parentViewportTop = 0, parentWidth = window.innerWidth, parentHeight = window.innerHeight;\n    if (offsetParent) {\n      const opRect = offsetParent.getBoundingClientRect();\n      parentViewportLeft = opRect.left, parentViewportTop = opRect.top, parentWidth = offsetParent.offsetWidth || window.innerWidth, parentHeight = offsetParent.offsetHeight || window.innerHeight;\n    }\n    let targetViewportCenterX = null, targetViewportCenterY = null;\n    const currentDesiredRelativeCenter = persistedRelativeCenterRef.current;\n    let snapArea = null, snapTarget = null;\n    const provider = latestProviderDataRef.current;\n    let isTopHalf = !0, isLeftHalf = !0;\n    if (isDraggingRef.current && mouseToDraggableCenterOffsetRef.current && currentMousePosRef.current && provider && provider.borderLocation && provider.snapAreas) {\n      const dragCenter = {\n        x: currentMousePosRef.current.x - mouseToDraggableCenterOffsetRef.current.x,\n        y: currentMousePosRef.current.y - mouseToDraggableCenterOffsetRef.current.y\n      }, areaCenters = getSnapAreaCenters(provider.borderLocation);\n      let minDist = Number.POSITIVE_INFINITY, closestArea = null, closestCenter = null;\n      for (const area in provider.snapAreas)\n        if (provider.snapAreas[area]) {\n          const center = areaCenters[area];\n          if (!center) continue;\n          const dist = Math.hypot(\n            center.x - dragCenter.x,\n            center.y - dragCenter.y\n          );\n          dist < minDist && (minDist = dist, closestArea = area, closestCenter = center);\n        }\n      closestArea && closestCenter && minDist <= areaSnapThreshold && (snapArea = closestArea, snapTarget = closestCenter), isLeftHalf = (dragCenter.x - parentViewportLeft) / parentWidth <= 0.5, isTopHalf = (dragCenter.y - parentViewportTop) / parentHeight <= 0.5;\n    }\n    if (isDraggingRef.current && snapTarget)\n      targetViewportCenterX = snapTarget.x, targetViewportCenterY = snapTarget.y, setCurrentSnapArea(snapArea), isLeftHalf = (snapTarget.x - parentViewportLeft) / parentWidth <= 0.5, isTopHalf = (snapTarget.y - parentViewportTop) / parentHeight <= 0.5;\n    else if (isDraggingRef.current && mouseToDraggableCenterOffsetRef.current && currentMousePosRef.current)\n      targetViewportCenterX = currentMousePosRef.current.x - mouseToDraggableCenterOffsetRef.current.x, targetViewportCenterY = currentMousePosRef.current.y - mouseToDraggableCenterOffsetRef.current.y, setCurrentSnapArea(null), isLeftHalf = (targetViewportCenterX - parentViewportLeft) / parentWidth <= 0.5, isTopHalf = (targetViewportCenterY - parentViewportTop) / parentHeight <= 0.5;\n    else {\n      if (currentDesiredRelativeCenter && parentWidth > 0 && parentHeight > 0) {\n        if (isTopHalf = currentDesiredRelativeCenter.y <= 0.5, isLeftHalf = currentDesiredRelativeCenter.x <= 0.5, isLeftHalf) {\n          const targetCenterXInParent = parentWidth * currentDesiredRelativeCenter.x;\n          targetViewportCenterX = parentViewportLeft + targetCenterXInParent;\n        } else {\n          const targetCenterXInParent = parentWidth * (1 - currentDesiredRelativeCenter.x);\n          targetViewportCenterX = parentViewportLeft + parentWidth - targetCenterXInParent;\n        }\n        if (isTopHalf) {\n          const targetCenterYInParent = parentHeight * currentDesiredRelativeCenter.y;\n          targetViewportCenterY = parentViewportTop + targetCenterYInParent;\n        } else {\n          const targetCenterYInParent = parentHeight * (1 - currentDesiredRelativeCenter.y);\n          targetViewportCenterY = parentViewportTop + parentHeight - targetCenterYInParent;\n        }\n      } else {\n        !((_a = movingElementRef.current) != null && _a.style.left) && !((_b = movingElementRef.current) != null && _b.style.top) && console.warn(\n          \"useDraggable: Cannot determine position. Parent has no dimensions or initialRelativeCenter was not effectively set.\"\n        );\n        return;\n      }\n      setCurrentSnapArea(null);\n    }\n    if (targetViewportCenterX === null || targetViewportCenterY === null)\n      return;\n    const { borderLocation } = latestProviderDataRef.current || {\n      borderLocation: void 0\n    };\n    if (borderLocation && draggableWidth > 0 && draggableHeight > 0) {\n      const providerRectWidth = borderLocation.right - borderLocation.left, providerRectHeight = borderLocation.bottom - borderLocation.top;\n      let clampedCenterX = targetViewportCenterX, clampedCenterY = targetViewportCenterY;\n      if (draggableWidth >= providerRectWidth)\n        clampedCenterX = borderLocation.left + providerRectWidth / 2;\n      else {\n        const minX = borderLocation.left + draggableWidth / 2, maxX = borderLocation.right - draggableWidth / 2;\n        clampedCenterX = Math.max(minX, Math.min(clampedCenterX, maxX));\n      }\n      if (draggableHeight >= providerRectHeight)\n        clampedCenterY = borderLocation.top + providerRectHeight / 2;\n      else {\n        const minY = borderLocation.top + draggableHeight / 2, maxY = borderLocation.bottom - draggableHeight / 2;\n        clampedCenterY = Math.max(minY, Math.min(clampedCenterY, maxY));\n      }\n      targetViewportCenterX = clampedCenterX, targetViewportCenterY = clampedCenterY;\n    }\n    if (!animatedPositionRef.current) {\n      animatedPositionRef.current = {\n        x: targetViewportCenterX,\n        y: targetViewportCenterY\n      }, velocityRef.current = { x: 0, y: 0 };\n      const targetElementStyleX2 = targetViewportCenterX - draggableWidth / 2, targetElementStyleY2 = targetViewportCenterY - draggableHeight / 2, elStyle2 = draggableEl.style;\n      if (elStyle2.right = \"\", elStyle2.bottom = \"\", elStyle2.left = \"\", elStyle2.top = \"\", isLeftHalf) {\n        const styleLeftPx = targetElementStyleX2 - parentViewportLeft;\n        elStyle2.left = parentWidth > 0 ? \\`\\${(styleLeftPx / parentWidth * 100).toFixed(2)}%\\` : \"0px\", elStyle2.right = \"\";\n      } else {\n        const styleRightPx = parentViewportLeft + parentWidth - (targetElementStyleX2 + draggableWidth);\n        elStyle2.right = parentWidth > 0 ? \\`\\${(styleRightPx / parentWidth * 100).toFixed(2)}%\\` : \"0px\", elStyle2.left = \"\";\n      }\n      if (isTopHalf) {\n        const styleTopPx = targetElementStyleY2 - parentViewportTop;\n        elStyle2.top = parentHeight > 0 ? \\`\\${(styleTopPx / parentHeight * 100).toFixed(2)}%\\` : \"0px\", elStyle2.bottom = \"\";\n      } else {\n        const styleBottomPx = parentViewportTop + parentHeight - (targetElementStyleY2 + draggableHeight);\n        elStyle2.bottom = parentHeight > 0 ? \\`\\${(styleBottomPx / parentHeight * 100).toFixed(2)}%\\` : \"0px\", elStyle2.top = \"\";\n      }\n      hasAnimatedOnceRef.current = !0;\n      return;\n    }\n    if (!hasAnimatedOnceRef.current) {\n      hasAnimatedOnceRef.current = !0;\n      return;\n    }\n    const pos = animatedPositionRef.current, vel = velocityRef.current, dx = targetViewportCenterX - pos.x, dy = targetViewportCenterY - pos.y, ax = springStiffness * dx - springDampness * vel.x, ay = springStiffness * dy - springDampness * vel.y;\n    vel.x += ax, vel.y += ay, pos.x += vel.x, pos.y += vel.y;\n    const threshold = 0.5;\n    Math.abs(dx) < threshold && Math.abs(dy) < threshold && Math.abs(vel.x) < threshold && Math.abs(vel.y) < threshold && (pos.x = targetViewportCenterX, pos.y = targetViewportCenterY, vel.x = 0, vel.y = 0), animatedPositionRef.current = { ...pos }, velocityRef.current = { ...vel };\n    const targetElementStyleX = pos.x - draggableWidth / 2, targetElementStyleY = pos.y - draggableHeight / 2, elStyle = draggableEl.style;\n    if (elStyle.right = \"\", elStyle.bottom = \"\", elStyle.left = \"\", elStyle.top = \"\", isLeftHalf) {\n      const styleLeftPx = targetElementStyleX - parentViewportLeft;\n      elStyle.left = parentWidth > 0 ? \\`\\${(styleLeftPx / parentWidth * 100).toFixed(2)}%\\` : \"0px\", elStyle.right = \"\";\n    } else {\n      const styleRightPx = parentViewportLeft + parentWidth - (targetElementStyleX + draggableWidth);\n      elStyle.right = parentWidth > 0 ? \\`\\${(styleRightPx / parentWidth * 100).toFixed(2)}%\\` : \"0px\", elStyle.left = \"\";\n    }\n    if (isTopHalf) {\n      const styleTopPx = targetElementStyleY - parentViewportTop;\n      elStyle.top = parentHeight > 0 ? \\`\\${(styleTopPx / parentHeight * 100).toFixed(2)}%\\` : \"0px\", elStyle.bottom = \"\";\n    } else {\n      const styleBottomPx = parentViewportTop + parentHeight - (targetElementStyleY + draggableHeight);\n      elStyle.bottom = parentHeight > 0 ? \\`\\${(styleBottomPx / parentHeight * 100).toFixed(2)}%\\` : \"0px\", elStyle.top = \"\";\n    }\n    (Math.abs(pos.x - targetViewportCenterX) > threshold || Math.abs(pos.y - targetViewportCenterY) > threshold || Math.abs(vel.x) > threshold || Math.abs(vel.y) > threshold || isDraggingRef.current) && requestAnimationFrame(updateDraggablePosition);\n  }, [areaSnapThreshold, springStiffness, springDampness]), [wasDragged, setWasDragged] = useState(!1), mouseUpHandler = useCallback(\n    (_e) => {\n      var _a;\n      if (isDraggingRef.current) {\n        onDragEnd && onDragEnd(), (_a = latestProviderDataRef.current) != null && _a.emitDragEnd && latestProviderDataRef.current.emitDragEnd(), setWasDragged(!0), setTimeout(() => setWasDragged(!1), 0);\n        const draggableEl = movingElementRef.current, provider = latestProviderDataRef.current;\n        if (draggableEl && provider && provider.borderLocation) {\n          const draggableWidth = draggableEl.offsetWidth, draggableHeight = draggableEl.offsetHeight, offsetParent = draggableEl.offsetParent;\n          let parentViewportLeft = 0, parentViewportTop = 0, parentWidth = window.innerWidth, parentHeight = window.innerHeight;\n          if (offsetParent) {\n            const opRect = offsetParent.getBoundingClientRect();\n            parentViewportLeft = opRect.left, parentViewportTop = opRect.top, parentWidth = offsetParent.offsetWidth || window.innerWidth, parentHeight = offsetParent.offsetHeight || window.innerHeight;\n          }\n          let releasedCenterX = 0, releasedCenterY = 0;\n          currentMousePosRef.current && mouseToDraggableCenterOffsetRef.current ? (releasedCenterX = currentMousePosRef.current.x - mouseToDraggableCenterOffsetRef.current.x, releasedCenterY = currentMousePosRef.current.y - mouseToDraggableCenterOffsetRef.current.y) : animatedPositionRef.current && (releasedCenterX = animatedPositionRef.current.x, releasedCenterY = animatedPositionRef.current.y);\n          const borderLocation = provider.borderLocation, minX = borderLocation.left + draggableWidth / 2, maxX = borderLocation.right - draggableWidth / 2, minY = borderLocation.top + draggableHeight / 2, maxY = borderLocation.bottom - draggableHeight / 2;\n          releasedCenterX = Math.max(minX, Math.min(releasedCenterX, maxX)), releasedCenterY = Math.max(minY, Math.min(releasedCenterY, maxY));\n          const areaCenters = getSnapAreaCenters(borderLocation);\n          let minDist = Number.POSITIVE_INFINITY, closestArea = null, closestCenter = null;\n          for (const area in provider.snapAreas)\n            if (provider.snapAreas[area]) {\n              const center = areaCenters[area];\n              if (!center) continue;\n              const dist = Math.hypot(\n                center.x - releasedCenterX,\n                center.y - releasedCenterY\n              );\n              dist < minDist && (minDist = dist, closestArea = area, closestCenter = center);\n            }\n          if (closestArea && closestCenter) {\n            setCurrentSnapArea(closestArea);\n            const relX = (closestCenter.x - parentViewportLeft) / parentWidth, relY = (closestCenter.y - parentViewportTop) / parentHeight;\n            persistedRelativeCenterRef.current = { x: relX, y: relY };\n          } else {\n            setCurrentSnapArea(null);\n            const relX = (releasedCenterX - parentViewportLeft) / parentWidth, relY = (releasedCenterY - parentViewportTop) / parentHeight;\n            persistedRelativeCenterRef.current = { x: relX, y: relY };\n          }\n        }\n      }\n      mouseDownPosRef.current = null, isDraggingRef.current = !1, window.removeEventListener(\"mousemove\", mouseMoveHandler, {\n        capture: !0\n      }), window.removeEventListener(\"mouseup\", mouseUpHandler, {\n        capture: !0\n      }), movingElementRef.current && (movingElementRef.current.style.userSelect = \"\"), document.body.style.userSelect = \"\", document.body.style.cursor = \"\";\n    },\n    [onDragEnd]\n  ), mouseMoveHandler = useCallback(\n    (e2) => {\n      var _a;\n      if (!mouseDownPosRef.current) return;\n      Math.hypot(\n        e2.clientX - mouseDownPosRef.current.x,\n        e2.clientY - mouseDownPosRef.current.y\n      ) > startThreshold && !isDraggingRef.current && (isDraggingRef.current = !0, movingElementRef.current && (movingElementRef.current.style.userSelect = \"none\"), document.body.style.userSelect = \"none\", document.body.style.cursor = \"grabbing\", onDragStart && onDragStart(), (_a = latestProviderDataRef.current) != null && _a.emitDragStart && latestProviderDataRef.current.emitDragStart(), requestAnimationFrame(updateDraggablePosition)), currentMousePosRef.current = { x: e2.clientX, y: e2.clientY };\n    },\n    [startThreshold, onDragStart, updateDraggablePosition]\n  ), mouseDownHandler = useCallback(\n    (e2) => {\n      if (e2.button !== 0)\n        return;\n      const handleNode = dragInitiatorRef.current, draggableItemNode = movingElementRef.current;\n      if (handleNode) {\n        if (!handleNode.contains(e2.target) && e2.target !== handleNode)\n          return;\n      } else if (draggableItemNode) {\n        if (!draggableItemNode.contains(e2.target) && e2.target !== draggableItemNode)\n          return;\n      } else {\n        console.error(\n          \"Draggable element or handle ref not set in mouseDownHandler\"\n        );\n        return;\n      }\n      if (mouseDownPosRef.current = { x: e2.clientX, y: e2.clientY }, !movingElementRef.current) {\n        console.error(\"Draggable element ref not set in mouseDownHandler\");\n        return;\n      }\n      const rect = movingElementRef.current.getBoundingClientRect(), currentDraggableCenterX = rect.left + rect.width / 2, currentDraggableCenterY = rect.top + rect.height / 2;\n      mouseToDraggableCenterOffsetRef.current = {\n        x: e2.clientX - currentDraggableCenterX,\n        y: e2.clientY - currentDraggableCenterY\n      }, window.addEventListener(\"mousemove\", mouseMoveHandler, {\n        capture: !0\n      }), window.addEventListener(\"mouseup\", mouseUpHandler, {\n        capture: !0\n      });\n    },\n    [mouseMoveHandler, mouseUpHandler]\n  );\n  useEffect(() => {\n    const elementToListenOn = dragInitiatorNode || movingElementNode;\n    return elementToListenOn && elementToListenOn.addEventListener(\"mousedown\", mouseDownHandler), () => {\n      elementToListenOn && elementToListenOn.removeEventListener(\"mousedown\", mouseDownHandler), isDraggingRef.current && (onDragEnd && onDragEnd(), isDraggingRef.current = !1, movingElementNode && (movingElementNode.style.userSelect = \"\"), document.body.style.userSelect = \"\", document.body.style.cursor = \"\", window.removeEventListener(\"mousemove\", mouseMoveHandler, {\n        capture: !0\n      }), window.removeEventListener(\"mouseup\", mouseUpHandler, {\n        capture: !0\n      }));\n    };\n  }, [\n    movingElementNode,\n    dragInitiatorNode,\n    mouseDownHandler,\n    onDragEnd,\n    mouseMoveHandler,\n    mouseUpHandler\n  ]), useEffect(() => {\n    movingElementRef.current && providerData && providerData.borderLocation && // Needed for calculations within updateDraggablePosition\n    persistedRelativeCenterRef.current && // Ensure we have a center to position to\n    !isDraggingRef.current && // Not currently dragging\n    !hasAnimatedOnceRef.current && requestAnimationFrame(() => {\n      movingElementRef.current && updateDraggablePosition();\n    });\n  }, [\n    movingElementNode,\n    // Run when element is available/changes\n    providerData,\n    // Run if provider context changes (for borderLocation)\n    config2.initialRelativeCenter,\n    // If this changes, persistedRelativeCenterRef might be re-initialized\n    initialSnapArea,\n    // If this changes, an effect updates persistedRelativeCenterRef\n    updateDraggablePosition\n    // Memoized callback for positioning\n    // hasAnimatedOnceRef is intentionally not a dep, its current value is checked inside.\n  ]);\n  const draggableRefCallback = useCallback((node) => {\n    setMovingElementNode(node), movingElementRef.current = node;\n  }, []), handleRefCallback = useCallback((node) => {\n    setDragInitiatorNode(node), dragInitiatorRef.current = node;\n  }, []);\n  return {\n    draggableRef: draggableRefCallback,\n    handleRef: handleRefCallback,\n    position: {\n      snapArea: currentSnapArea,\n      isTopHalf: persistedRelativeCenterRef.current ? persistedRelativeCenterRef.current.y <= 0.5 : !0,\n      isLeftHalf: persistedRelativeCenterRef.current ? persistedRelativeCenterRef.current.x <= 0.5 : !0\n    },\n    wasDragged\n  };\n}\nfunction ToolbarSection({ children }) {\n  return /* @__PURE__ */ jsx(\"div\", { className: \"fade-in slide-in-from-right-2 flex max-h-sm max-w-full animate-in snap-start flex-col items-center justify-between gap-1 py-0.5\", children });\n}\nfunction ToolbarItem(props) {\n  return /* @__PURE__ */ jsxs(\"div\", { className: \"relative flex w-full shrink-0 items-center justify-center\", children: [\n    props.children,\n    props.badgeContent && /* @__PURE__ */ jsx(\n      \"div\",\n      {\n        className: cn(\n          \"bg-blue-600 text-white\",\n          props.badgeClassName,\n          \"pointer-events-none absolute right-0 bottom-0 flex h-3 w-max min-w-3 max-w-8 select-none items-center justify-center truncate rounded-full px-0.5 font-semibold text-[0.5em]\"\n        ),\n        children: props.badgeContent\n      }\n    ),\n    props.statusDot && /* @__PURE__ */ jsx(\n      \"div\",\n      {\n        className: cn(\n          \"bg-rose-600\",\n          props.statusDotClassName,\n          \"pointer-events-none absolute top-0 right-0 size-1.5 rounded-full\"\n        )\n      }\n    )\n  ] });\n}\nconst ToolbarButton = forwardRef(\n  ({\n    badgeContent,\n    badgeClassName,\n    statusDot,\n    statusDotClassName,\n    tooltipHint,\n    variant = \"default\",\n    active,\n    ...props\n  }, ref) => {\n    const button = /* @__PURE__ */ jsx(\n      H$1,\n      {\n        ref,\n        ...props,\n        className: cn(\n          \"flex items-center justify-center rounded-full p-1 text-zinc-950 ring ring-transparent transition-all duration-150 hover:bg-zinc-950/5\",\n          variant === \"default\" ? \"size-8\" : \"h-8 rounded-full\",\n          active && \"bg-white/40 ring-zinc-950/20\",\n          props.className\n        )\n      }\n    );\n    return /* @__PURE__ */ jsx(\n      ToolbarItem,\n      {\n        badgeContent,\n        badgeClassName,\n        statusDot,\n        statusDotClassName,\n        children: button\n      }\n    );\n  }\n);\nToolbarButton.displayName = \"ToolbarButton\";\nconst Logo = ({\n  color = \"default\",\n  loading = !1,\n  loadingSpeed = \"slow\",\n  ...props\n}) => {\n  const colorStyle = {\n    default: \"fill-stagewise-700 stroke-none\",\n    black: \"fill-zinc-950 stroke-none\",\n    white: \"fill-white stroke-none\",\n    zinc: \"fill-zinc-500/50 stroke-none\",\n    current: \"fill-current stroke-none\",\n    gradient: \"fill-white stroke-black/30 stroke-1\"\n  };\n  return /* @__PURE__ */ jsxs(\n    \"div\",\n    {\n      className: \\`relative \\${color === \"gradient\" ? \"overflow-hidden rounded-full\" : \"overflow-visible\"} \\${props.className || \"\"} \\${loading ? \"drop-shadow-xl\" : \"\"} aspect-square\\`,\n      children: [\n        color === \"gradient\" && /* @__PURE__ */ jsxs(\"div\", { className: \"absolute inset-0\", children: [\n          /* @__PURE__ */ jsx(\"div\", { className: \"absolute inset-0 size-full bg-gradient-to-tr from-indigo-700 via-blue-500 to-teal-500\" }),\n          /* @__PURE__ */ jsx(\"div\", { className: \"absolute top-1/2 left-1/2 size-9/12 bg-[radial-gradient(circle,rgba(219,39,119,0.2)_0%,rgba(219,39,119,0)_100%)]\" }),\n          /* @__PURE__ */ jsx(\"div\", { className: \"absolute right-1/2 bottom-1/2 size-full bg-[radial-gradient(circle,rgba(219,39,119,0.2)_0%,rgba(219,39,119,0)_100%)]\" }),\n          /* @__PURE__ */ jsx(\"div\", { className: \"absolute top-0 left-[-10%] size-[120%] bg-[radial-gradient(circle,rgba(255,255,255,0)_60%,rgba(255,255,255,0.2)_70%)]\" }),\n          /* @__PURE__ */ jsx(\"div\", { className: \"absolute top-[-20%] left-0 h-[120%] w-full bg-[radial-gradient(circle,rgba(55,48,163,0)_55%,rgba(55,48,163,0.35)_73%)]\" })\n        ] }),\n        /* @__PURE__ */ jsxs(\n          \"svg\",\n          {\n            className: \\`absolute overflow-visible \\${color === \"gradient\" ? \"top-[25%] left-[25%] h-[50%] w-[50%] drop-shadow-indigo-950 drop-shadow-xs\" : \"top-0 left-0 h-full w-full\"}\\`,\n            viewBox: \"0 0 2048 2048\",\n            children: [\n              /* @__PURE__ */ jsx(\"title\", { children: \"stagewise\" }),\n              /* @__PURE__ */ jsx(\n                \"ellipse\",\n                {\n                  className: colorStyle[color] + (loading ? \" animate-pulse\" : \"\"),\n                  id: \"path3\",\n                  ry: \"624\",\n                  rx: \"624\",\n                  cy: \"1024\",\n                  cx: \"1024\"\n                }\n              )\n            ]\n          }\n        ),\n        /* @__PURE__ */ jsx(\n          \"svg\",\n          {\n            className: \\`absolute overflow-visible \\${color === \"gradient\" ? \"top-[25%] left-[25%] h-[50%] w-[50%]\" : \"top-0 left-0 h-full w-full\"}\\`,\n            viewBox: \"0 0 2048 2048\",\n            children: /* @__PURE__ */ jsx(\n              \"path\",\n              {\n                id: \"path4\",\n                className: \\`origin-center \\${colorStyle[color]}\\${loading ? loadingSpeed === \"fast\" ? \" animate-spin-fast\" : \" animate-spin-slow\" : \"\"}\\`,\n                d: \"M 1024 0 A 1024 1024 0 0 0 0 1024 A 1024 1024 0 0 0 1024 2048 L 1736 2048 L 1848 2048 C 1958.7998 2048 2048 1958.7998 2048 1848 L 2048 1736 L 2048 1024 A 1024 1024 0 0 0 1024 0 z M 1024.9414 200 A 824 824 0 0 1 1848.9414 1024 A 824 824 0 0 1 1024.9414 1848 A 824 824 0 0 1 200.94141 1024 A 824 824 0 0 1 1024.9414 200 z \"\n              }\n            )\n          }\n        )\n      ]\n    }\n  );\n}, SettingsButton = ({\n  onOpenPanel,\n  isActive = !1\n}) => /* @__PURE__ */ jsx(ToolbarSection, { children: /* @__PURE__ */ jsx(ToolbarButton, { onClick: onOpenPanel, active: isActive, children: /* @__PURE__ */ jsx(Settings, { className: \"size-4\" }) }) }), SettingsPanel = () => /* @__PURE__ */ jsxs(Panel, { children: [\n  /* @__PURE__ */ jsx(PanelHeader, { title: \"Settings\" }),\n  /* @__PURE__ */ jsx(PanelContent, { children: /* @__PURE__ */ jsx(ConnectionSettings, {}) }),\n  /* @__PURE__ */ jsx(PanelContent, { children: /* @__PURE__ */ jsx(ProjectInfoSection, {}) })\n] }), ConnectionSettings = () => {\n  const {\n    windows,\n    isDiscovering,\n    discoveryError,\n    discover,\n    selectedSession,\n    selectSession\n  } = useVSCode(), handleSessionChange = (e2) => {\n    const target = e2.target, selectedSessionId = target.value === \"\" ? void 0 : target.value;\n    selectSession(selectedSessionId);\n  }, { appName } = useVSCode(), handleRefresh = () => {\n    discover();\n  };\n  return /* @__PURE__ */ jsxs(\"div\", { className: \"space-y-4 pb-4\", children: [\n    /* @__PURE__ */ jsxs(\"div\", { children: [\n      /* @__PURE__ */ jsxs(\n        \"label\",\n        {\n          htmlFor: \"session-select\",\n          className: \"mb-2 block font-medium text-sm text-zinc-700\",\n          children: [\n            \"IDE Window \",\n            appName && \\`(\\${appName})\\`\n          ]\n        }\n      ),\n      /* @__PURE__ */ jsxs(\"div\", { className: \"flex w-full items-center space-x-2\", children: [\n        /* @__PURE__ */ jsxs(\n          \"select\",\n          {\n            id: \"session-select\",\n            value: (selectedSession == null ? void 0 : selectedSession.sessionId) || \"\",\n            onChange: handleSessionChange,\n            className: \"h-8 min-w-0 flex-1 rounded-lg border border-zinc-300 bg-zinc-500/10 px-3 text-sm backdrop-saturate-150 focus:border-zinc-500 focus:outline-none\",\n            disabled: isDiscovering,\n            children: [\n              /* @__PURE__ */ jsx(\"option\", { value: \"\", disabled: !0, children: windows.length > 0 ? \"Select an IDE window...\" : \"No windows available\" }),\n              windows.map((window2) => /* @__PURE__ */ jsxs(\"option\", { value: window2.sessionId, children: [\n                window2.displayName,\n                \" - Port \",\n                window2.port\n              ] }, window2.sessionId))\n            ]\n          }\n        ),\n        /* @__PURE__ */ jsx(\n          \"button\",\n          {\n            type: \"button\",\n            onClick: handleRefresh,\n            disabled: isDiscovering,\n            className: \"flex h-8 w-8 flex-shrink-0 items-center justify-center rounded-lg bg-zinc-500/10 backdrop-saturate-150 transition-colors hover:bg-zinc-500/20 disabled:opacity-50\",\n            title: \"Refresh window list\",\n            children: /* @__PURE__ */ jsx(\n              RefreshCw,\n              {\n                className: \\`size-4 \\${isDiscovering ? \"animate-spin\" : \"\"}\\`\n              }\n            )\n          }\n        )\n      ] }),\n      discoveryError && /* @__PURE__ */ jsxs(\"p\", { className: \"mt-1 text-red-600 text-sm\", children: [\n        \"Error discovering windows: \",\n        discoveryError\n      ] }),\n      !isDiscovering && windows.length === 0 && !discoveryError && /* @__PURE__ */ jsx(\"p\", { className: \"mt-1 text-sm text-zinc-500\", children: \"No IDE windows found. Make sure the Stagewise extension is installed and running.\" })\n    ] }),\n    selectedSession && /* @__PURE__ */ jsxs(\"div\", { className: \"rounded-lg bg-blue-50 p-3\", children: [\n      /* @__PURE__ */ jsxs(\"p\", { className: \"text-blue-800 text-sm\", children: [\n        /* @__PURE__ */ jsx(\"strong\", { children: \"Selected:\" }),\n        \" \",\n        selectedSession.displayName\n      ] }),\n      /* @__PURE__ */ jsxs(\"p\", { className: \"mt-1 text-blue-600 text-xs\", children: [\n        \"Session ID: \",\n        selectedSession.sessionId.substring(0, 8),\n        \"...\"\n      ] })\n    ] }),\n    !selectedSession && windows.length > 0 && /* @__PURE__ */ jsx(\"div\", { className: \"rounded-lg bg-amber-50 p-3\", children: /* @__PURE__ */ jsxs(\"p\", { className: \"text-amber-800 text-sm\", children: [\n      /* @__PURE__ */ jsx(\"strong\", { children: \"No window selected:\" }),\n      \" Please select an IDE window above to connect.\"\n    ] }) })\n  ] });\n}, ProjectInfoSection = () => /* @__PURE__ */ jsxs(\"div\", { className: \"space-y-2 text-xs text-zinc-700\", children: [\n  /* @__PURE__ */ jsxs(\"div\", { className: \"my-2 flex flex-wrap items-center gap-3\", children: [\n    /* @__PURE__ */ jsxs(\n      \"a\",\n      {\n        href: \"https://github.com/stagewise-io/stagewise\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"flex items-center gap-1 text-blue-700 hover:underline\",\n        title: \"GitHub Repository\",\n        children: [\n          /* @__PURE__ */ jsx(\"svg\", { width: \"16\", height: \"16\", fill: \"currentColor\", viewBox: \"0 0 24 24\", children: /* @__PURE__ */ jsx(\"path\", { d: \"M12 .5C5.73.5.5 5.73.5 12c0 5.08 3.29 9.39 7.86 10.91.58.11.79-.25.79-.56 0-.28-.01-1.02-.02-2-3.2.7-3.88-1.54-3.88-1.54-.53-1.34-1.3-1.7-1.3-1.7-1.06-.72.08-.71.08-.71 1.17.08 1.78 1.2 1.78 1.2 1.04 1.78 2.73 1.27 3.4.97.11-.75.41-1.27.74-1.56-2.56-.29-5.26-1.28-5.26-5.7 0-1.26.45-2.29 1.19-3.1-.12-.29-.52-1.46.11-3.05 0 0 .98-.31 3.2 1.18a11.1 11.1 0 0 1 2.92-.39c.99 0 1.99.13 2.92.39 2.22-1.49 3.2-1.18 3.2-1.18.63 1.59.23 2.76.11 3.05.74.81 1.19 1.84 1.19 3.1 0 4.43-2.7 5.41-5.27 5.7.42.36.79 1.08.79 2.18 0 1.57-.01 2.84-.01 3.23 0 .31.21.68.8.56C20.71 21.39 24 17.08 24 12c0-6.27-5.23-11.5-12-11.5z\" }) }),\n          \"GitHub\"\n        ]\n      }\n    ),\n    /* @__PURE__ */ jsxs(\n      \"a\",\n      {\n        href: \"https://discord.gg/gkdGsDYaKA\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"flex items-center gap-1 text-indigo-700 hover:underline\",\n        title: \"Join our Discord\",\n        children: [\n          /* @__PURE__ */ jsx(\"svg\", { width: \"16\", height: \"16\", fill: \"currentColor\", viewBox: \"0 0 24 24\", children: /* @__PURE__ */ jsx(\"path\", { d: \"M20.317 4.369A19.791 19.791 0 0 0 16.885 3.2a.117.117 0 0 0-.124.06c-.537.96-1.13 2.22-1.552 3.2a18.524 18.524 0 0 0-5.418 0c-.423-.98-1.016-2.24-1.553-3.2a.117.117 0 0 0-.124-.06A19.736 19.736 0 0 0 3.683 4.369a.105.105 0 0 0-.047.043C.533 9.043-.32 13.579.099 18.057a.12.12 0 0 0 .045.083c1.934 1.426 3.81 2.288 5.671 2.857a.116.116 0 0 0 .127-.043c.438-.602.827-1.24 1.165-1.908a.112.112 0 0 0-.062-.158c-.619-.234-1.205-.52-1.77-.853a.117.117 0 0 1-.012-.194c.119-.09.238-.183.353-.277a.112.112 0 0 1 .114-.013c3.747 1.71 7.789 1.71 11.533 0a.112.112 0 0 1 .115.012c.115.094.234.188.353.278a.117.117 0 0 1-.012.194c-.565.333-1.151.619-1.77.853a.112.112 0 0 0-.062.158c.34.668.728 1.306 1.165 1.908a.115.115 0 0 0 .127.043c1.861-.569 3.737-1.431 5.671-2.857a.12.12 0 0 0 .045-.083c.5-5.177-.838-9.673-3.636-13.645a.105.105 0 0 0-.047-.043zM8.02 15.331c-1.183 0-2.156-1.085-2.156-2.419 0-1.333.955-2.418 2.156-2.418 1.21 0 2.175 1.095 2.156 2.418 0 1.334-.955 2.419-2.156 2.419zm7.96 0c-1.183 0-2.156-1.085-2.156-2.419 0-1.333.955-2.418 2.156-2.418 1.21 0 2.175 1.095 2.156 2.418 0 1.334-.946 2.419-2.156 2.419z\" }) }),\n          \"Discord\"\n        ]\n      }\n    ),\n    /* @__PURE__ */ jsxs(\n      \"a\",\n      {\n        href: \"https://marketplace.visualstudio.com/items?itemName=stagewise.stagewise-vscode-extension\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"flex items-center gap-1 text-violet-700 hover:underline\",\n        title: \"VS Code Marketplace\",\n        children: [\n          /* @__PURE__ */ jsx(\"svg\", { width: \"16\", height: \"16\", fill: \"currentColor\", viewBox: \"0 0 24 24\", children: /* @__PURE__ */ jsx(\"path\", { d: \"M21.805 2.29a2.25 2.25 0 0 0-2.45-.49l-7.5 3.25a2.25 2.25 0 0 0-1.31 2.06v1.13l-5.13 2.22a2.25 2.25 0 0 0-1.31 2.06v3.5a2.25 2.25 0 0 0 1.31 2.06l5.13 2.22v1.13a2.25 2.25 0 0 0 1.31 2.06l7.5 3.25a2.25 2.25 0 0 0 2.45-.49A2.25 2.25 0 0 0 23 20.25V3.75a2.25 2.25 0 0 0-1.195-1.46zM12 20.25v-16.5l7.5 3.25v10l-7.5 3.25z\" }) }),\n          \"VS Code Marketplace\"\n        ]\n      }\n    )\n  ] }),\n  /* @__PURE__ */ jsxs(\"div\", { className: \"mt-2\", children: [\n    /* @__PURE__ */ jsx(\"span\", { className: \"font-semibold\", children: \"Contact:\" }),\n    \" \",\n    /* @__PURE__ */ jsx(\n      \"a\",\n      {\n        href: \"mailto:sales@stagewise.io\",\n        className: \"text-blue-700 hover:underline\",\n        children: \"sales@stagewise.io\"\n      }\n    )\n  ] }),\n  /* @__PURE__ */ jsx(\"div\", { className: \"mt-2 text-zinc-500\", children: /* @__PURE__ */ jsxs(\"span\", { children: [\n    \"Licensed under AGPL v3.\",\n    \" \",\n    /* @__PURE__ */ jsx(\n      \"a\",\n      {\n        href: \"https://github.com/stagewise-io/stagewise/blob/main/LICENSE\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"hover:underline\",\n        children: \"View license\"\n      }\n    )\n  ] }) })\n] });\nfunction DisconnectedStatePanel({\n  discover,\n  discoveryError\n}) {\n  return /* @__PURE__ */ jsxs(\"div\", { className: \"rounded-lg border border-orange-200 bg-orange-50/90 p-4 shadow-lg backdrop-blur\", children: [\n    /* @__PURE__ */ jsxs(\"div\", { className: \"mb-3 flex items-center gap-3\", children: [\n      /* @__PURE__ */ jsx(WifiOff, { className: \"size-5 text-orange-600\" }),\n      /* @__PURE__ */ jsx(\"h3\", { className: \"font-semibold text-orange-800\", children: \"Not Connected\" })\n    ] }),\n    /* @__PURE__ */ jsxs(\"div\", { className: \"space-y-3 text-orange-700 text-sm\", children: [\n      /* @__PURE__ */ jsx(\"p\", { children: \"The stagewise toolbar isn't connected to any IDE window.\" }),\n      discoveryError && /* @__PURE__ */ jsxs(\"div\", { className: \"rounded border border-red-200 bg-red-100 p-2 text-red-700\", children: [\n        /* @__PURE__ */ jsx(\"strong\", { children: \"Error:\" }),\n        \" \",\n        discoveryError\n      ] }),\n      /* @__PURE__ */ jsxs(\"div\", { className: \"space-y-2\", children: [\n        /* @__PURE__ */ jsx(\"p\", { className: \"font-medium\", children: \"To connect:\" }),\n        /* @__PURE__ */ jsxs(\"ol\", { className: \"list-inside list-decimal space-y-1 pl-2 text-xs\", children: [\n          /* @__PURE__ */ jsx(\"li\", { children: \"Open your IDE (Cursor, Windsurf, etc.)\" }),\n          /* @__PURE__ */ jsx(\"li\", { children: \"Install the stagewise extension\" }),\n          /* @__PURE__ */ jsx(\"li\", { children: \"Make sure the extension is active\" }),\n          /* @__PURE__ */ jsx(\"li\", { children: \"Click refresh below\" })\n        ] })\n      ] }),\n      /* @__PURE__ */ jsxs(\n        \"button\",\n        {\n          type: \"button\",\n          onClick: discover,\n          className: \"flex w-full items-center justify-center gap-2 rounded-md bg-orange-600 px-3 py-2 font-medium text-sm text-white transition-colors hover:bg-orange-700\",\n          children: [\n            /* @__PURE__ */ jsx(RefreshCw, { className: \"size-4\" }),\n            \"Retry Connection\"\n          ]\n        }\n      ),\n      /* @__PURE__ */ jsx(\"div\", { className: \"border-orange-200 border-t pt-2\", children: /* @__PURE__ */ jsx(\n        \"a\",\n        {\n          href: \"https://marketplace.visualstudio.com/items?itemName=stagewise.stagewise-vscode-extension\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"text-orange-600 text-xs hover:text-orange-800 hover:underline\",\n          children: \"Get VS Code Extension →\"\n        }\n      ) })\n    ] })\n  ] });\n}\nfunction ConnectingStatePanel() {\n  return /* @__PURE__ */ jsxs(\"div\", { className: \"rounded-lg border border-blue-200 bg-blue-50/90 p-4 shadow-lg backdrop-blur\", children: [\n    /* @__PURE__ */ jsxs(\"div\", { className: \"mb-3 flex items-center gap-3\", children: [\n      /* @__PURE__ */ jsx(RefreshCw, { className: \"size-5 animate-spin text-blue-600\" }),\n      /* @__PURE__ */ jsx(\"h3\", { className: \"font-semibold text-blue-800\", children: \"Connecting...\" })\n    ] }),\n    /* @__PURE__ */ jsx(\"div\", { className: \"text-blue-700 text-sm\", children: /* @__PURE__ */ jsxs(\"p\", { children: [\n      \"Looking for active agent instances...\",\n      /* @__PURE__ */ jsx(\"br\", {}),\n      /* @__PURE__ */ jsx(\"span\", { className: \"text-blue-500 text-xs\", children: \"VS Code, Cursor, Windsurf ...\" })\n    ] }) })\n  ] });\n}\nfunction WindowSelectionPanel() {\n  const {\n    windows,\n    isDiscovering,\n    discoveryError,\n    discover,\n    selectedSession,\n    selectSession,\n    appName\n  } = useVSCode(), handleSessionChange = (e2) => {\n    const target = e2.target, selectedSessionId = target.value === \"\" ? void 0 : target.value;\n    selectSession(selectedSessionId);\n  }, handleRefresh = () => {\n    discover();\n  };\n  return /* @__PURE__ */ jsxs(\"div\", { className: \"rounded-lg border border-blue-200 bg-blue-50/90 p-4 shadow-lg backdrop-blur\", children: [\n    /* @__PURE__ */ jsx(\"div\", { className: \"mb-3\", children: /* @__PURE__ */ jsx(\"h3\", { className: \"font-semibold text-blue-800\", children: \"Select IDE Window\" }) }),\n    /* @__PURE__ */ jsxs(\"div\", { className: \"space-y-3\", children: [\n      /* @__PURE__ */ jsxs(\"div\", { children: [\n        /* @__PURE__ */ jsxs(\n          \"label\",\n          {\n            htmlFor: \"window-selection-select\",\n            className: \"mb-2 block font-medium text-blue-700 text-sm\",\n            children: [\n              \"IDE Window \",\n              appName && \\`(\\${appName})\\`\n            ]\n          }\n        ),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"flex w-full items-center space-x-2\", children: [\n          /* @__PURE__ */ jsxs(\n            \"select\",\n            {\n              id: \"window-selection-select\",\n              value: (selectedSession == null ? void 0 : selectedSession.sessionId) || \"\",\n              onChange: handleSessionChange,\n              className: \"h-8 min-w-0 flex-1 rounded-lg border border-blue-300 bg-white/80 px-3 text-sm backdrop-saturate-150 focus:border-blue-500 focus:outline-none\",\n              disabled: isDiscovering,\n              children: [\n                /* @__PURE__ */ jsx(\"option\", { value: \"\", disabled: !0, children: windows.length > 0 ? \"Select an IDE window...\" : \"No windows available\" }),\n                windows.map((window2) => /* @__PURE__ */ jsxs(\"option\", { value: window2.sessionId, children: [\n                  window2.displayName,\n                  \" - Port \",\n                  window2.port\n                ] }, window2.sessionId))\n              ]\n            }\n          ),\n          /* @__PURE__ */ jsx(\n            \"button\",\n            {\n              type: \"button\",\n              onClick: handleRefresh,\n              disabled: isDiscovering,\n              className: \"flex h-8 w-8 flex-shrink-0 items-center justify-center rounded-lg bg-blue-100/80 backdrop-saturate-150 transition-colors hover:bg-blue-200/80 disabled:opacity-50\",\n              title: \"Refresh window list\",\n              children: /* @__PURE__ */ jsx(\n                RefreshCw,\n                {\n                  className: \\`size-4 text-blue-600 \\${isDiscovering ? \"animate-spin\" : \"\"}\\`\n                }\n              )\n            }\n          )\n        ] }),\n        discoveryError && /* @__PURE__ */ jsxs(\"p\", { className: \"mt-1 text-red-600 text-sm\", children: [\n          \"Error discovering windows: \",\n          discoveryError\n        ] }),\n        !isDiscovering && windows.length === 0 && !discoveryError && /* @__PURE__ */ jsx(\"p\", { className: \"mt-1 text-blue-600 text-sm\", children: \"No IDE windows found. Make sure the Stagewise extension is installed and running.\" })\n      ] }),\n      selectedSession && /* @__PURE__ */ jsxs(\"div\", { className: \"rounded-lg bg-blue-100/80 p-3\", children: [\n        /* @__PURE__ */ jsxs(\"p\", { className: \"text-blue-800 text-sm\", children: [\n          /* @__PURE__ */ jsx(\"strong\", { children: \"Selected:\" }),\n          \" \",\n          selectedSession.displayName\n        ] }),\n        /* @__PURE__ */ jsxs(\"p\", { className: \"mt-1 text-blue-600 text-xs\", children: [\n          \"Session ID: \",\n          selectedSession.sessionId.substring(0, 8),\n          \"...\"\n        ] })\n      ] }),\n      !selectedSession && /* @__PURE__ */ jsx(\"div\", { className: \"rounded-lg border border-blue-200 bg-white/90 p-3\", children: /* @__PURE__ */ jsxs(\"p\", { className: \"text-blue-800 text-sm\", children: [\n        /* @__PURE__ */ jsx(\"strong\", { children: \"No window selected:\" }),\n        \" Please select an IDE window above to connect.\"\n      ] }) })\n    ] })\n  ] });\n}\nfunction NormalStateButtons({\n  handleButtonClick,\n  pluginBox,\n  setPluginBox,\n  openPanel,\n  setOpenPanel,\n  chatState\n}) {\n  const pluginsWithActions = usePlugins().plugins.filter(\n    (plugin) => plugin.onActionClick\n  );\n  return /* @__PURE__ */ jsxs(Fragment$1, { children: [\n    /* @__PURE__ */ jsx(\n      SettingsButton,\n      {\n        onOpenPanel: () => setOpenPanel(openPanel === \"settings\" ? null : \"settings\"),\n        isActive: openPanel === \"settings\"\n      }\n    ),\n    pluginsWithActions.length > 0 && /* @__PURE__ */ jsx(ToolbarSection, { children: pluginsWithActions.map((plugin) => /* @__PURE__ */ jsx(\n      ToolbarButton,\n      {\n        onClick: handleButtonClick(() => {\n          (pluginBox == null ? void 0 : pluginBox.pluginName) !== plugin.pluginName ? plugin.onActionClick() && setPluginBox({\n            component: plugin.onActionClick(),\n            pluginName: plugin.pluginName\n          }) : setPluginBox(null);\n        }),\n        active: (pluginBox == null ? void 0 : pluginBox.pluginName) === plugin.pluginName,\n        children: plugin.iconSvg ? /* @__PURE__ */ jsx(\"span\", { className: \"size-4 stroke-zinc-950 text-zinc-950 *:size-full\", children: plugin.iconSvg }) : /* @__PURE__ */ jsx(Puzzle, { className: \"size-4\" })\n      },\n      plugin.pluginName\n    )) }),\n    /* @__PURE__ */ jsx(ToolbarSection, { children: /* @__PURE__ */ jsx(\n      ToolbarButton,\n      {\n        onClick: handleButtonClick(\n          () => chatState.isPromptCreationActive ? chatState.stopPromptCreation() : chatState.startPromptCreation()\n        ),\n        active: chatState.isPromptCreationActive,\n        children: /* @__PURE__ */ jsx(MessageCircle, { className: \"size-4 stroke-zinc-950\" })\n      }\n    ) })\n  ] });\n}\nfunction DisconnectedStateButtons() {\n  const { discover, isDiscovering } = useVSCode();\n  return /* @__PURE__ */ jsx(ToolbarSection, { children: /* @__PURE__ */ jsx(\n    ToolbarButton,\n    {\n      onClick: isDiscovering ? void 0 : () => discover(),\n      className: cn(\n        isDiscovering ? \"text-blue-700\" : \"text-orange-700 hover:bg-orange-200\"\n      ),\n      children: /* @__PURE__ */ jsx(\n        RefreshCw,\n        {\n          className: cn(\"size-4\", isDiscovering && \"animate-spin\")\n        }\n      )\n    }\n  ) });\n}\nfunction ToolbarDraggableBox() {\n  const provider = useContext(DraggableContext), borderLocation = provider == null ? void 0 : provider.borderLocation, isReady = !!borderLocation && borderLocation.right - borderLocation.left > 0 && borderLocation.bottom - borderLocation.top > 0, draggable = useDraggable({\n    startThreshold: 10,\n    initialSnapArea: \"bottomRight\"\n  }), {\n    windows,\n    isDiscovering,\n    discoveryError,\n    discover,\n    shouldPromptWindowSelection\n  } = useVSCode(), isConnected = windows.length > 0, [pluginBox, setPluginBox] = useState(null), [openPanel, setOpenPanel] = useState(null), chatState = useChatState(), { minimized, minimize, expand } = useAppState();\n  useEffect(() => {\n    minimized && (setPluginBox(null), setOpenPanel(null));\n  }, [minimized]);\n  const handleButtonClick = (handler) => (e2) => {\n    if (draggable.wasDragged) {\n      e2.preventDefault(), e2.stopPropagation();\n      return;\n    }\n    handler();\n  };\n  if (!isReady) return null;\n  const isLoadingState = isDiscovering, isDisconnectedState = !isConnected && !isDiscovering, isConnectedState = isConnected, shouldShowWindowSelection = shouldPromptWindowSelection && isConnectedState, theme = isLoadingState ? {\n    border: \"border-blue-300\",\n    bg: \"bg-blue-100/80\",\n    divideBorder: \"divide-blue-200\",\n    buttonBg: \"from-blue-600 to-sky-600\",\n    buttonColor: \"text-blue-700\"\n  } : isDisconnectedState ? {\n    border: \"border-orange-300\",\n    bg: \"bg-orange-100/80\",\n    divideBorder: \"divide-orange-200\",\n    buttonBg: \"from-orange-600 to-red-600\",\n    buttonColor: \"text-orange-700\"\n  } : {\n    border: \"border-border/30\",\n    bg: \"bg-zinc-50/80\",\n    divideBorder: \"divide-border/20\",\n    buttonBg: \"from-sky-700 to-fuchsia-700\",\n    buttonColor: \"stroke-zinc-950\"\n  }, getMinimizedIcon = () => isLoadingState ? /* @__PURE__ */ jsx(RefreshCw, { className: \"size-4 animate-spin text-white\" }) : isDisconnectedState ? /* @__PURE__ */ jsx(WifiOff, { className: \"size-4 text-white\" }) : /* @__PURE__ */ jsx(Logo, { className: \"size-4.5\", color: \"white\" });\n  return /* @__PURE__ */ jsxs(\"div\", { ref: draggable.draggableRef, className: \"absolute p-0.5\", children: [\n    /* @__PURE__ */ jsxs(\n      \"div\",\n      {\n        className: cn(\n          \"absolute flex h-[calc(100vh-32px)] w-96 max-w-[40vw] items-stretch justify-end transition-all duration-300 ease-out\",\n          draggable.position.isTopHalf ? \"top-0 flex-col-reverse\" : \"bottom-0 flex-col\",\n          draggable.position.isLeftHalf ? \"left-[100%]\" : \"right-[100%]\"\n        ),\n        children: [\n          /* @__PURE__ */ jsxs(\n            \"div\",\n            {\n              className: cn(\n                \"flex min-h-0 flex-1 origin-bottom-right flex-col items-stretch px-2 transition-all duration-300 ease-out\",\n                (pluginBox || openPanel === \"settings\" || !isConnectedState || shouldShowWindowSelection) && !minimized ? \"pointer-events-auto scale-100 opacity-100 blur-none\" : \"pointer-events-none h-0 scale-50 opacity-0 blur-md\",\n                draggable.position.isTopHalf ? \"justify-start\" : \"justify-end\",\n                draggable.position.isTopHalf ? draggable.position.isLeftHalf ? \"origin-top-left\" : \"origin-top-right\" : draggable.position.isLeftHalf ? \"origin-bottom-left\" : \"origin-bottom-right\"\n              ),\n              children: [\n                isLoadingState && /* @__PURE__ */ jsx(ConnectingStatePanel, {}),\n                isDisconnectedState && /* @__PURE__ */ jsx(\n                  DisconnectedStatePanel,\n                  {\n                    discover,\n                    discoveryError\n                  }\n                ),\n                shouldShowWindowSelection && /* @__PURE__ */ jsx(WindowSelectionPanel, {}),\n                isConnectedState && openPanel === \"settings\" && !shouldShowWindowSelection && /* @__PURE__ */ jsx(SettingsPanel, {}),\n                isConnectedState && !shouldShowWindowSelection && (pluginBox == null ? void 0 : pluginBox.component)\n              ]\n            }\n          ),\n          isConnectedState && /* @__PURE__ */ jsx(\n            \"div\",\n            {\n              className: cn(\n                \"z-20 w-full px-2 transition-all duration-300 ease-out\",\n                chatState.isPromptCreationActive && !minimized ? \"pointer-events-auto scale-100 opacity-100 blur-none\" : \"pointer-events-none h-0 scale-50 opacity-0 blur-md\",\n                draggable.position.isTopHalf ? \"mb-2\" : \"mt-2\",\n                draggable.position.isTopHalf ? draggable.position.isLeftHalf ? \"origin-top-left\" : \"origin-top-right\" : draggable.position.isLeftHalf ? \"origin-bottom-left\" : \"origin-bottom-right\"\n              ),\n              children: /* @__PURE__ */ jsx(ToolbarChatArea, {})\n            }\n          )\n        ]\n      }\n    ),\n    /* @__PURE__ */ jsxs(\n      \"div\",\n      {\n        ref: draggable.handleRef,\n        className: cn(\n          \"pointer-events-auto z-50 rounded-full border px-0.5 shadow-md backdrop-blur transition-all duration-300 ease-out\",\n          theme.border,\n          theme.bg,\n          draggable.position.isTopHalf ? \"flex-col-reverse divide-y-reverse\" : \"flex-col\",\n          minimized ? \"h-9.5 w-9.5\" : \"h-[calc-size(auto,size)] h-auto w-auto\"\n        ),\n        children: [\n          /* @__PURE__ */ jsx(\n            H$1,\n            {\n              onClick: () => expand(),\n              className: cn(\n                \"absolute right-0 left-0 z-50 flex size-9 origin-center cursor-pointer items-center justify-center rounded-full bg-gradient-to-tr transition-all duration-300 ease-out\",\n                theme.buttonBg,\n                minimized ? \"pointer-events-auto scale-100 opacity-100 blur-none\" : \"pointer-events-none scale-25 opacity-0 blur-md\",\n                draggable.position.isTopHalf ? \"top-0\" : \"bottom-0\"\n              ),\n              children: getMinimizedIcon()\n            }\n          ),\n          /* @__PURE__ */ jsxs(\n            \"div\",\n            {\n              className: cn(\n                \"flex h-[calc-size(auto)] scale-100 items-center justify-center divide-y transition-all duration-300 ease-out\",\n                theme.divideBorder,\n                draggable.position.isTopHalf ? \"origin-top flex-col-reverse divide-y-reverse\" : \"origin-bottom flex-col\",\n                minimized && \"pointer-events-none h-0 scale-50 opacity-0 blur-md\"\n              ),\n              children: [\n                isConnectedState ? /* @__PURE__ */ jsx(\n                  NormalStateButtons,\n                  {\n                    handleButtonClick,\n                    pluginBox,\n                    setPluginBox,\n                    openPanel,\n                    setOpenPanel,\n                    chatState\n                  }\n                ) : /* @__PURE__ */ jsx(DisconnectedStateButtons, {}),\n                /* @__PURE__ */ jsx(ToolbarSection, { children: /* @__PURE__ */ jsx(\n                  ToolbarButton,\n                  {\n                    onClick: handleButtonClick(() => minimize()),\n                    className: cn(\n                      \"h-5\",\n                      theme.buttonColor,\n                      draggable.position.isTopHalf ? \"rounded-t-3xl rounded-b-lg\" : \"rounded-t-lg rounded-b-3xl\"\n                    ),\n                    children: draggable.position.isTopHalf ? /* @__PURE__ */ jsx(ChevronUp, { className: \"size-4\" }) : /* @__PURE__ */ jsx(ChevronDown, { className: \"size-4\" })\n                  }\n                ) })\n              ]\n            }\n          )\n        ]\n      }\n    )\n  ] });\n}\nfunction ToolbarArea() {\n  const containerRef = useRef(null);\n  return /* @__PURE__ */ jsx(\"div\", { className: \"absolute size-full\", children: /* @__PURE__ */ jsx(\"div\", { className: \"absolute inset-4\", ref: containerRef, children: /* @__PURE__ */ jsx(\n    DraggableProvider,\n    {\n      containerRef,\n      snapAreas: {\n        topLeft: !0,\n        topRight: !0,\n        bottomLeft: !0,\n        bottomRight: !0,\n        topCenter: !0,\n        bottomCenter: !0\n      },\n      children: /* @__PURE__ */ jsx(ToolbarDraggableBox, {})\n    }\n  ) }) });\n}\nfunction ElementSelector(props) {\n  const lastHoveredElement = useRef(null), handleMouseMove = useCallback(\n    (event) => {\n      if (event.target.closest(\".companion\")) return;\n      const refElement = getElementAtPoint(event.clientX, event.clientY);\n      props.ignoreList.includes(refElement) || lastHoveredElement.current !== refElement && (lastHoveredElement.current = refElement, props.onElementHovered(refElement));\n    },\n    [props]\n  ), handleMouseLeave = useCallback(() => {\n    lastHoveredElement.current = null, props.onElementUnhovered();\n  }, [props]), handleMouseClick = useCallback(\n    (event) => {\n      event.preventDefault(), event.stopPropagation(), lastHoveredElement.current && (props.ignoreList.includes(lastHoveredElement.current) || props.onElementSelected(lastHoveredElement.current));\n    },\n    [props]\n  );\n  return /* @__PURE__ */ jsx(\n    \"div\",\n    {\n      className: \"pointer-events-auto fixed inset-0 h-screen w-screen cursor-copy\",\n      onMouseMove: handleMouseMove,\n      onMouseLeave: handleMouseLeave,\n      onClick: handleMouseClick,\n      role: \"button\",\n      tabIndex: 0\n    }\n  );\n}\nfunction useWindowSize() {\n  const [size, setSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  }), handleResize = useCallback(\n    () => setSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    }),\n    []\n  );\n  return useEventListener(\"resize\", handleResize), size;\n}\nfunction useCyclicUpdate(func, frameRate) {\n  const animationFrameHandle = useRef(void 0), timeBetweenFrames = useMemo(\n    () => 1e3 / frameRate,\n    [frameRate]\n  ), lastCallFrameTime = useRef(0), update = useCallback(\n    (frameTime) => {\n      frameTime - lastCallFrameTime.current >= timeBetweenFrames && (func(), lastCallFrameTime.current = frameTime), animationFrameHandle.current = requestAnimationFrame(update);\n    },\n    [func, timeBetweenFrames]\n  );\n  useEffect(() => (animationFrameHandle.current = requestAnimationFrame(update), () => {\n    animationFrameHandle.current && (cancelAnimationFrame(animationFrameHandle.current), animationFrameHandle.current = void 0);\n  }), [frameRate, update]);\n}\nfunction ContextItemProposal({\n  refElement,\n  ...props\n}) {\n  const boxRef = useRef(null), windowSize = useWindowSize(), { plugins } = usePlugins(), hoveredElementPluginContext = useMemo(() => refElement ? plugins.filter(\n    (plugin) => plugin.onContextElementSelect\n  ).map((plugin) => {\n    var _a;\n    return {\n      pluginName: plugin.pluginName,\n      context: (_a = plugin.onContextElementSelect) == null ? void 0 : _a.call(plugin, refElement)\n    };\n  }) : [], [refElement]), updateBoxPosition = useCallback(() => {\n    if (boxRef.current)\n      if (refElement) {\n        const referenceRect = refElement.getBoundingClientRect();\n        boxRef.current.style.top = \\`\\${referenceRect.top - 2}px\\`, boxRef.current.style.left = \\`\\${referenceRect.left - 2}px\\`, boxRef.current.style.width = \\`\\${referenceRect.width + 4}px\\`, boxRef.current.style.height = \\`\\${referenceRect.height + 4}px\\`, boxRef.current.style.display = void 0;\n      } else\n        boxRef.current.style.height = \"0px\", boxRef.current.style.width = \"0px\", boxRef.current.style.top = \\`\\${windowSize.height / 2}px\\`, boxRef.current.style.left = \\`\\${windowSize.width / 2}px\\`, boxRef.current.style.display = \"none\";\n  }, [refElement, windowSize.height, windowSize.width]);\n  return useCyclicUpdate(updateBoxPosition, 30), /* @__PURE__ */ jsxs(\n    \"div\",\n    {\n      ...props,\n      className: \"fixed flex items-center justify-center rounded-lg border-2 border-blue-600/80 bg-blue-600/20 text-white transition-all duration-100\",\n      style: { zIndex: 1e3 },\n      ref: boxRef,\n      children: [\n        /* @__PURE__ */ jsxs(\"div\", { className: \"absolute top-0.5 left-0.5 flex w-full flex-row items-start justify-start gap-1\", children: [\n          /* @__PURE__ */ jsx(\"div\", { className: \"flex flex-row items-center justify-center gap-0.5 overflow-hidden rounded-md bg-zinc-700/80 px-1 py-0 font-medium text-white text-xs\", children: /* @__PURE__ */ jsx(\"span\", { className: \"truncate\", children: refElement.tagName.toLowerCase() }) }),\n          hoveredElementPluginContext.filter((plugin) => plugin.context.annotation).map((plugin) => {\n            var _a;\n            return /* @__PURE__ */ jsxs(\"div\", { className: \"flex flex-row items-center justify-center gap-0.5 overflow-hidden rounded-md bg-zinc-700/80 px-1 py-0 font-medium text-white text-xs\", children: [\n              /* @__PURE__ */ jsx(\"span\", { className: \"size-3 shrink-0 stroke-white text-white *:size-full\", children: (_a = plugins.find((p2) => p2.pluginName === plugin.pluginName)) == null ? void 0 : _a.iconSvg }),\n              /* @__PURE__ */ jsx(\"span\", { className: \"truncate\", children: plugin.context.annotation })\n            ] });\n          })\n        ] }),\n        /* @__PURE__ */ jsx(Plus, { className: \"size-6 drop-shadow-black drop-shadow-md\" })\n      ]\n    }\n  );\n}\nfunction ContextItem({\n  refElement,\n  pluginContext,\n  ...props\n}) {\n  const boxRef = useRef(null), windowSize = useWindowSize(), updateBoxPosition = useCallback(() => {\n    if (boxRef.current)\n      if (refElement) {\n        const referenceRect = refElement.getBoundingClientRect();\n        boxRef.current.style.top = \\`\\${referenceRect.top}px\\`, boxRef.current.style.left = \\`\\${referenceRect.left}px\\`, boxRef.current.style.width = \\`\\${referenceRect.width}px\\`, boxRef.current.style.height = \\`\\${referenceRect.height}px\\`, boxRef.current.style.display = void 0;\n      } else\n        boxRef.current.style.height = \"0px\", boxRef.current.style.width = \"0px\", boxRef.current.style.top = \\`\\${windowSize.height / 2}px\\`, boxRef.current.style.left = \\`\\${windowSize.width / 2}px\\`, boxRef.current.style.display = \"none\";\n  }, [refElement, windowSize.height, windowSize.width]);\n  useCyclicUpdate(updateBoxPosition, 30);\n  const chatState = useChatState(), handleDeleteClick = useCallback(() => {\n    chatState.removeChatDomContext(chatState.currentChatId, refElement);\n  }, [chatState, refElement]), { plugins } = usePlugins();\n  return /* @__PURE__ */ jsxs(\n    \"div\",\n    {\n      ...props,\n      className: \"pointer-events-auto fixed flex cursor-pointer items-center justify-center rounded-lg border-2 border-green-600/80 bg-green-600/5 text-transparent transition-all duration-0 hover:border-red-600/80 hover:bg-red-600/20 hover:text-white\",\n      ref: boxRef,\n      onClick: handleDeleteClick,\n      role: \"button\",\n      tabIndex: 0,\n      children: [\n        /* @__PURE__ */ jsxs(\"div\", { className: \"absolute top-0.5 left-0.5 flex w-full flex-row items-start justify-start gap-1\", children: [\n          /* @__PURE__ */ jsx(\"div\", { className: \"flex flex-row items-center justify-center gap-0.5 overflow-hidden rounded-md bg-zinc-700/80 px-1 py-0 font-medium text-white text-xs\", children: /* @__PURE__ */ jsx(\"span\", { className: \"truncate\", children: refElement.tagName.toLowerCase() }) }),\n          pluginContext.filter((plugin) => plugin.context.annotation).map((plugin) => {\n            var _a;\n            return /* @__PURE__ */ jsxs(\"div\", { className: \"flex flex-row items-center justify-center gap-0.5 overflow-hidden rounded-md bg-zinc-700/80 px-1 py-0 font-medium text-white text-xs\", children: [\n              /* @__PURE__ */ jsx(\"span\", { className: \"size-3 shrink-0 stroke-white text-white *:size-full\", children: (_a = plugins.find((p2) => p2.pluginName === plugin.pluginName)) == null ? void 0 : _a.iconSvg }),\n              /* @__PURE__ */ jsx(\"span\", { className: \"truncate\", children: plugin.context.annotation })\n            ] });\n          })\n        ] }),\n        /* @__PURE__ */ jsx(Trash2, { className: \"size-6 drop-shadow-black drop-shadow-md\" })\n      ]\n    }\n  );\n}\nfunction SelectorCanvas() {\n  const {\n    chats,\n    currentChatId,\n    addChatDomContext,\n    isPromptCreationActive,\n    promptState\n  } = useChatState(), currentChat = useMemo(\n    () => chats.find((chat) => chat.id === currentChatId),\n    [currentChatId, chats]\n  ), shouldShow = isPromptCreationActive && promptState !== \"loading\", contextElements = useMemo(() => (currentChat == null ? void 0 : currentChat.domContextElements) || [], [currentChat]), [hoveredElement, setHoveredElement] = useState(\n    null\n  ), addElementToContext = useCallback(\n    (el) => {\n      addChatDomContext(currentChatId, el);\n    },\n    [addChatDomContext, currentChatId]\n  );\n  return shouldShow ? /* @__PURE__ */ jsxs(Fragment$1, { children: [\n    hoveredElement && /* @__PURE__ */ jsx(ContextItemProposal, { refElement: hoveredElement }),\n    /* @__PURE__ */ jsx(\n      ElementSelector,\n      {\n        ignoreList: contextElements.map((el) => el.element),\n        onElementHovered: setHoveredElement,\n        onElementSelected: addElementToContext,\n        onElementUnhovered: () => setHoveredElement(null)\n      }\n    ),\n    contextElements.map((el) => /* @__PURE__ */ jsx(ContextItem, { refElement: el.element, pluginContext: el.pluginContext }))\n  ] }) : null;\n}\nfunction DesktopLayout() {\n  return /* @__PURE__ */ jsxs(\"div\", { className: cn(\"fixed inset-0 h-screen w-screen\"), children: [\n    /* @__PURE__ */ jsx(SelectorCanvas, {}),\n    /* @__PURE__ */ jsx(ToolbarArea, {})\n  ] });\n}\nfunction MainAppBlocker() {\n  const { isMainAppBlocked } = useAppState();\n  return /* @__PURE__ */ jsx(\n    \"div\",\n    {\n      className: cn(\n        \"fixed inset-0 h-screen w-screen\",\n        isMainAppBlocked ? \"pointer-events-auto\" : \"pointer-events-none\"\n      ),\n      role: \"button\",\n      tabIndex: 0\n    }\n  );\n}\nfunction App(config2) {\n  return /* @__PURE__ */ jsxs(AppStateProvider, { children: [\n    /* @__PURE__ */ jsx(MainAppBlocker, {}),\n    /* @__PURE__ */ jsxs(ContextProviders, { config: config2, children: [\n      /* @__PURE__ */ jsx(HotkeyListener, {}),\n      /* @__PURE__ */ jsx(DesktopLayout, {})\n    ] })\n  ] });\n}\nconst styleNode = document.createElement(\"style\");\nstyleNode.textContent = appStyle;\ndocument.head.appendChild(styleNode);\ncreateRoot(document.body).render(\n  createElement(StrictMode, null, createElement(App, config))\n);\n`, \"plugin-ui.js\": `import { j as clsx, c as cn, b as usePlugins } from \"panel-BpInY05d.js\";\nimport { d, f, k, e } from \"panel-BpInY05d.js\";\nimport { jsx } from \"react/jsx-runtime\";\nconst falsyToString = (value) => typeof value == \"boolean\" ? \\`\\${value}\\` : value === 0 ? \"0\" : value, cx = clsx, cva = (base, config) => (props) => {\n  var _config_compoundVariants;\n  if ((config == null ? void 0 : config.variants) == null) return cx(base, props == null ? void 0 : props.class, props == null ? void 0 : props.className);\n  const { variants, defaultVariants } = config, getVariantClassNames = Object.keys(variants).map((variant) => {\n    const variantProp = props == null ? void 0 : props[variant], defaultVariantProp = defaultVariants == null ? void 0 : defaultVariants[variant];\n    if (variantProp === null) return null;\n    const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n    return variants[variant][variantKey];\n  }), propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {\n    let [key, value] = param;\n    return value === void 0 || (acc[key] = value), acc;\n  }, {}), getCompoundVariantClassNames = config == null || (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param) => {\n    let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;\n    return Object.entries(compoundVariantOptions).every((param2) => {\n      let [key, value] = param2;\n      return Array.isArray(value) ? value.includes({\n        ...defaultVariants,\n        ...propsWithoutUndefined\n      }[key]) : {\n        ...defaultVariants,\n        ...propsWithoutUndefined\n      }[key] === value;\n    }) ? [\n      ...acc,\n      cvClass,\n      cvClassName\n    ] : acc;\n  }, []);\n  return cx(base, getVariantClassNames, getCompoundVariantClassNames, props == null ? void 0 : props.class, props == null ? void 0 : props.className);\n}, badgeVariants = cva(\"rounded-md p-2\", {\n  variants: {\n    color: {\n      blue: \"\",\n      green: \"\",\n      red: \"\",\n      yellow: \"\",\n      purple: \"\",\n      orange: \"\",\n      pink: \"\"\n    },\n    style: {\n      default: \"text-white\",\n      outline: \"border text-zinc-950\"\n    }\n  },\n  compoundVariants: [\n    {\n      style: \"default\",\n      color: \"blue\",\n      className: \"bg-blue-500\"\n    },\n    {\n      style: \"default\",\n      color: \"green\",\n      className: \"bg-green-500\"\n    },\n    {\n      style: \"default\",\n      color: \"red\",\n      className: \"bg-red-500\"\n    },\n    {\n      style: \"default\",\n      color: \"yellow\",\n      className: \"bg-yellow-500\"\n    },\n    {\n      style: \"default\",\n      color: \"purple\",\n      className: \"bg-purple-500\"\n    },\n    {\n      style: \"default\",\n      color: \"orange\",\n      className: \"bg-orange-500\"\n    },\n    {\n      style: \"default\",\n      color: \"pink\",\n      className: \"bg-pink-500\"\n    },\n    {\n      style: \"outline\",\n      color: \"blue\",\n      className: \"border-blue-500\"\n    },\n    {\n      style: \"outline\",\n      color: \"green\",\n      className: \"border-green-500\"\n    },\n    {\n      style: \"outline\",\n      color: \"red\",\n      className: \"border-red-500\"\n    },\n    {\n      style: \"outline\",\n      color: \"yellow\",\n      className: \"border-yellow-500\"\n    },\n    {\n      style: \"outline\",\n      color: \"purple\",\n      className: \"border-purple-500\"\n    },\n    {\n      style: \"outline\",\n      color: \"orange\",\n      className: \"border-orange-500\"\n    },\n    {\n      style: \"outline\",\n      color: \"pink\",\n      className: \"border-pink-500\"\n    }\n  ],\n  defaultVariants: {\n    color: \"blue\",\n    style: \"default\"\n  }\n});\nfunction Badge({ children, color, style, className }) {\n  return /* @__PURE__ */ jsx(\"span\", { className: cn(badgeVariants({ color, style }), className), children });\n}\nfunction Button({\n  children,\n  variant = \"primary\",\n  size = \"md\",\n  asChild,\n  ...props\n}) {\n  return asChild ? /* @__PURE__ */ jsx(\"button\", { ...props, className: \"cursor-pointer\", children }) : /* @__PURE__ */ jsx(\n    \"button\",\n    {\n      ...props,\n      className: cn(\n        \"flex h-12 cursor-pointer items-center justify-center rounded-lg px-4 py-2 font-medium text-sm text-white\",\n        size === \"sm\" && \"h-8\",\n        size === \"md\" && \"h-12\",\n        size === \"lg\" && \"h-16\",\n        variant === \"primary\" && \"bg-blue-600\",\n        variant === \"secondary\" && \"bg-zinc-500/40\",\n        variant === \"outline\" && \"border border-zinc-500 bg-white text-blue-500\",\n        variant === \"ghost\" && \"bg-transparent text-blue-500\"\n      ),\n      type: \"submit\",\n      children\n    }\n  );\n}\nconst useToolbar = () => usePlugins().toolbarContext;\nexport {\n  Badge,\n  Button,\n  d as Panel,\n  f as PanelContent,\n  k as PanelFooter,\n  e as PanelHeader,\n  useToolbar\n};\n` };\nfunction initToolbar(config = {}) {\n  if (!(typeof window < \"u\")) {\n    console.warn(\n      \"Stagewise Toolbar is not supported in non-browser environments.\"\n    );\n    return;\n  }\n  if (document.querySelector(\"stagewise-toolbar\")) {\n    console.warn(\"Stagewise Toolbar is already loaded - aborting init.\");\n    return;\n  }\n  const wrapper = document.createElement(\"stagewise-toolbar\");\n  wrapper.style.display = \"block\", wrapper.style.position = \"fixed\", wrapper.style.top = \"0\", wrapper.style.left = \"0\", wrapper.style.right = \"0\", wrapper.style.bottom = \"0\", wrapper.style.width = \"100vw\", wrapper.style.height = \"100vh\", wrapper.style.zIndex = \"2147483647\", wrapper.style.pointerEvents = \"none\";\n  const iframe = document.createElement(\"iframe\");\n  iframe.style.display = \"block\", iframe.style.border = \"none\", iframe.style.overflow = \"hidden\", iframe.style.margin = \"0\", iframe.style.padding = \"0\", iframe.style.width = \"100vw\", iframe.style.height = \"100vh\", iframe.style.backgroundColor = \"transparent\", iframe.style.pointerEvents = \"none\", iframe.style.colorScheme = \"normal\", iframe.sandbox.add(\"allow-same-origin\"), iframe.sandbox.add(\"allow-scripts\"), iframe.sandbox.add(\"allow-presentation\"), iframe.sandbox.add(\"allow-pointer-lock\"), iframe.setAttribute(\"allowtransparency\", \"true\"), iframe.srcdoc = '<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link rel=\"preconnect\" href=\"https://rsms.me/\"><link rel=\"stylesheet\" href=\"https://rsms.me/inter/inter.css\"></head><body style=\"pointer-events: none;\"></body></html>', iframe.addEventListener(\"load\", () => {\n    let lastMouseOverInteractiveAreaState = !1;\n    const handleMouseMove = (e) => {\n      const elementAtPoint = iframe.contentDocument.elementFromPoint(\n        e.clientX,\n        e.clientY\n      ), isInteractive = elementAtPoint && elementAtPoint !== document.body && elementAtPoint.tagName !== \"HTML\";\n      isInteractive !== lastMouseOverInteractiveAreaState && (iframe.style.pointerEvents = isInteractive ? \"auto\" : \"none\", lastMouseOverInteractiveAreaState = isInteractive);\n    };\n    window.addEventListener(\"mousemove\", handleMouseMove, { capture: !0 }), iframe.contentWindow.addEventListener(\"mousemove\", handleMouseMove, {\n      capture: !0\n    });\n    const devSuffix = \"\", main_modules = Object.fromEntries(\n      Object.entries(define_MAIN_MODULES_default).map(([key, value]) => [\n        key,\n        URL.createObjectURL(new Blob([value], { type: \"text/javascript\" }))\n      ])\n    );\n    if (main_modules[\"@stagewise/toolbar/plugin-ui\"] = URL.createObjectURL(\n      new Blob([\"export * from 'plugin-ui.js'\"], { type: \"text/javascript\" })\n    ), config.plugins)\n      for (const [index, plugin] of config.plugins.entries()) {\n        const plugin_module = URL.createObjectURL(\n          new Blob([plugin.mainPlugin], { type: \"text/javascript\" })\n        );\n        main_modules[`plugin-entry-${index}`] = plugin_module;\n      }\n    const config_module = URL.createObjectURL(\n      new Blob([getConfigModuleContent(config)], { type: \"text/javascript\" })\n    );\n    main_modules[\"@stagewise/toolbar/config\"] = config_module;\n    const imports = {\n      react: `https://esm.sh/react@19.1.0${devSuffix}`,\n      \"react-dom\": `https://esm.sh/react-dom@19.1.0${devSuffix}`,\n      \"react-dom/client\": `https://esm.sh/react-dom@19.1.0/client${devSuffix}`,\n      \"react/jsx-runtime\": `https://esm.sh/react@19.1.0/jsx-runtime${devSuffix}`,\n      ...main_modules\n    }, importmapScript = iframe.contentDocument.createElement(\"script\");\n    importmapScript.type = \"importmap\", importmapScript.textContent = `{\"imports\":${JSON.stringify(imports)}}`, iframe.contentDocument.head.appendChild(importmapScript);\n    const script = iframe.contentDocument.createElement(\"script\");\n    script.type = \"module\", script.textContent = \"import('index.js');\", iframe.contentDocument.head.appendChild(script);\n  }), wrapper.appendChild(iframe), document.body.appendChild(wrapper);\n}\nfunction getConfigModuleContent(config) {\n  var _a, _b;\n  const pluginImports = ((_a = config.plugins) == null ? void 0 : _a.map((_, index) => `import plugin${index} from 'plugin-entry-${index}'`).join(`\n`)) ?? \"\", convertedPluginArray = `[${((_b = config.plugins) == null ? void 0 : _b.map((_, index) => `plugin${index}`).join(\",\")) ?? \"\"}]`, convertedConfig = {\n    ...config,\n    plugins: \"__PLUGIN_PLACEHOLDER__\"\n  };\n  let configString = JSON.stringify(convertedConfig);\n  return configString = configString.replace(\n    '\"__PLUGIN_PLACEHOLDER__\"',\n    convertedPluginArray\n  ), `${pluginImports}\n\nconst config = ${configString};\n\nexport default config;\n`;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@stagewise/toolbar/dist/index.es.js\n"));

/***/ })

}]);